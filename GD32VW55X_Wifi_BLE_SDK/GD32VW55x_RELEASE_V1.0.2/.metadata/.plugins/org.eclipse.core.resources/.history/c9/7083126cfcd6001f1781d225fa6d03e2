/*!
    \file    main.c
    \brief   Main loop of GD32VW55x SDK.

    \version 2023-07-20, V1.0.0, firmware for GD32VW55x
*/

#include <stdint.h>
#include "wifi_export.h"
#include "gd32vw55x_platform.h"
#include "uart.h"
#include "ble_init.h"
#include "gd32vw55x.h"
#include "wrapper_os.h"
#include "cmd_shell.h"
#include "atcmd.h"
#include "util.h"
#include "wlan_config.h"
#include "wifi_init.h"
#include "user_setting.h"
#include "version.h"
#include "_build_date.h"
#include "wifi_management.h"
#include "lwip/apps/mqtt.h"
#include "lwip/apps/mqtt5.h"
#include "lwip/apps/mqtt_priv.h"

#define SSID            "Mobiliz NaRGE_Guest"
#define PASSWORD        "M@b!lz12.*"

#define SERVER_PORT     8883
ip_addr_t sever_ip_addr = IPADDR4_INIT_BYTES(192, 168, 8, 115);  // Replace with your MQTT broker IP

static char client_id[] = {'G', 'i', 'g', 'a', 'D', 'e', 'v', 'i', 'c', 'e', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
struct mqtt_connect_client_info_t client_info = {
    client_id,
    "user",    // Replace with your username
    "123456",  // Replace with your password
    120,
    NULL,
    NULL,
    0,
    0
};

#define TOPIC_QOS_SUB    1
#define TOPIC_QOS_PUB    1
#define TOPIC_RETAIN     1
char* topic_sub  = "topic_sub_test";
char* topic_pub  = "topic_pub_test";
char context[]   = "helloworld";

static mqtt_client_t *mqtt_client = NULL;
int16_t connect_fail_reason = -1;
volatile bool has_received_sub_topic = false;
volatile bool sub_topic_unsub_flag = false;

// Keep all the callback functions and helper functions from the example
void mqtt_receive_pub_msg_print(void *inpub_arg, const uint8_t *data, uint16_t payload_length, uint8_t flags, uint8_t retain)
{
    if (retain > 0 ) {
        printf("retain: ");
    }

    printf("payload: ");
    for (uint16_t idx = 0; idx < payload_length; idx++) {
        printf("%c", *(data + idx));
    }
    printf("\r\n");
    has_received_sub_topic = true;
}

void mqtt_receive_pub_topic_print(void *inpub_arg, const char *data, uint16_t payload_length)
{
    printf("receiced topic: ");
    for (uint16_t idx = 0; idx < payload_length; idx++) {
        printf("%c", *(data + idx));
    }
    printf("  ");
}

void mqtt_connect_callback(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
    if (status != MQTT_CONNECT_ACCEPTED) {
        printf("MQTT connection failed with status %d\n", status);
    }
}

static void mqtt_pub_cb(void *arg, err_t status)
{
    if (status == ERR_OK) {
        printf("topic publish success.\r\n");
    } else {
        printf("topic publish failed or timeout.\r\n");
    }
}

static void mqtt_sub_cb(void *arg, err_t status)
{
    if (status == ERR_OK) {
        printf("topic subscribe success.\r\n");
    } else {
        printf("topic subscribe failed or timeout.\r\n");
    }
}

static void mqtt_unsub_cb(void *arg, err_t status)
{
    if (status == ERR_OK) {
        printf("topic unsubscribe success.\r\n");
    } else {
        printf("topic unsubscribe failed or timeout.\r\n");
    }
    sub_topic_unsub_flag = true;
}

static int client_connect(void)
{
    err_t ret;

    mqtt_client = mqtt_client_new();
    if (mqtt_client == NULL) {
        printf("Can't create mqtt client\n");
        return -1;
    }

    mqtt_set_inpub_callback(mqtt_client, mqtt_receive_pub_topic_print, mqtt_receive_pub_msg_print, &client_info);

    ret = mqtt_client_connect(mqtt_client, &sever_ip_addr, SERVER_PORT, mqtt_connect_callback, NULL, &client_info);
    if (ret != ERR_OK) {
        printf("mqtt_client_connect failed\n");
        return ret;
    }

    while (!mqtt_client_is_connected(mqtt_client)) {
        sys_yield();
    }

    printf("MQTT: Successfully connected to server.\r\n");
    return 0;
}

static void mqtt_client_task(void *param)
{
    int status;
    struct mac_scan_result candidate;

    // Start Wi-Fi scan
    printf("Start Wi-Fi scan.\r\n");
    status = wifi_management_scan(1, SSID);
    if (status != 0) {
        printf("Wi-Fi scan failed.\r\n");
        goto exit;
    }

    sys_memset(&candidate, 0, sizeof(struct mac_scan_result));
    status = wifi_netlink_candidate_ap_find(WIFI_VIF_INDEX_DEFAULT, NULL, SSID, &candidate);
    if (status != 0) {
        goto exit;
    }

    // Connect to Wi-Fi
    printf("Start Wi-Fi connection.\r\n");
    if (wifi_management_connect(SSID, PASSWORD, 1) != 0) {
        printf("Wi-Fi connection failed\r\n");
        goto exit;
    }

    // Connect to MQTT broker
    // Connect to MQTT broker
    if (client_connect() == 0) {
        // Publish a test message using mqtt_msg_publish
        mqtt_msg_publish(mqtt_client, topic_pub, context, strlen(context),
                        TOPIC_QOS_PUB, TOPIC_RETAIN, mqtt_pub_cb, NULL);
    }

exit:
    sys_task_delete(NULL);
}

int main(void)
{
    platform_init();

    dbg_print(NOTICE, "SDK Version: %s\n", WIFI_GIT_REVISION);
    dbg_print(NOTICE, "Build date: %s\n", SDK_BUILD_DATE);

    if (wifi_init()) {
        printf("wifi init failed.\r\n");
    }

    // Create MQTT client task
    sys_task_create_dynamic((const uint8_t *)"mqtt client", 4096, OS_TASK_PRIORITY(0), mqtt_client_task, NULL);

    sys_os_start();

    for (;;);

    return 0;
}
