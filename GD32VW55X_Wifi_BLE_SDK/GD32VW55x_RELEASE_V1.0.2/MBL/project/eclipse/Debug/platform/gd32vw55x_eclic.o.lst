   1              		.file	"gd32vw55x_eclic.c"
   2              		.option nopic
   3              		.attribute arch, "rv32i2p0_m2p0_a2p0_f2p0_c2p0_b_p0p94"
   4              		.attribute unaligned_access, 0
   5              		.attribute stack_align, 16
   6              		.text
   7              	.Ltext0:
   8              		.cfi_sections	.debug_frame
   9              		.section	.text.eclic_global_interrupt_enable,"ax",@progbits
  10              		.align	1
  11              		.globl	eclic_global_interrupt_enable
  13              	eclic_global_interrupt_enable:
  14              	.LFB365:
  15              		.file 1 "C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_REL
   1:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** /*!
   2:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \file    gd32vw55x_eclic.c
   3:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \brief   ECLIC(Enhancement Core-Local Interrupt Controller) driver
   4:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** 
   5:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \version 2023-07-20, V1.0.0, firmware for GD32VW55x
   6:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** */
   7:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** 
   8:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** /*
   9:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     Copyright (c) 2023, GigaDevice Semiconductor Inc.
  10:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** 
  11:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     Redistribution and use in source and binary forms, with or without modification,
  12:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** are permitted provided that the following conditions are met:
  13:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** 
  14:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     1. Redistributions of source code must retain the above copyright notice, this
  15:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****        list of conditions and the following disclaimer.
  16:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     2. Redistributions in binary form must reproduce the above copyright notice,
  17:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****        this list of conditions and the following disclaimer in the documentation
  18:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****        and/or other materials provided with the distribution.
  19:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     3. Neither the name of the copyright holder nor the names of its contributors
  20:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****        may be used to endorse or promote products derived from this software without
  21:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****        specific prior written permission.
  22:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** 
  23:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  24:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  26:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  27:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  28:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  29:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  30:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  31:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
  32:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** OF SUCH DAMAGE.
  33:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** */
  34:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** 
  35:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** #include "gd32vw55x_eclic.h"
  36:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** #include "riscv_encoding.h"
  37:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** 
  38:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** /*!
  39:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \brief      enable the global interrupt
  40:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[in]  none
  41:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[out] none
  42:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \retval     none
  43:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** */
  44:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** void eclic_global_interrupt_enable(void)
  45:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** {
  16              		.loc 1 45 1
  17              		.cfi_startproc
  46:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     __enable_irq();
  18              		.loc 1 46 5
  19              		.file 2 "../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h"
   1:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /*
   2:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * Copyright (c) 2019 Nuclei Limited. All rights reserved.
   3:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  *
   4:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * SPDX-License-Identifier: Apache-2.0
   5:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  *
   6:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * not use this file except in compliance with the License.
   8:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * You may obtain a copy of the License at
   9:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  *
  10:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * www.apache.org/licenses/LICENSE-2.0
  11:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  *
  12:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * Unless required by applicable law or agreed to in writing, software
  13:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * See the License for the specific language governing permissions and
  16:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * limitations under the License.
  17:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
  18:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
  19:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #ifndef __CORE_FEATURE_BASE__
  20:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #define __CORE_FEATURE_BASE__
  21:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /*!
  22:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * @file     core_feature_base.h
  23:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * @brief    Base core feature API for Nuclei N/NX Core
  24:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
  25:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #include <stdint.h>
  26:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #include "riscv_encoding.h"
  27:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
  28:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #ifdef __cplusplus
  29:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  extern "C" {
  30:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #endif
  31:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
  32:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
  33:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \defgroup NMSIS_Core_Registers     Register Define and Type Definitions
  34:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief   Type definitions and defines for core registers.
  35:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  *
  36:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * @{
  37:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
  38:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #ifndef __RISCV_XLEN
  39:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****   /** \brief Refer to the width of an integer register in bits(either 32 or 64) */
  40:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****   #ifndef __riscv_xlen
  41:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     #define __RISCV_XLEN    32
  42:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****   #else
  43:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     #define __RISCV_XLEN    __riscv_xlen
  44:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****   #endif
  45:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #endif /* __RISCV_XLEN */
  46:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
  47:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /** \brief Type of Control and Status Register(CSR), depends on the XLEN defined in RISC-V */
  48:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #if __RISCV_XLEN == 32
  49:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****   typedef uint32_t rv_csr_t;
  50:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #elif __RISCV_XLEN == 64
  51:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****   typedef uint64_t rv_csr_t;
  52:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #else
  53:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****   typedef uint32_t rv_csr_t;
  54:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #endif
  55:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /** @} */ /* End of Doxygen Group NMSIS_Core_Registers */
  56:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
  57:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \defgroup NMSIS_Core_Base_Registers     Base Register Define and Type Definitions
  58:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \ingroup NMSIS_Core_Registers
  59:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief   Type definitions and defines for base core registers.
  60:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  *
  61:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * @{
  62:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
  63:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
  64:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief  Union type to access MISA CSR register.
  65:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
  66:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** typedef union {
  67:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     struct {
  68:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t a:1;                           /*!< bit:     0  Atomic extension */
  69:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t b:1;                           /*!< bit:     1  Tentatively reserved for Bit-Manip
  70:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t c:1;                           /*!< bit:     2  Compressed extension */
  71:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t d:1;                           /*!< bit:     3  Double-precision floating-point ex
  72:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t e:1;                           /*!< bit:     4  RV32E base ISA */
  73:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t f:1;                           /*!< bit:     5  Single-precision floating-point ex
  74:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t g:1;                           /*!< bit:     6  Additional standard extensions pre
  75:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t h:1;                           /*!< bit:     7  Hypervisor extension */
  76:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t i:1;                           /*!< bit:     8  RV32I/64I/128I base ISA */
  77:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t j:1;                           /*!< bit:     9  Tentatively reserved for Dynamical
  78:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved1:1;                  /*!< bit:     10 Reserved  */
  79:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t l:1;                           /*!< bit:     11 Tentatively reserved for Decimal F
  80:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t m:1;                           /*!< bit:     12 Integer Multiply/Divide extension 
  81:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t n:1;                           /*!< bit:     13 User-level interrupts supported  *
  82:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved2:1;                  /*!< bit:     14 Reserved  */
  83:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t p:1;                           /*!< bit:     15 Tentatively reserved for Packed-SI
  84:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t q:1;                           /*!< bit:     16 Quad-precision floating-point exte
  85:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _resreved3:1;                  /*!< bit:     17 Reserved  */
  86:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t s:1;                           /*!< bit:     18 Supervisor mode implemented  */
  87:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t t:1;                           /*!< bit:     19 Tentatively reserved for Transacti
  88:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t u:1;                           /*!< bit:     20 User mode implemented  */
  89:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t v:1;                           /*!< bit:     21 Tentatively reserved for Vector ex
  90:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved4:1;                  /*!< bit:     22 Reserved  */
  91:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t x:1;                           /*!< bit:     23 Non-standard extensions present  *
  92:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
  93:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved5:38;                 /*!< bit:     24..61 Reserved  */
  94:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t mxl:2;                         /*!< bit:     62..63 Machine XLEN  */
  95:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #else
  96:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved5:6;                  /*!< bit:     24..29 Reserved  */
  97:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t mxl:2;                         /*!< bit:     30..31 Machine XLEN  */
  98:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #endif
  99:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 100:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 101:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** } CSR_MISA_Type;
 102:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 103:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
 104:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief  Union type to access MSTATUS CSR register.
 105:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
 106:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** typedef union {
 107:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     struct {
 108:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
 109:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved0:3;                  /*!< bit:     0..2  Reserved */
 110:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t mie:1;                         /*!< bit:     3  Machine mode interrupt enable flag
 111:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved1:3;                  /*!< bit:     4..6  Reserved */
 112:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t mpie:1;                        /*!< bit:     7  mirror of MIE flag */
 113:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved2:3;                  /*!< bit:     8..10  Reserved */
 114:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t mpp:2;                         /*!< bit:     11..12 mirror of Privilege Mode */
 115:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t fs:2;                          /*!< bit:     13..14 FS status flag */
 116:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t xs:2;                          /*!< bit:     15..16 XS status flag */
 117:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t mprv:1;                        /*!< bit:     Machine mode PMP */
 118:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved3:14;                 /*!< bit:     18..31 Reserved */
 119:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t uxl:2;                         /*!< bit:     32..33 user mode xlen */
 120:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved6:29;                 /*!< bit:     34..62 Reserved  */
 121:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t sd:1;                          /*!< bit:     Dirty status for XS or FS */
 122:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #else
 123:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved0:1;                  /*!< bit:     0  Reserved */
 124:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t sie:1;                         /*!< bit:     1  supervisor interrupt enable flag *
 125:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved1:1;                  /*!< bit:     2  Reserved */
 126:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t mie:1;                         /*!< bit:     3  Machine mode interrupt enable flag
 127:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved2:1;                  /*!< bit:     4  Reserved */
 128:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t spie:1;                        /*!< bit:     3  Supervisor Privilede mode interrup
 129:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved3:1;                  /*!< bit:     Reserved */
 130:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t mpie:1;                        /*!< bit:     mirror of MIE flag */
 131:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved4:3;                  /*!< bit:     Reserved */
 132:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t mpp:2;                         /*!< bit:     mirror of Privilege Mode */
 133:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t fs:2;                          /*!< bit:     FS status flag */
 134:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t xs:2;                          /*!< bit:     XS status flag */
 135:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t mprv:1;                        /*!< bit:     Machine mode PMP */
 136:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t sum:1;                         /*!< bit:     Supervisor Mode load and store protec
 137:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved6:12;                 /*!< bit:     19..30 Reserved  */
 138:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t sd:1;                          /*!< bit:     Dirty status for XS or FS */
 139:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #endif
 140:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 141:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 142:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** } CSR_MSTATUS_Type;
 143:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 144:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
 145:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief  Union type to access MTVEC CSR register.
 146:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
 147:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** typedef union {
 148:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     struct {
 149:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t mode:6;                        /*!< bit:     0..5   interrupt mode control */
 150:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
 151:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t addr:58;                       /*!< bit:     6..63  mtvec address */
 152:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #else
 153:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t addr:26;                       /*!< bit:     6..31  mtvec address */
 154:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #endif
 155:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 156:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 157:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** } CSR_MTVEC_Type;
 158:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 159:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
 160:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief  Union type to access MCAUSE CSR register.
 161:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
 162:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** typedef union {
 163:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     struct {
 164:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t exccode:12;                    /*!< bit:     11..0  exception or interrupt code */
 165:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved0:4;                  /*!< bit:     15..12  Reserved */
 166:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t mpil:8;                        /*!< bit:     23..16  Previous interrupt level */
 167:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved1:3;                  /*!< bit:     26..24  Reserved */
 168:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t mpie:1;                        /*!< bit:     27  Interrupt enable flag before ente
 169:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t mpp:2;                         /*!< bit:     29..28  Privilede mode flag before en
 170:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t minhv:1;                       /*!< bit:     30  Machine interrupt vector table */
 171:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
 172:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved2:32;                 /*!< bit:     31..62  Reserved */
 173:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t interrupt:1;                   /*!< bit:     63  trap type. 0 means exception and 
 174:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #else
 175:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t interrupt:1;                   /*!< bit:     31  trap type. 0 means exception and 
 176:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #endif
 177:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 178:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 179:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** } CSR_MCAUSE_Type;
 180:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 181:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
 182:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief  Union type to access MCOUNTINHIBIT CSR register.
 183:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
 184:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** typedef union {
 185:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     struct {
 186:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t cy:1;                          /*!< bit:     0     1 means disable mcycle counter 
 187:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved0:1;                  /*!< bit:     1     Reserved */
 188:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t ir:1;                          /*!< bit:     2     1 means disable minstret counte
 189:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
 190:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved1:61;                 /*!< bit:     3..63 Reserved */
 191:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #else
 192:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved1:29;                 /*!< bit:     3..31 Reserved */
 193:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #endif
 194:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 195:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 196:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** } CSR_MCOUNTINHIBIT_Type;
 197:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 198:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
 199:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief  Union type to access MSUBM CSR register.
 200:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
 201:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** typedef union {
 202:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     struct {
 203:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved0:6;                  /*!< bit:     0..5   Reserved */
 204:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t typ:2;                         /*!< bit:     6..7   current trap type */
 205:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t ptyp:2;                        /*!< bit:     8..9   previous trap type */
 206:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
 207:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved1:54;                 /*!< bit:     10..63 Reserved */
 208:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #else
 209:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved1:22;                 /*!< bit:     10..31 Reserved */
 210:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #endif
 211:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 212:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 213:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** } CSR_MSUBM_Type;
 214:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 215:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
 216:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief  Union type to access MDCAUSE CSR register.
 217:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
 218:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** typedef union {
 219:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     struct {
 220:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t mdcause:2;                     /*!< bit:     0..1   More detailed exception inform
 221:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved0:__RISCV_XLEN-2;     /*!< bit:     2..XLEN-1 Reserved */
 222:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 223:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 224:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** } CSR_MDCAUSE_Type;
 225:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 226:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
 227:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief  Union type to access MMISC_CTRL CSR register.
 228:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
 229:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** typedef union {
 230:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     struct {
 231:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved0:3;                  /*!< bit:     0..2  Reserved */
 232:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t bpu:1;                         /*!< bit:     3     dynamic prediction enable flag 
 233:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved1:2;                  /*!< bit:     4..5  Reserved */
 234:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t misalign:1;                    /*!< bit:     6     misaligned access support flag 
 235:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved2:2;                  /*!< bit:     7..8  Reserved */
 236:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t nmi_cause:1;                   /*!< bit:     9     mnvec control and nmi mcase exc
 237:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
 238:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved3:54;                 /*!< bit:     10..63 Reserved */
 239:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #else
 240:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved3:22;                 /*!< bit:     10..31 Reserved */
 241:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #endif
 242:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 243:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 244:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** } CSR_MMISCCTRL_Type;
 245:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 246:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** typedef CSR_MMISCCTRL_Type CSR_MMISCCTL_Type;
 247:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 248:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
 249:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief  Union type to access MCACHE_CTL CSR register.
 250:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
 251:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** typedef union {
 252:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     struct {
 253:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t ic_en:1;                       /*!< I-Cache enable */
 254:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t ic_scpd_mod:1;                 /*!< Scratchpad mode, 0: Scratchpad as ICache Data 
 255:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t ic_ecc_en:1;                   /*!< I-Cache ECC enable */
 256:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t ic_ecc_excp_en:1;              /*!< I-Cache 2bit ECC error exception enable */
 257:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t ic_rwtecc:1;                   /*!< Control I-Cache Tag Ram ECC code injection */
 258:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t ic_rwdecc:1;                   /*!< Control I-Cache Data Ram ECC code injection */
 259:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved0:10;
 260:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t dc_en:1;                       /*!< DCache enable */
 261:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t dc_ecc_en:1;                   /*!< D-Cache ECC enable */
 262:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t dc_ecc_excp_en:1;              /*!< D-Cache 2bit ECC error exception enable */
 263:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t dc_rwtecc:1;                   /*!< Control D-Cache Tag Ram ECC code injection */
 264:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t dc_rwdecc:1;                   /*!< Control D-Cache Data Ram ECC code injection */
 265:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved1:__RISCV_XLEN-21;
 266:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 267:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 268:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** } CSR_MCACHECTL_Type;
 269:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 270:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
 271:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief  Union type to access MSAVESTATUS CSR register.
 272:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
 273:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** typedef union {
 274:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     struct {
 275:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t mpie1:1;                       /*!< bit:     0     interrupt enable flag of fisrt 
 276:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t mpp1:2;                        /*!< bit:     1..2  privilede mode of fisrt level N
 277:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved0:3;                  /*!< bit:     3..5  Reserved */
 278:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t ptyp1:2;                       /*!< bit:     6..7  NMI/exception type of before fi
 279:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t mpie2:1;                       /*!< bit:     8     interrupt enable flag of second
 280:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t mpp2:2;                        /*!< bit:     9..10 privilede mode of second level 
 281:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved1:3;                  /*!< bit:     11..13     Reserved */
 282:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t ptyp2:2;                       /*!< bit:     14..15     NMI/exception type of befo
 283:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
 284:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved2:48;                 /*!< bit:     16..63 Reserved*/
 285:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #else
 286:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved2:16;                 /*!< bit:     16..31 Reserved*/
 287:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #endif
 288:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 289:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     rv_csr_t w;                                 /*!< Type      used for csr data access */
 290:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** } CSR_MSAVESTATUS_Type;
 291:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 292:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
 293:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief  Union type to access MILM_CTL CSR register.
 294:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
 295:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** typedef union {
 296:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     struct {
 297:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t ilm_en:1;                      /*!< ILM enable */
 298:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t ilm_ecc_en:1;                  /*!< ILM ECC eanble */
 299:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t ilm_ecc_excp_en:1;             /*!< ILM ECC exception enable */
 300:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t ilm_rwecc:1;                   /*!< Control mecc_code write to ilm, simulate error
 301:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved0:6;                  /*!< Reserved */
 302:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t ilm_bpa:__RISCV_XLEN-10;       /*!< ILM base address */
 303:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 304:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 305:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** } CSR_MILMCTL_Type;
 306:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 307:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
 308:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief  Union type to access MDLM_CTL CSR register.
 309:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
 310:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** typedef union {
 311:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     struct {
 312:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t dlm_en:1;                      /*!< DLM enable */
 313:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t dlm_ecc_en:1;                  /*!< DLM ECC eanble */
 314:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t dlm_ecc_excp_en:1;             /*!< DLM ECC exception enable */
 315:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t dlm_rwecc:1;                   /*!< Control mecc_code write to dlm, simulate error
 316:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved0:6;                  /*!< Reserved */
 317:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t dlm_bpa:__RISCV_XLEN-10;       /*!< DLM base address */
 318:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 319:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 320:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** } CSR_MDLMCTL_Type;
 321:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 322:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
 323:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief  Union type to access MCFG_INFO CSR register.
 324:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
 325:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** typedef union {
 326:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     struct {
 327:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t tee:1;                         /*!< TEE present */
 328:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t ecc:1;                         /*!< ECC present */
 329:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t clic:1;                        /*!< CLIC present */
 330:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t plic:1;                        /*!< PLIC present */
 331:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t fio:1;                         /*!< FIO present */
 332:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t ppi:1;                         /*!< PPI present */
 333:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t nice:1;                        /*!< NICE present */
 334:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t ilm:1;                         /*!< ILM present */
 335:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t dlm:1;                         /*!< DLM present */
 336:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t icache:1;                      /*!< ICache present */
 337:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t dcache:1;                      /*!< DCache present */
 338:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved0:__RISCV_XLEN-11;
 339:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 340:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 341:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** } CSR_MCFGINFO_Type;
 342:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 343:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
 344:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief  Union type to access MICFG_INFO CSR register.
 345:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
 346:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** typedef union {
 347:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     struct {
 348:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t set:4;                         /*!< I-Cache sets per way */
 349:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t way:3;                         /*!< I-Cache way */
 350:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t lsize:3;                       /*!< I-Cache line size */
 351:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t cache_ecc:1;                   /*!< I-Cache ECC present */
 352:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved0:5;
 353:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t lm_size:5;                     /*!< ILM size, need to be 2^n size */
 354:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t lm_xonly:1;                    /*!< ILM Execute only permission */
 355:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t lm_ecc:1;                      /*!< ILM ECC present */
 356:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved1:__RISCV_XLEN-23;
 357:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 358:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 359:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** } CSR_MICFGINFO_Type;
 360:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 361:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
 362:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief  Union type to access MDCFG_INFO CSR register.
 363:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
 364:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** typedef union {
 365:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     struct {
 366:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t set:4;                         /*!< D-Cache sets per way */
 367:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t way:3;                         /*!< D-Cache way */
 368:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t lsize:3;                       /*!< D-Cache line size */
 369:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t cache_ecc:1;                   /*!< D-Cache ECC present */
 370:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved0:5;
 371:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t lm_size:5;                     /*!< DLM size, need to be 2^n size */
 372:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t lm_xonly:1;                    /*!< DLM Execute only permission */
 373:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t lm_ecc:1;                      /*!< DLM ECC present */
 374:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved1:__RISCV_XLEN-23;
 375:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 376:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 377:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** } CSR_MDCFGINFO_Type;
 378:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 379:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
 380:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief  Union type to access MPPICFG_INFO CSR register.
 381:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
 382:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** typedef union {
 383:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     struct {
 384:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved0:1;                  /*!< Reserved */
 385:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t ppi_size:5;                    /*!< PPI size, need to be 2^n size */
 386:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved1:4;                  /*!< Reserved */
 387:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t ppi_bpa:__RISCV_XLEN-10;       /*!< PPI base address */
 388:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 389:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 390:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** } CSR_MPPICFGINFO_Type;
 391:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 392:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
 393:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief  Union type to access MFIOCFG_INFO CSR register.
 394:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
 395:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** typedef union {
 396:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     struct {
 397:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved0:1;                  /*!< Reserved */
 398:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t fio_size:5;                    /*!< FIO size, need to be 2^n size */
 399:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved1:4;                  /*!< Reserved */
 400:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t fio_bpa:__RISCV_XLEN-10;       /*!< FIO base address */
 401:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 402:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 403:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** } CSR_MFIOCFGINFO_Type;
 404:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 405:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
 406:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief  Union type to access MECC_LOCK CSR register.
 407:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
 408:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** typedef union {
 409:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     struct {
 410:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t ecc_lock:1;                    /*!< RW permission, ECC Lock configure */
 411:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved0:__RISCV_XLEN-1;     /*!< Reserved */
 412:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 413:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 414:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** } CSR_MECCLOCK_Type;
 415:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 416:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
 417:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief  Union type to access MECC_CODE CSR register.
 418:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
 419:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** typedef union {
 420:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     struct {
 421:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t code:9;                        /*!< Used to inject ECC check code */
 422:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved0:7;                  /*!< Reserved */
 423:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t ramid:5;                       /*!< Indicate 2bit ECC error, software can clear th
 424:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved1:3;                  /*!< Reserved */
 425:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t sramid:5;                      /*!< Indicate 1bit ECC error, software can clear th
 426:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         rv_csr_t _reserved2:__RISCV_XLEN-29;    /*!< Reserved */
 427:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 428:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 429:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** } CSR_MECCCODE_Type;
 430:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 431:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /** @} */ /* End of Doxygen Group NMSIS_Core_Base_Registers */
 432:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 433:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /* ###########################  Core Function Access  ########################### */
 434:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
 435:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \defgroup NMSIS_Core_CSR_Register_Access    Core CSR Register Access
 436:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \ingroup  NMSIS_Core
 437:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief    Functions to access the Core CSR Registers
 438:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \details
 439:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  *
 440:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * The following functions or macros provide access to Core CSR registers.
 441:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * - \ref NMSIS_Core_CSR_Encoding
 442:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * - \ref NMSIS_Core_CSR_Registers
 443:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  *   @{
 444:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
 445:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 446:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 447:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #ifndef __ASSEMBLY__
 448:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 449:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
 450:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief CSR operation Macro for csrrw instruction.
 451:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \details
 452:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * Read the content of csr register to __v,
 453:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * then write content of val into csr register, then return __v
 454:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \param csr   CSR macro definition defined in
 455:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  *              \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
 456:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \param val   value to store into the CSR register
 457:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \return the CSR register value before written
 458:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
 459:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #define __RV_CSR_SWAP(csr, val)                                 \
 460:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     ({                                                          \
 461:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         register rv_csr_t __v = (unsigned long)(val);           \
 462:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         __ASM volatile("csrrw %0, " STRINGIFY(csr) ", %1"       \
 463:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****                      : "=r"(__v)                                \
 464:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****                      : "r"(__v)                                \
 465:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****                      : "memory");                               \
 466:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         __v;                                                    \
 467:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     })
 468:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 469:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
 470:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief CSR operation Macro for csrr instruction.
 471:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \details
 472:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * Read the content of csr register to __v and return it
 473:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \param csr   CSR macro definition defined in
 474:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  *              \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
 475:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \return the CSR register value
 476:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
 477:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #define __RV_CSR_READ(csr)                                      \
 478:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     ({                                                          \
 479:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         register rv_csr_t __v;                                  \
 480:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         __ASM volatile("csrr %0, " STRINGIFY(csr)               \
 481:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****                      : "=r"(__v)                                \
 482:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****                      :                                          \
 483:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****                      : "memory");                               \
 484:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         __v;                                                    \
 485:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     })
 486:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 487:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
 488:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief CSR operation Macro for csrw instruction.
 489:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \details
 490:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * Write the content of val to csr register
 491:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \param csr   CSR macro definition defined in
 492:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  *              \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
 493:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \param val   value to store into the CSR register
 494:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
 495:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #define __RV_CSR_WRITE(csr, val)                                \
 496:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     ({                                                          \
 497:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         register rv_csr_t __v = (rv_csr_t)(val);                \
 498:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         __ASM volatile("csrw " STRINGIFY(csr) ", %0"            \
 499:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****                      :                                          \
 500:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****                      : "r"(__v)                                \
 501:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****                      : "memory");                               \
 502:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     })
 503:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 504:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
 505:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief CSR operation Macro for csrrs instruction.
 506:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \details
 507:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * Read the content of csr register to __v,
 508:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * then set csr register to be __v | val, then return __v
 509:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \param csr   CSR macro definition defined in
 510:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  *              \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
 511:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \param val   Mask value to be used wih csrrs instruction
 512:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \return the CSR register value before written
 513:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
 514:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #define __RV_CSR_READ_SET(csr, val)                             \
 515:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     ({                                                          \
 516:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         register rv_csr_t __v = (rv_csr_t)(val);                \
 517:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         __ASM volatile("csrrs %0, " STRINGIFY(csr) ", %1"       \
 518:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****                      : "=r"(__v)                                \
 519:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****                      : "r"(__v)                                \
 520:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****                      : "memory");                               \
 521:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         __v;                                                    \
 522:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     })
 523:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 524:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
 525:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief CSR operation Macro for csrs instruction.
 526:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \details
 527:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * Set csr register to be csr_content | val
 528:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \param csr   CSR macro definition defined in
 529:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  *              \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
 530:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \param val   Mask value to be used wih csrs instruction
 531:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
 532:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #define __RV_CSR_SET(csr, val)                                  \
 533:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     ({                                                          \
 534:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         register rv_csr_t __v = (rv_csr_t)(val);                \
 535:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         __ASM volatile("csrs " STRINGIFY(csr) ", %0"            \
 536:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****                      :                                          \
 537:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****                      : "r"(__v)                                \
 538:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****                      : "memory");                               \
 539:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     })
 540:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 541:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
 542:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief CSR operation Macro for csrrc instruction.
 543:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \details
 544:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * Read the content of csr register to __v,
 545:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * then set csr register to be __v & ~val, then return __v
 546:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \param csr   CSR macro definition defined in
 547:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  *              \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
 548:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \param val   Mask value to be used wih csrrc instruction
 549:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \return the CSR register value before written
 550:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
 551:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #define __RV_CSR_READ_CLEAR(csr, val)                           \
 552:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     ({                                                          \
 553:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         register rv_csr_t __v = (rv_csr_t)(val);                \
 554:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         __ASM volatile("csrrc %0, " STRINGIFY(csr) ", %1"       \
 555:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****                      : "=r"(__v)                                \
 556:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****                      : "r"(__v)                                \
 557:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****                      : "memory");                               \
 558:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         __v;                                                    \
 559:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     })
 560:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 561:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
 562:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief CSR operation Macro for csrc instruction.
 563:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \details
 564:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * Set csr register to be csr_content & ~val
 565:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \param csr   CSR macro definition defined in
 566:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  *              \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
 567:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \param val   Mask value to be used wih csrc instruction
 568:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
 569:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #define __RV_CSR_CLEAR(csr, val)                                \
 570:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     ({                                                          \
 571:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         register rv_csr_t __v = (rv_csr_t)(val);                \
 572:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****         __ASM volatile("csrc " STRINGIFY(csr) ", %0"            \
 573:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****                      :                                          \
 574:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****                      : "r"(__v)                                \
 575:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****                      : "memory");                               \
 576:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     })
 577:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** #endif /* __ASSEMBLY__ */
 578:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 579:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
 580:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief   Get IRQ status
 581:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \details Get IRQ state in the MSUBM Register.
 582:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \remarks
 583:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  *          Can only be executed in Privileged modes.
 584:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
 585:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 586:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** {
 587:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     return (uint32_t) ((__RV_CSR_READ(CSR_MSUBM) & ((0xFFFFFFFFUL << 6) & (0xFFFFFFFFUL >> (31U - (
 588:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** }
 589:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 590:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
 591:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief   Enable IRQ Interrupts
 592:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \details Enables IRQ interrupts by setting the MIE-bit in the MSTATUS Register.
 593:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \remarks
 594:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  *          Can only be executed in Privileged modes.
 595:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
 596:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 597:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** {
 598:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     __RV_CSR_SET(CSR_MSTATUS, MSTATUS_MIE);
  20              		.loc 2 598 5
  21              	.LBB48:
  22              	.LBB49:
  23              		.loc 2 598 5
  24              	.LVL0:
  25              		.loc 2 598 5
  26 0000 A147     		li	a5,8
  27              	 #APP
  28              	# 598 "../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h" 1
 599              	}
  29              		csrs 0x300, a5
  30              	# 0 "" 2
  31              	 #NO_APP
  32              	.LBE49:
  33              	.LBE48:
  47:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** }
  34              		.loc 1 47 1 is_stmt 0
  35 0006 8280     		ret
  36              		.cfi_endproc
  37              	.LFE365:
  39              		.section	.text.eclic_global_interrupt_disable,"ax",@progbits
  40              		.align	1
  41              		.globl	eclic_global_interrupt_disable
  43              	eclic_global_interrupt_disable:
  44              	.LFB366:
  48:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** 
  49:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** /*!
  50:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \brief      disable the global interrupt
  51:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[in]  none
  52:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[out] none
  53:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \retval     none
  54:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** */
  55:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** void eclic_global_interrupt_disable(void)
  56:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** {
  45              		.loc 1 56 1 is_stmt 1
  46              		.cfi_startproc
  57:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     __disable_irq();
  47              		.loc 1 57 5
 600:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** 
 601:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** /**
 602:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \brief   Disable IRQ Interrupts
 603:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \details Disables IRQ interrupts by clearing the MIE-bit in the MSTATUS Register.
 604:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  * \remarks
 605:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  *          Can only be executed in Privileged modes.
 606:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****  */
 607:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 608:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h **** {
 609:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h ****     __RV_CSR_CLEAR(CSR_MSTATUS, MSTATUS_MIE);
  48              		.loc 2 609 5
  49              	.LBB50:
  50              	.LBB51:
  51              		.loc 2 609 5
  52              	.LVL1:
  53              		.loc 2 609 5
  54 0000 A147     		li	a5,8
  55              	 #APP
  56              	# 609 "../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_base.h" 1
 610              	}
  57              		csrc 0x300, a5
  58              	# 0 "" 2
  59              	 #NO_APP
  60              	.LBE51:
  61              	.LBE50:
  58:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** }
  62              		.loc 1 58 1 is_stmt 0
  63 0006 8280     		ret
  64              		.cfi_endproc
  65              	.LFE366:
  67              		.section	.text.eclic_level_threshold_set,"ax",@progbits
  68              		.align	1
  69              		.globl	eclic_level_threshold_set
  71              	eclic_level_threshold_set:
  72              	.LFB367:
  59:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** 
  60:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** /*!
  61:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \brief      set machine mode interrupt level threshold
  62:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[in]  threshold: the level threshold needed to set (0 ~ 15)
  63:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[out] none
  64:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \retval     none
  65:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** */
  66:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** void eclic_level_threshold_set(uint8_t threshold)
  67:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** {
  73              		.loc 1 67 1 is_stmt 1
  74              		.cfi_startproc
  75              	.LVL2:
  68:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     ECLIC_SetMth(threshold);
  76              		.loc 1 68 5
  77              	.LBB52:
  78              	.LBB53:
  79              		.file 3 "../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h"
   1:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /*
   2:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * Copyright (c) 2019 Nuclei Limited. All rights reserved.
   3:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  *
   4:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * SPDX-License-Identifier: Apache-2.0
   5:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  *
   6:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * not use this file except in compliance with the License.
   8:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * You may obtain a copy of the License at
   9:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  *
  10:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * www.apache.org/licenses/LICENSE-2.0
  11:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  *
  12:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * Unless required by applicable law or agreed to in writing, software
  13:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * See the License for the specific language governing permissions and
  16:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * limitations under the License.
  17:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
  18:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #ifndef __CORE_FEATURE_ECLIC__
  19:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #define __CORE_FEATURE_ECLIC__
  20:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /*!
  21:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * @file     core_feature_eclic.h
  22:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * @brief    ECLIC feature API header file for Nuclei N/NX Core
  23:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
  24:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /*
  25:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * ECLIC Feature Configuration Macro:
  26:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * 1. __ECLIC_PRESENT:  Define whether Enhanced Core Local Interrupt Controller (ECLIC) Unit is pre
  27:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  *   * 0: Not present
  28:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  *   * 1: Present
  29:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * 2. __ECLIC_BASEADDR:  Base address of the ECLIC unit.
  30:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * 3. ECLIC_GetInfoCtlbits():  Define the number of hardware bits are actually implemented in the c
  31:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  *   Valid number is 1 - 8.
  32:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * 4. __ECLIC_INTNUM  : Define the external interrupt number of ECLIC Unit
  33:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  *
  34:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
  35:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #ifdef __cplusplus
  36:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  extern "C" {
  37:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #endif
  38:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
  39:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #if defined(__ECLIC_PRESENT) && (__ECLIC_PRESENT == 1)
  40:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /**
  41:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \defgroup NMSIS_Core_ECLIC_Registers     Register Define and Type Definitions Of ECLIC
  42:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \ingroup NMSIS_Core_Registers
  43:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \brief   Type definitions and defines for eclic registers.
  44:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  *
  45:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * @{
  46:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
  47:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
  48:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /**
  49:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \brief  Union type to access CLICFG configure register.
  50:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
  51:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** typedef union
  52:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** {
  53:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     struct {
  54:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         uint8_t _reserved0:1;                   /*!< bit:     0   Overflow condition code flag */
  55:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         uint8_t nlbits:4;                       /*!< bit:     29  Carry condition code flag */
  56:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         uint8_t _reserved1:2;                   /*!< bit:     30  Zero condition code flag */
  57:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         uint8_t _reserved2:1;                   /*!< bit:     31  Negative condition code flag */
  58:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     } b;                                        /*!< Structure used for bit  access */
  59:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     uint8_t w;                                  /*!< Type      used for byte access */
  60:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** } CLICCFG_Type;
  61:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
  62:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /**
  63:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \brief  Union type to access CLICINFO information register.
  64:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
  65:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** typedef union {
  66:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     struct {
  67:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         uint32_t numint:13;                     /*!< bit:  0..12   number of maximum interrupt inpu
  68:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         uint32_t version:8;                     /*!< bit:  13..20  20:17 for architecture version,1
  69:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         uint32_t intctlbits:4;                  /*!< bit:  21..24  specifies how many hardware bits
  70:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         uint32_t _reserved0:7;                  /*!< bit:  25..31  Reserved */
  71:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     } b;                                        /*!< Structure used for bit  access */
  72:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     uint32_t w;                                 /*!< Type      used for word access */
  73:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** } CLICINFO_Type;
  74:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
  75:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /**
  76:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \brief Access to the structure of a vector interrupt controller.
  77:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
  78:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** typedef struct {
  79:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     __IOM uint8_t  INTIP;                       /*!< Offset: 0x000 (R/W)  Interrupt set pending reg
  80:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     __IOM uint8_t  INTIE;                       /*!< Offset: 0x001 (R/W)  Interrupt set enable regi
  81:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     __IOM uint8_t  INTATTR;                     /*!< Offset: 0x002 (R/W)  Interrupt set attributes 
  82:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     __IOM uint8_t  INTCTRL;                     /*!< Offset: 0x003 (R/W)  Interrupt configure regis
  83:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** } CLIC_CTRL_Type;
  84:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
  85:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** typedef struct {
  86:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     __IOM uint8_t   CFG;                        /*!< Offset: 0x000 (R/W)  CLIC configuration regist
  87:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     uint8_t RESERVED0[3];
  88:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     __IM uint32_t  INFO;                        /*!< Offset: 0x004 (R/ )  CLIC information register
  89:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     uint8_t RESERVED1[3];
  90:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     __IOM uint8_t  MTH;                         /*!< Offset: 0x00B (R/W)  CLIC machine mode thresho
  91:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     uint32_t RESERVED2[0x3FD];
  92:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     CLIC_CTRL_Type CTRL[4096];                  /*!< Offset: 0x1000 (R/W) CLIC register structure f
  93:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** } CLIC_Type;
  94:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
  95:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #define CLIC_CLICCFG_NLBIT_Pos                 1U                                       /*!< CLIC C
  96:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #define CLIC_CLICCFG_NLBIT_Msk                 (0xFUL << CLIC_CLICCFG_NLBIT_Pos)        /*!< CLIC C
  97:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
  98:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #define CLIC_CLICINFO_CTLBIT_Pos                21U                                     /*!< CLIC I
  99:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #define CLIC_CLICINFO_CTLBIT_Msk                (0xFUL << CLIC_CLICINFO_CTLBIT_Pos)     /*!< CLIC I
 100:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 101:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #define CLIC_CLICINFO_VER_Pos                  13U                                      /*!< CLIC C
 102:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #define CLIC_CLICINFO_VER_Msk                  (0xFFUL << CLIC_CLICCFG_NLBIT_Pos)       /*!< CLIC C
 103:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 104:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #define CLIC_CLICINFO_NUM_Pos                  0U                                       /*!< CLIC C
 105:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #define CLIC_CLICINFO_NUM_Msk                  (0xFFFUL << CLIC_CLICINFO_NUM_Pos)       /*!< CLIC C
 106:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 107:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #define CLIC_INTIP_IP_Pos                      0U                                       /*!< CLIC I
 108:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #define CLIC_INTIP_IP_Msk                      (0x1UL << CLIC_INTIP_IP_Pos)             /*!< CLIC I
 109:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 110:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #define CLIC_INTIE_IE_Pos                      0U                                       /*!< CLIC I
 111:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #define CLIC_INTIE_IE_Msk                      (0x1UL << CLIC_INTIE_IE_Pos)             /*!< CLIC I
 112:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 113:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #define CLIC_INTATTR_TRIG_Pos                  1U                                       /*!< CLIC I
 114:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #define CLIC_INTATTR_TRIG_Msk                  (0x3UL << CLIC_INTATTR_TRIG_Pos)         /*!< CLIC I
 115:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 116:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #define CLIC_INTATTR_SHV_Pos                   0U                                       /*!< CLIC I
 117:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #define CLIC_INTATTR_SHV_Msk                   (0x1UL << CLIC_INTATTR_SHV_Pos)          /*!< CLIC I
 118:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 119:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #define ECLIC_MAX_NLBITS                       8U                                       /*!< Max nl
 120:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #define ECLIC_MODE_MTVEC_Msk                   3U                                       /*!< ECLIC 
 121:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 122:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #define ECLIC_NON_VECTOR_INTERRUPT             0x0                                      /*!< Non-Ve
 123:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #define ECLIC_VECTOR_INTERRUPT                 0x1                                      /*!< Vector
 124:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 125:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /**\brief ECLIC Trigger Enum for different Trigger Type */
 126:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** typedef enum ECLIC_TRIGGER {
 127:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     ECLIC_LEVEL_TRIGGER = 0x0,          /*!< Level Triggerred, trig[0] = 0 */
 128:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     ECLIC_POSTIVE_EDGE_TRIGGER = 0x1,   /*!< Postive/Rising Edge Triggered, trig[0] = 1, trig[1] = 
 129:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     ECLIC_NEGTIVE_EDGE_TRIGGER = 0x3,   /*!< Negtive/Falling Edge Triggered, trig[0] = 1, trig[1] =
 130:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     ECLIC_MAX_TRIGGER = 0x3             /*!< MAX Supported Trigger Mode */
 131:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** } ECLIC_TRIGGER_Type;
 132:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 133:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #ifndef __ECLIC_BASEADDR
 134:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /* Base address of ECLIC(__ECLIC_BASEADDR) should be defined in <Device.h> */
 135:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #error "__ECLIC_BASEADDR is not defined, please check!"
 136:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #endif
 137:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 138:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #ifndef __ECLIC_INTCTLBITS
 139:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /* Define __ECLIC_INTCTLBITS to get via ECLIC->INFO if not defined */
 140:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #define __ECLIC_INTCTLBITS                  (__ECLIC_GetInfoCtlbits())
 141:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #endif
 142:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 143:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /* ECLIC Memory mapping of Device */
 144:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #define ECLIC_BASE                          __ECLIC_BASEADDR                            /*!< ECLIC 
 145:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #define ECLIC                               ((CLIC_Type *) ECLIC_BASE)                  /*!< CLIC c
 146:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 147:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /** @} */ /* end of group NMSIS_Core_ECLIC_Registers */
 148:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 149:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /* ##########################   ECLIC functions  #################################### */
 150:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /**
 151:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \defgroup   NMSIS_Core_IntExc        Interrupts and Exceptions
 152:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \brief Functions that manage interrupts and exceptions via the ECLIC.
 153:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  *
 154:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * @{
 155:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
 156:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 157:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /**
 158:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \brief  Definition of IRQn numbers
 159:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \details
 160:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * The core interrupt enumeration names for IRQn values are defined in the file <b><Device>.h</b>.
 161:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - Interrupt ID(IRQn) from 0 to 18 are reserved for core internal interrupts.
 162:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - Interrupt ID(IRQn) start from 19 represent device-specific external interrupts.
 163:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - The first device-specific interrupt has the IRQn value 19.
 164:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  *
 165:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * The table below describes the core interrupt names and their availability in various Nuclei Core
 166:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
 167:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /* The following enum IRQn definition in this file
 168:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * is only used for doxygen documentation generation,
 169:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * The <Device>.h is the real file to define it by vendor
 170:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
 171:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #if defined(__ONLY_FOR_DOXYGEN_DOCUMENT_GENERATION__)
 172:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** typedef enum IRQn {
 173:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     /* ========= Nuclei N/NX Core Specific Interrupt Numbers  =========== */
 174:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     /* Core Internal Interrupt IRQn definitions */
 175:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     Reserved0_IRQn            =   0,              /*!<  Internal reserved */
 176:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     Reserved1_IRQn            =   1,              /*!<  Internal reserved */
 177:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     Reserved2_IRQn            =   2,              /*!<  Internal reserved */
 178:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     CLIC_INT_SFT              =   3,              /*!<  System Timer SW interrupt */
 179:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     Reserved3_IRQn            =   4,              /*!<  Internal reserved */
 180:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     Reserved4_IRQn            =   5,              /*!<  Internal reserved */
 181:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     Reserved5_IRQn            =   6,              /*!<  Internal reserved */
 182:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     CLIC_INT_TMR              =   7,              /*!<  System Timer Interrupt */
 183:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     Reserved6_IRQn            =   8,              /*!<  Internal reserved */
 184:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     Reserved7_IRQn            =   9,              /*!<  Internal reserved */
 185:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     Reserved8_IRQn            =  10,              /*!<  Internal reserved */
 186:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     Reserved9_IRQn            =  11,              /*!<  Internal reserved */
 187:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     Reserved10_IRQn           =  12,              /*!<  Internal reserved */
 188:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     Reserved11_IRQn           =  13,              /*!<  Internal reserved */
 189:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     Reserved12_IRQn           =  14,              /*!<  Internal reserved */
 190:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     Reserved13_IRQn           =  15,              /*!<  Internal reserved */
 191:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     Reserved14_IRQn           =  16,              /*!<  Internal reserved */
 192:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     Reserved15_IRQn           =  17,              /*!<  Internal reserved */
 193:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     Reserved16_IRQn           =  18,              /*!<  Internal reserved */
 194:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 195:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     /* ========= Device Specific Interrupt Numbers  =================== */
 196:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     /* ToDo: add here your device specific external interrupt numbers.
 197:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****      * 19~max(NUM_INTERRUPT, 1023) is reserved number for user.
 198:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****      * Maxmum interrupt supported could get from clicinfo.NUM_INTERRUPT.
 199:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****      * According the interrupt handlers defined in startup_Device.S
 200:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****      * eg.: Interrupt for Timer#1       eclic_tim1_handler   ->   TIM1_IRQn */
 201:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     FirstDeviceSpecificInterrupt_IRQn    = 19,    /*!< First Device Specific Interrupt */
 202:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     SOC_INT_MAX,                                  /*!< Number of total interrupts */
 203:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** } IRQn_Type;
 204:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #endif /* __ONLY_FOR_DOXYGEN_DOCUMENT_GENERATION__ */
 205:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 206:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #ifdef NMSIS_ECLIC_VIRTUAL
 207:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #ifndef NMSIS_ECLIC_VIRTUAL_HEADER_FILE
 208:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         #define NMSIS_ECLIC_VIRTUAL_HEADER_FILE "nmsis_eclic_virtual.h"
 209:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #endif
 210:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #include NMSIS_ECLIC_VIRTUAL_HEADER_FILE
 211:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #else
 212:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #define ECLIC_SetCfgNlbits            __ECLIC_SetCfgNlbits
 213:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #define ECLIC_GetCfgNlbits            __ECLIC_GetCfgNlbits
 214:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #define ECLIC_GetInfoVer              __ECLIC_GetInfoVer
 215:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #define ECLIC_GetInfoCtlbits          __ECLIC_GetInfoCtlbits
 216:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #define ECLIC_GetInfoNum              __ECLIC_GetInfoNum
 217:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #define ECLIC_SetMth                  __ECLIC_SetMth
 218:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #define ECLIC_GetMth                  __ECLIC_GetMth
 219:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #define ECLIC_EnableIRQ               __ECLIC_EnableIRQ
 220:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #define ECLIC_GetEnableIRQ            __ECLIC_GetEnableIRQ
 221:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #define ECLIC_DisableIRQ              __ECLIC_DisableIRQ
 222:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #define ECLIC_SetPendingIRQ           __ECLIC_SetPendingIRQ
 223:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #define ECLIC_GetPendingIRQ           __ECLIC_GetPendingIRQ
 224:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #define ECLIC_ClearPendingIRQ         __ECLIC_ClearPendingIRQ
 225:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #define ECLIC_SetTrigIRQ              __ECLIC_SetTrigIRQ
 226:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #define ECLIC_GetTrigIRQ              __ECLIC_GetTrigIRQ
 227:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #define ECLIC_SetShvIRQ               __ECLIC_SetShvIRQ
 228:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #define ECLIC_GetShvIRQ               __ECLIC_GetShvIRQ
 229:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #define ECLIC_SetCtrlIRQ              __ECLIC_SetCtrlIRQ
 230:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #define ECLIC_GetCtrlIRQ              __ECLIC_GetCtrlIRQ
 231:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #define ECLIC_SetLevelIRQ             __ECLIC_SetLevelIRQ
 232:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #define ECLIC_GetLevelIRQ             __ECLIC_GetLevelIRQ
 233:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #define ECLIC_SetPriorityIRQ          __ECLIC_SetPriorityIRQ
 234:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #define ECLIC_GetPriorityIRQ          __ECLIC_GetPriorityIRQ
 235:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 236:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #endif /* NMSIS_ECLIC_VIRTUAL */
 237:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 238:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #ifdef NMSIS_VECTAB_VIRTUAL
 239:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #ifndef NMSIS_VECTAB_VIRTUAL_HEADER_FILE
 240:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         #define NMSIS_VECTAB_VIRTUAL_HEADER_FILE "nmsis_vectab_virtual.h"
 241:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #endif
 242:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #include NMSIS_VECTAB_VIRTUAL_HEADER_FILE
 243:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #else
 244:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #define ECLIC_SetVector              __ECLIC_SetVector
 245:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     #define ECLIC_GetVector              __ECLIC_GetVector
 246:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** #endif  /* (NMSIS_VECTAB_VIRTUAL) */
 247:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 248:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /**
 249:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \brief  Set nlbits value
 250:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \details
 251:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * This function set the nlbits value of CLICCFG register.
 252:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \param [in]    nlbits    nlbits value
 253:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \remarks
 254:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - nlbits is used to set the width of level in the CLICINTCTL[i].
 255:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \sa
 256:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - \ref ECLIC_GetCfgNlbits
 257:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
 258:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** __STATIC_FORCEINLINE void __ECLIC_SetCfgNlbits(uint32_t nlbits)
 259:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** {
 260:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     ECLIC->CFG &= ~CLIC_CLICCFG_NLBIT_Msk;
 261:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     ECLIC->CFG |= (uint8_t)((nlbits <<CLIC_CLICCFG_NLBIT_Pos) & CLIC_CLICCFG_NLBIT_Msk);
 262:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 263:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 264:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /**
 265:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \brief  Get nlbits value
 266:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \details
 267:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * This function get the nlbits value of CLICCFG register.
 268:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \return   nlbits value of CLICCFG register
 269:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \remarks
 270:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - nlbits is used to set the width of level in the CLICINTCTL[i].
 271:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \sa
 272:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - \ref ECLIC_SetCfgNlbits
 273:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
 274:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** __STATIC_FORCEINLINE uint32_t __ECLIC_GetCfgNlbits(void)
 275:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** {
 276:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     return ((uint32_t)((ECLIC->CFG & CLIC_CLICCFG_NLBIT_Msk) >> CLIC_CLICCFG_NLBIT_Pos));
 277:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 278:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 279:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /**
 280:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \brief  Get the ECLIC version number
 281:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \details
 282:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * This function gets the hardware version information from CLICINFO register.
 283:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \return   hardware version number in CLICINFO register.
 284:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \remarks
 285:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - This function gets harware version information from CLICINFO register.
 286:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - Bit 20:17 for architecture version, bit 16:13 for implementation version.
 287:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \sa
 288:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - \ref ECLIC_GetInfoNum
 289:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** */
 290:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** __STATIC_FORCEINLINE uint32_t __ECLIC_GetInfoVer(void)
 291:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** {
 292:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     return ((uint32_t)((ECLIC->INFO & CLIC_CLICINFO_VER_Msk) >> CLIC_CLICINFO_VER_Pos));
 293:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 294:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 295:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /**
 296:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \brief  Get CLICINTCTLBITS
 297:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \details
 298:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * This function gets CLICINTCTLBITS from CLICINFO register.
 299:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \return  CLICINTCTLBITS from CLICINFO register.
 300:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \remarks
 301:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - In the CLICINTCTL[i] registers, with 2 <= CLICINTCTLBITS <= 8.
 302:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - The implemented bits are kept left-justified in the most-significant bits of each 8-bit
 303:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  *   CLICINTCTL[I] register, with the lower unimplemented bits treated as hardwired to 1.
 304:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \sa
 305:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - \ref ECLIC_GetInfoNum
 306:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
 307:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** __STATIC_FORCEINLINE uint32_t __ECLIC_GetInfoCtlbits(void)
 308:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** {
 309:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     return ((uint32_t)((ECLIC->INFO & CLIC_CLICINFO_CTLBIT_Msk) >> CLIC_CLICINFO_CTLBIT_Pos));
 310:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 311:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 312:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /**
 313:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \brief  Get number of maximum interrupt inputs supported
 314:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \details
 315:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * This function gets number of maximum interrupt inputs supported from CLICINFO register.
 316:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \return  number of maximum interrupt inputs supported from CLICINFO register.
 317:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \remarks
 318:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - This function gets number of maximum interrupt inputs supported from CLICINFO register.
 319:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - The num_interrupt field specifies the actual number of maximum interrupt inputs supported in t
 320:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \sa
 321:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - \ref ECLIC_GetInfoCtlbits
 322:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
 323:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** __STATIC_FORCEINLINE uint32_t __ECLIC_GetInfoNum(void)
 324:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** {
 325:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     return ((uint32_t)((ECLIC->INFO & CLIC_CLICINFO_NUM_Msk) >> CLIC_CLICINFO_NUM_Pos));
 326:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 327:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 328:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /**
 329:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \brief  Set Machine Mode Interrupt Level Threshold
 330:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \details
 331:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * This function sets machine mode interrupt level threshold.
 332:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \param [in]  mth       Interrupt Level Threshold.
 333:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \sa
 334:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - \ref ECLIC_GetMth
 335:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
 336:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** __STATIC_FORCEINLINE void __ECLIC_SetMth(uint8_t mth)
 337:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** {
 338:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     ECLIC->MTH = mth;
  80              		.loc 3 338 5
  81              		.loc 3 338 16 is_stmt 0
  82 0000 B70700D2 		li	a5,-771751936
  83 0004 A385A700 		sb	a0,11(a5)
  84              	.LVL3:
  85              	.LBE53:
  86              	.LBE52:
  69:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** }
  87              		.loc 1 69 1
  88 0008 8280     		ret
  89              		.cfi_endproc
  90              	.LFE367:
  92              		.section	.text.eclic_priority_group_set,"ax",@progbits
  93              		.align	1
  94              		.globl	eclic_priority_group_set
  96              	eclic_priority_group_set:
  97              	.LFB368:
  70:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** 
  71:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** /*!
  72:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \brief      set the priority group
  73:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[in]  prigroup: specify the priority group
  74:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****       \arg        ECLIC_PRIGROUP_LEVEL0_PRIO4
  75:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****       \arg        ECLIC_PRIGROUP_LEVEL1_PRIO3
  76:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****       \arg        ECLIC_PRIGROUP_LEVEL2_PRIO2
  77:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****       \arg        ECLIC_PRIGROUP_LEVEL3_PRIO1
  78:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****       \arg        ECLIC_PRIGROUP_LEVEL4_PRIO0
  79:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[out] none
  80:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \retval     none
  81:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** */
  82:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** void eclic_priority_group_set(uint8_t prigroup)
  83:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** {
  98              		.loc 1 83 1 is_stmt 1
  99              		.cfi_startproc
 100              	.LVL4:
  84:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     ECLIC_SetCfgNlbits(prigroup);
 101              		.loc 1 84 5
 102              	.LBB54:
 103              	.LBB55:
 260:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     ECLIC->CFG |= (uint8_t)((nlbits <<CLIC_CLICCFG_NLBIT_Pos) & CLIC_CLICCFG_NLBIT_Msk);
 104              		.loc 3 260 16 is_stmt 0
 105 0000 B70700D2 		li	a5,-771751936
 106 0004 03C70700 		lbu	a4,0(a5)
 107              	.LVL5:
 260:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     ECLIC->CFG |= (uint8_t)((nlbits <<CLIC_CLICCFG_NLBIT_Pos) & CLIC_CLICCFG_NLBIT_Msk);
 108              		.loc 3 260 5 is_stmt 1
 261:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 109              		.loc 3 261 37 is_stmt 0
 110 0008 0605     		slli	a0,a0,1
 111              	.LVL6:
 261:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 112              		.loc 3 261 19
 113 000a 7989     		andi	a0,a0,30
 260:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     ECLIC->CFG |= (uint8_t)((nlbits <<CLIC_CLICCFG_NLBIT_Pos) & CLIC_CLICCFG_NLBIT_Msk);
 114              		.loc 3 260 16
 115 000c 1377170E 		andi	a4,a4,225
 116 0010 2380E700 		sb	a4,0(a5)
 261:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 117              		.loc 3 261 5 is_stmt 1
 261:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 118              		.loc 3 261 16 is_stmt 0
 119 0014 03C70700 		lbu	a4,0(a5)
 120 0018 1377F70F 		andi	a4,a4,0xff
 121 001c 598D     		or	a0,a0,a4
 122 001e 2380A700 		sb	a0,0(a5)
 123              	.LBE55:
 124              	.LBE54:
  85:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** }
 125              		.loc 1 85 1
 126 0022 8280     		ret
 127              		.cfi_endproc
 128              	.LFE368:
 130              		.section	.text.eclic_irq_enable,"ax",@progbits
 131              		.align	1
 132              		.globl	eclic_irq_enable
 134              	eclic_irq_enable:
 135              	.LFB369:
  86:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** 
  87:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** /*!
  88:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \brief      enable the interrupt request
  89:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[in]  source: interrupt request, detailed in IRQn_Type
  90:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[in]  level: the level needed to set (maximum is 15, refer to the priority group)
  91:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[in]  priority: the priority needed to set (maximum is 15, refer to the priority group)
  92:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[out] none
  93:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \retval     none
  94:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** */
  95:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** void eclic_irq_enable(IRQn_Type source, uint8_t level, uint8_t priority)
  96:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** {
 136              		.loc 1 96 1 is_stmt 1
 137              		.cfi_startproc
 138              	.LVL7:
  97:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     /* level trigger, non-vector mode */
  98:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     ECLIC_SetLevelIRQ(source, level);
 139              		.loc 1 98 5
 140              	.LBB56:
 141              	.LBB57:
 142              	.LBB58:
 143              	.LBB59:
 276:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 144              		.loc 3 276 30 is_stmt 0
 145 0000 370700D2 		li	a4,-771751936
 146 0004 83470700 		lbu	a5,0(a4)
 147 0008 0A05     		slli	a0,a0,2
 148              	.LVL8:
 276:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 149              		.loc 3 276 13
 150 000a 8583     		srli	a5,a5,1
 151 000c BD8B     		andi	a5,a5,15
 152              	.LVL9:
 153              	.LBE59:
 154              	.LBE58:
 339:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 340:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 341:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /**
 342:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \brief  Get Machine Mode Interrupt Level Threshold
 343:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \details
 344:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * This function gets machine mode interrupt level threshold.
 345:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \return       Interrupt Level Threshold.
 346:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \sa
 347:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - \ref ECLIC_SetMth
 348:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
 349:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** __STATIC_FORCEINLINE uint8_t __ECLIC_GetMth(void)
 350:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** {
 351:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     return (ECLIC->MTH);
 352:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 353:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 354:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 355:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /**
 356:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \brief  Enable a specific interrupt
 357:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \details
 358:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * This function enables the specific interrupt \em IRQn.
 359:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \param [in]  IRQn  Interrupt number
 360:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \remarks
 361:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - IRQn must not be negative.
 362:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \sa
 363:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - \ref ECLIC_DisableIRQ
 364:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
 365:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** __STATIC_FORCEINLINE void __ECLIC_EnableIRQ(IRQn_Type IRQn)
 366:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** {
 367:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     ECLIC->CTRL[IRQn].INTIE |= CLIC_INTIE_IE_Msk;
 368:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 369:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 370:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /**
 371:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \brief  Get a specific interrupt enable status
 372:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \details
 373:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * This function returns the interrupt enable status for the specific interrupt \em IRQn.
 374:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \param [in]  IRQn  Interrupt number
 375:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \returns
 376:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - 0  Interrupt is not enabled
 377:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - 1  Interrupt is pending
 378:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \remarks
 379:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - IRQn must not be negative.
 380:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \sa
 381:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - \ref ECLIC_EnableIRQ
 382:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - \ref ECLIC_DisableIRQ
 383:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
 384:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** __STATIC_FORCEINLINE uint32_t __ECLIC_GetEnableIRQ(IRQn_Type IRQn)
 385:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** {
 386:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     return((uint32_t) (ECLIC->CTRL[IRQn].INTIE) & CLIC_INTIE_IE_Msk);
 387:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 388:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 389:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /**
 390:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \brief  Disable a specific interrupt
 391:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \details
 392:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * This function disables the specific interrupt \em IRQn.
 393:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \param [in]  IRQn  Number of the external interrupt to disable
 394:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \remarks
 395:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - IRQn must not be negative.
 396:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \sa
 397:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - \ref ECLIC_EnableIRQ
 398:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
 399:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** __STATIC_FORCEINLINE void __ECLIC_DisableIRQ(IRQn_Type IRQn)
 400:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** {
 401:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     ECLIC->CTRL[IRQn].INTIE &= ~CLIC_INTIE_IE_Msk;
 402:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 403:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 404:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /**
 405:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \brief  Get the pending specific interrupt
 406:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \details
 407:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * This function returns the pending status of the specific interrupt \em IRQn.
 408:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \param [in]      IRQn  Interrupt number
 409:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \returns
 410:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - 0  Interrupt is not pending
 411:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - 1  Interrupt is pending
 412:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \remarks
 413:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - IRQn must not be negative.
 414:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \sa
 415:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - \ref ECLIC_SetPendingIRQ
 416:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - \ref ECLIC_ClearPendingIRQ
 417:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
 418:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** __STATIC_FORCEINLINE int32_t __ECLIC_GetPendingIRQ(IRQn_Type IRQn)
 419:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** {
 420:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     return((uint32_t)(ECLIC->CTRL[IRQn].INTIP) & CLIC_INTIP_IP_Msk);
 421:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 422:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 423:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /**
 424:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \brief  Set a specific interrupt to pending
 425:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \details
 426:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * This function sets the pending bit for the specific interrupt \em IRQn.
 427:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \param [in]      IRQn  Interrupt number
 428:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \remarks
 429:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - IRQn must not be negative.
 430:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \sa
 431:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - \ref ECLIC_GetPendingIRQ
 432:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - \ref ECLIC_ClearPendingIRQ
 433:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
 434:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** __STATIC_FORCEINLINE void __ECLIC_SetPendingIRQ(IRQn_Type IRQn)
 435:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** {
 436:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     ECLIC->CTRL[IRQn].INTIP |= CLIC_INTIP_IP_Msk;
 437:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 438:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 439:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /**
 440:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \brief  Clear a specific interrupt from pending
 441:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \details
 442:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * This function removes the pending state of the specific interrupt \em IRQn.
 443:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \em IRQn cannot be a negative number.
 444:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \param [in]      IRQn  Interrupt number
 445:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \remarks
 446:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - IRQn must not be negative.
 447:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \sa
 448:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - \ref ECLIC_SetPendingIRQ
 449:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - \ref ECLIC_GetPendingIRQ
 450:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
 451:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** __STATIC_FORCEINLINE void __ECLIC_ClearPendingIRQ(IRQn_Type IRQn)
 452:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** {
 453:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     ECLIC->CTRL[IRQn].INTIP &= ~ CLIC_INTIP_IP_Msk;
 454:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 455:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 456:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /**
 457:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \brief  Set trigger mode and polarity for a specific interrupt
 458:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \details
 459:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * This function set trigger mode and polarity of the specific interrupt \em IRQn.
 460:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \param [in]      IRQn  Interrupt number
 461:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \param [in]      trig
 462:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  *                   - 00  level trigger, \ref ECLIC_LEVEL_TRIGGER
 463:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  *                   - 01  positive edge trigger, \ref ECLIC_POSTIVE_EDGE_TRIGGER
 464:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  *                   - 02  level trigger, \ref ECLIC_LEVEL_TRIGGER
 465:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  *                   - 03  negative edge trigger, \ref ECLIC_NEGTIVE_EDGE_TRIGGER
 466:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \remarks
 467:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - IRQn must not be negative.
 468:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  *
 469:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \sa
 470:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - \ref ECLIC_GetTrigIRQ
 471:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
 472:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** __STATIC_FORCEINLINE void __ECLIC_SetTrigIRQ(IRQn_Type IRQn, uint32_t trig)
 473:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** {
 474:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     ECLIC->CTRL[IRQn].INTATTR &= ~CLIC_INTATTR_TRIG_Msk;
 475:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     ECLIC->CTRL[IRQn].INTATTR |= (uint8_t)(trig<<CLIC_INTATTR_TRIG_Pos);
 476:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 477:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 478:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /**
 479:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \brief  Get trigger mode and polarity for a specific interrupt
 480:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \details
 481:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * This function get trigger mode and polarity of the specific interrupt \em IRQn.
 482:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \param [in]      IRQn  Interrupt number
 483:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \return
 484:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  *                 - 00  level trigger, \ref ECLIC_LEVEL_TRIGGER
 485:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  *                 - 01  positive edge trigger, \ref ECLIC_POSTIVE_EDGE_TRIGGER
 486:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  *                 - 02  level trigger, \ref ECLIC_LEVEL_TRIGGER
 487:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  *                 - 03  negative edge trigger, \ref ECLIC_NEGTIVE_EDGE_TRIGGER
 488:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \remarks
 489:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  *     - IRQn must not be negative.
 490:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \sa
 491:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  *     - \ref ECLIC_SetTrigIRQ
 492:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
 493:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** __STATIC_FORCEINLINE uint32_t __ECLIC_GetTrigIRQ(IRQn_Type IRQn)
 494:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** {
 495:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     return ((int32_t)(((ECLIC->CTRL[IRQn].INTATTR) & CLIC_INTATTR_TRIG_Msk)>>CLIC_INTATTR_TRIG_Pos)
 496:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 497:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 498:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /**
 499:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \brief  Set interrupt working mode for a specific interrupt
 500:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \details
 501:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * This function set selective hardware vector or non-vector working mode of the specific interrupt
 502:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \param [in]      IRQn  Interrupt number
 503:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \param [in]      shv
 504:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  *                        - 0  non-vector mode, \ref ECLIC_NON_VECTOR_INTERRUPT
 505:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  *                        - 1  vector mode, \ref ECLIC_VECTOR_INTERRUPT
 506:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \remarks
 507:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - IRQn must not be negative.
 508:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \sa
 509:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - \ref ECLIC_GetShvIRQ
 510:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
 511:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** __STATIC_FORCEINLINE void __ECLIC_SetShvIRQ(IRQn_Type IRQn, uint32_t shv)
 512:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** {
 513:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     ECLIC->CTRL[IRQn].INTATTR &= ~CLIC_INTATTR_SHV_Msk;
 514:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     ECLIC->CTRL[IRQn].INTATTR |= (uint8_t)(shv<<CLIC_INTATTR_SHV_Pos);
 515:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 516:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 517:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /**
 518:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \brief  Get interrupt working mode for a specific interrupt
 519:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \details
 520:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * This function get selective hardware vector or non-vector working mode of the specific interrupt
 521:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \param [in]      IRQn  Interrupt number
 522:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \return       shv
 523:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  *                        - 0  non-vector mode, \ref ECLIC_NON_VECTOR_INTERRUPT
 524:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  *                        - 1  vector mode, \ref ECLIC_VECTOR_INTERRUPT
 525:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \remarks
 526:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - IRQn must not be negative.
 527:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \sa
 528:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - \ref ECLIC_SetShvIRQ
 529:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
 530:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** __STATIC_FORCEINLINE uint32_t __ECLIC_GetShvIRQ(IRQn_Type IRQn)
 531:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** {
 532:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     return ((int32_t)(((ECLIC->CTRL[IRQn].INTATTR) & CLIC_INTATTR_SHV_Msk)>>CLIC_INTATTR_SHV_Pos));
 533:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 534:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 535:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /**
 536:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \brief  Modify ECLIC Interrupt Input Control Register for a specific interrupt
 537:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \details
 538:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * This function modify ECLIC Interrupt Input Control(CLICINTCTL[i]) register of the specific inter
 539:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \param [in]      IRQn  Interrupt number
 540:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \param [in]      intctrl  Set value for CLICINTCTL[i] register
 541:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \remarks
 542:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - IRQn must not be negative.
 543:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \sa
 544:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - \ref ECLIC_GetCtrlIRQ
 545:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
 546:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** __STATIC_FORCEINLINE void __ECLIC_SetCtrlIRQ(IRQn_Type IRQn, uint8_t intctrl)
 547:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** {
 548:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     ECLIC->CTRL[IRQn].INTCTRL = intctrl;
 549:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 550:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 551:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /**
 552:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \brief  Get ECLIC Interrupt Input Control Register value for a specific interrupt
 553:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \details
 554:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * This function modify ECLIC Interrupt Input Control register of the specific interrupt \em IRQn.
 555:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \param [in]      IRQn  Interrupt number
 556:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \return       value of ECLIC Interrupt Input Control register
 557:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \remarks
 558:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - IRQn must not be negative.
 559:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \sa
 560:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - \ref ECLIC_SetCtrlIRQ
 561:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
 562:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** __STATIC_FORCEINLINE uint8_t __ECLIC_GetCtrlIRQ(IRQn_Type IRQn)
 563:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** {
 564:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     return (ECLIC->CTRL[IRQn].INTCTRL);
 565:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 566:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 567:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /**
 568:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \brief  Set ECLIC Interrupt level of a specific interrupt
 569:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \details
 570:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * This function set interrupt level of the specific interrupt \em IRQn.
 571:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \param [in]      IRQn  Interrupt number
 572:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \param [in]      lvl_abs   Interrupt level
 573:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \remarks
 574:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - IRQn must not be negative.
 575:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - If lvl_abs to be set is larger than the max level allowed, it will be force to be max level.
 576:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - When you set level value you need use clciinfo.nlbits to get the width of level.
 577:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  *   Then we could know the maximum of level. CLICINTCTLBITS is how many total bits are
 578:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  *   present in the CLICINTCTL register.
 579:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \sa
 580:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - \ref ECLIC_GetLevelIRQ
 581:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
 582:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** __STATIC_FORCEINLINE void __ECLIC_SetLevelIRQ(IRQn_Type IRQn, uint8_t lvl_abs)
 583:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** {
 584:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     uint8_t nlbits = __ECLIC_GetCfgNlbits();
 155              		.loc 3 584 5 is_stmt 1
 156              	.LBB61:
 157              	.LBB60:
 276:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 158              		.loc 3 276 5
 159              	.LBE60:
 160              	.LBE61:
 585:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     uint8_t intctlbits = (uint8_t)__ECLIC_INTCTLBITS;
 161              		.loc 3 585 5
 586:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 587:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     if (nlbits == 0) {
 162              		.loc 3 587 5
 163              		.loc 3 587 8 is_stmt 0
 164 000e A9C3     		beq	a5,zero,.L7
 588:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         return;
 589:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     }
 590:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 591:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     if (nlbits > intctlbits) {
 165              		.loc 3 591 5 is_stmt 1
 166 0010 2A97     		add	a4,a4,a0
 167              	.LBB62:
 168              	.LBB63:
 564:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 169              		.loc 3 564 30 is_stmt 0
 170 0012 8566     		li	a3,4096
 171 0014 BA96     		add	a3,a4,a3
 172 0016 03C83600 		lbu	a6,3(a3)
 173 001a 1147     		li	a4,4
 174 001c B3D7E70A 		minu	a5,a5,a4
 175              	.LVL10:
 176              	.LBE63:
 177              	.LBE62:
 592:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         nlbits = intctlbits;
 593:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     }
 594:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     uint8_t maxlvl = ((1 << nlbits) - 1);
 178              		.loc 3 594 5 is_stmt 1
 595:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     if (lvl_abs > maxlvl) {
 179              		.loc 3 595 5
 596:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         lvl_abs = maxlvl;
 597:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     }
 598:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     uint8_t lvl = lvl_abs << (ECLIC_MAX_NLBITS - nlbits);
 180              		.loc 3 598 5
 599:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     uint8_t cur_ctrl = __ECLIC_GetCtrlIRQ(IRQn);
 181              		.loc 3 599 5
 182              	.LBB65:
 183              	.LBB64:
 564:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 184              		.loc 3 564 5
 185              	.LBE64:
 186              	.LBE65:
 600:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     cur_ctrl = cur_ctrl << nlbits;
 187              		.loc 3 600 5
 601:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     cur_ctrl = cur_ctrl >> nlbits;
 188              		.loc 3 601 5
 602:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     __ECLIC_SetCtrlIRQ(IRQn, (cur_ctrl | lvl));
 189              		.loc 3 602 5
 598:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     uint8_t cur_ctrl = __ECLIC_GetCtrlIRQ(IRQn);
 190              		.loc 3 598 48 is_stmt 0
 191 0020 A148     		li	a7,8
 600:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     cur_ctrl = cur_ctrl >> nlbits;
 192              		.loc 3 600 25
 193 0022 3318F800 		sll	a6,a6,a5
 194              	.LVL11:
 594:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     if (lvl_abs > maxlvl) {
 195              		.loc 3 594 26
 196 0026 3317F028 		bset	a4,x0,a5
 594:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     if (lvl_abs > maxlvl) {
 197              		.loc 3 594 13
 198 002a 7D17     		addi	a4,a4,-1
 598:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     uint8_t cur_ctrl = __ECLIC_GetCtrlIRQ(IRQn);
 199              		.loc 3 598 48
 200 002c B388F840 		sub	a7,a7,a5
 598:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     uint8_t cur_ctrl = __ECLIC_GetCtrlIRQ(IRQn);
 201              		.loc 3 598 27
 202 0030 1377F70F 		andi	a4,a4,0xff
 601:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     __ECLIC_SetCtrlIRQ(IRQn, (cur_ctrl | lvl));
 203              		.loc 3 601 25
 204 0034 1378F80F 		andi	a6,a6,0xff
 205 0038 3358F840 		sra	a6,a6,a5
 598:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     uint8_t cur_ctrl = __ECLIC_GetCtrlIRQ(IRQn);
 206              		.loc 3 598 27
 207 003c B357B70A 		minu	a5,a4,a1
 208              	.LVL12:
 209 0040 B3971701 		sll	a5,a5,a7
 210              		.loc 3 602 5
 211 0044 B3E70701 		or	a5,a5,a6
 212 0048 93F7F70F 		andi	a5,a5,0xff
 213              	.LVL13:
 214              	.LBB66:
 215              	.LBB67:
 548:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 216              		.loc 3 548 5 is_stmt 1
 548:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 217              		.loc 3 548 31 is_stmt 0
 218 004c A381F600 		sb	a5,3(a3)
 219              	.LVL14:
 220              	.L7:
 221              	.LBE67:
 222              	.LBE66:
 223              	.LBE57:
 224              	.LBE56:
  99:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     ECLIC_SetPriorityIRQ(source, priority);
 225              		.loc 1 99 5 is_stmt 1
 226              	.LBB68:
 227              	.LBB69:
 603:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 604:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 605:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /**
 606:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \brief  Get ECLIC Interrupt level of a specific interrupt
 607:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \details
 608:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * This function get interrupt level of the specific interrupt \em IRQn.
 609:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \param [in]      IRQn  Interrupt number
 610:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \return         Interrupt level
 611:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \remarks
 612:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - IRQn must not be negative.
 613:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \sa
 614:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - \ref ECLIC_SetLevelIRQ
 615:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
 616:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** __STATIC_FORCEINLINE uint8_t __ECLIC_GetLevelIRQ(IRQn_Type IRQn)
 617:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** {
 618:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     uint8_t nlbits = __ECLIC_GetCfgNlbits();
 619:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     uint8_t intctlbits = (uint8_t)__ECLIC_INTCTLBITS;
 620:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 621:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     if (nlbits == 0) {
 622:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         return 0;
 623:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     }
 624:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 625:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     if (nlbits > intctlbits) {
 626:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         nlbits = intctlbits;
 627:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     }
 628:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     uint8_t intctrl = __ECLIC_GetCtrlIRQ(IRQn);
 629:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     uint8_t lvl_abs = intctrl >> (ECLIC_MAX_NLBITS - nlbits);
 630:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     return lvl_abs;
 631:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 632:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** 
 633:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** /**
 634:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \brief  Get ECLIC Interrupt priority of a specific interrupt
 635:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \details
 636:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * This function get interrupt priority of the specific interrupt \em IRQn.
 637:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \param [in]      IRQn  Interrupt number
 638:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \param [in]      pri   Interrupt priority
 639:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \remarks
 640:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - IRQn must not be negative.
 641:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - If pri to be set is larger than the max priority allowed, it will be force to be max priority.
 642:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - Priority width is CLICINTCTLBITS minus clciinfo.nlbits if clciinfo.nlbits
 643:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  *   is less than CLICINTCTLBITS. Otherwise priority width is 0.
 644:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * \sa
 645:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  * - \ref ECLIC_GetPriorityIRQ
 646:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****  */
 647:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** __STATIC_FORCEINLINE void __ECLIC_SetPriorityIRQ(IRQn_Type IRQn, uint8_t pri)
 648:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** {
 649:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     uint8_t nlbits = __ECLIC_GetCfgNlbits();
 228              		.loc 3 649 5
 229              	.LBB70:
 230              	.LBB71:
 276:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 231              		.loc 3 276 5
 276:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 232              		.loc 3 276 30 is_stmt 0
 233 0050 370700D2 		li	a4,-771751936
 234 0054 83470700 		lbu	a5,0(a4)
 235 0058 93F7F70F 		andi	a5,a5,0xff
 276:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 236              		.loc 3 276 13
 237 005c 8583     		srli	a5,a5,1
 238              	.LVL15:
 239              	.LBE71:
 240              	.LBE70:
 650:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     uint8_t intctlbits = (uint8_t)__ECLIC_INTCTLBITS;
 241              		.loc 3 650 5 is_stmt 1
 651:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****     if (nlbits < intctlbits) {
 242              		.loc 3 651 5
 243              		.loc 3 651 8 is_stmt 0
 244 005e 93F6C700 		andi	a3,a5,12
 245 0062 A9E2     		bne	a3,zero,.L8
 246 0064 2A97     		add	a4,a4,a0
 247              	.LBB73:
 248              	.LBB74:
 249              	.LBB75:
 564:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 250              		.loc 3 564 30
 251 0066 8565     		li	a1,4096
 252              	.LVL16:
 253 0068 BA95     		add	a1,a4,a1
 254 006a 03C73500 		lbu	a4,3(a1)
 255              	.LBE75:
 256              	.LBE74:
 257              	.LBE73:
 258              	.LBB82:
 259              	.LBB72:
 276:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 260              		.loc 3 276 13
 261 006e BD8B     		andi	a5,a5,15
 262              	.LVL17:
 263              	.LBE72:
 264              	.LBE82:
 265              	.LBB83:
 652:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         uint8_t maxpri = ((1 << (intctlbits - nlbits)) - 1);
 266              		.loc 3 652 9 is_stmt 1
 653:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         if (pri > maxpri) {
 267              		.loc 3 653 9
 654:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****             pri = maxpri;
 655:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         }
 656:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         pri = pri << (ECLIC_MAX_NLBITS - intctlbits);
 268              		.loc 3 656 9
 652:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         if (pri > maxpri) {
 269              		.loc 3 652 45 is_stmt 0
 270 0070 9146     		li	a3,4
 271 0072 9D8E     		sub	a3,a3,a5
 272              	.LVL18:
 657:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         uint8_t mask = ((uint8_t)(-1)) >> intctlbits;
 658:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         pri = pri | mask;
 659:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         uint8_t cur_ctrl = __ECLIC_GetCtrlIRQ(IRQn);
 660:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         cur_ctrl = cur_ctrl >> (ECLIC_MAX_NLBITS - nlbits);
 273              		.loc 3 660 50
 274 0074 2148     		li	a6,8
 275 0076 3308F840 		sub	a6,a6,a5
 276              	.LBB78:
 277              	.LBB76:
 564:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 278              		.loc 3 564 30
 279 007a 9377F70F 		andi	a5,a4,0xff
 280              	.LVL19:
 281              	.LBE76:
 282              	.LBE78:
 652:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         if (pri > maxpri) {
 283              		.loc 3 652 30
 284 007e 3317D028 		bset	a4,x0,a3
 652:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         if (pri > maxpri) {
 285              		.loc 3 652 17
 286 0082 7D17     		addi	a4,a4,-1
 656:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         uint8_t mask = ((uint8_t)(-1)) >> intctlbits;
 287              		.loc 3 656 19
 288 0084 1377F70F 		andi	a4,a4,0xff
 289              		.loc 3 660 29
 290 0088 B3D70741 		sra	a5,a5,a6
 661:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         cur_ctrl = cur_ctrl << (ECLIC_MAX_NLBITS - nlbits);
 291              		.loc 3 661 29
 292 008c B3970701 		sll	a5,a5,a6
 656:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         uint8_t mask = ((uint8_t)(-1)) >> intctlbits;
 293              		.loc 3 656 19
 294 0090 3356C70A 		minu	a2,a4,a2
 295              	.LVL20:
 296 0094 1206     		slli	a2,a2,4
 297              	.LVL21:
 657:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         pri = pri | mask;
 298              		.loc 3 657 9 is_stmt 1
 658:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         uint8_t cur_ctrl = __ECLIC_GetCtrlIRQ(IRQn);
 299              		.loc 3 658 9
 659:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         cur_ctrl = cur_ctrl >> (ECLIC_MAX_NLBITS - nlbits);
 300              		.loc 3 659 9
 301              	.LBB79:
 302              	.LBB77:
 564:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 303              		.loc 3 564 5
 304              	.LBE77:
 305              	.LBE79:
 660:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         cur_ctrl = cur_ctrl << (ECLIC_MAX_NLBITS - nlbits);
 306              		.loc 3 660 9
 307              		.loc 3 661 9
 662:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h ****         __ECLIC_SetCtrlIRQ(IRQn, (cur_ctrl | pri));
 308              		.loc 3 662 9
 309 0096 D18F     		or	a5,a5,a2
 310 0098 93E7F700 		ori	a5,a5,15
 311 009c 93F7F70F 		andi	a5,a5,0xff
 312              	.LVL22:
 313              	.LBB80:
 314              	.LBB81:
 548:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 315              		.loc 3 548 5
 548:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 316              		.loc 3 548 31 is_stmt 0
 317 00a0 A381F500 		sb	a5,3(a1)
 318              	.LVL23:
 319              	.L8:
 320              	.LBE81:
 321              	.LBE80:
 322              	.LBE83:
 323              	.LBE69:
 324              	.LBE68:
 100:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     ECLIC_EnableIRQ(source);
 325              		.loc 1 100 5 is_stmt 1
 326              	.LBB84:
 327              	.LBB85:
 367:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 328              		.loc 3 367 5
 367:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 329              		.loc 3 367 29 is_stmt 0
 330 00a4 B71700D2 		li	a5,-771747840
 331 00a8 3E95     		add	a0,a0,a5
 332 00aa 83471500 		lbu	a5,1(a0)
 333 00ae 93F7F70F 		andi	a5,a5,0xff
 334 00b2 93E71700 		ori	a5,a5,1
 335 00b6 A300F500 		sb	a5,1(a0)
 336              	.LVL24:
 337              	.LBE85:
 338              	.LBE84:
 101:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** }
 339              		.loc 1 101 1
 340 00ba 8280     		ret
 341              		.cfi_endproc
 342              	.LFE369:
 344              		.section	.text.eclic_irq_disable,"ax",@progbits
 345              		.align	1
 346              		.globl	eclic_irq_disable
 348              	eclic_irq_disable:
 349              	.LFB370:
 102:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** 
 103:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** /*!
 104:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \brief      disable the interrupt request
 105:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[in]  source: interrupt request, detailed in IRQn_Type
 106:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[out] none
 107:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \retval     none
 108:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** */
 109:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** void eclic_irq_disable(IRQn_Type source)
 110:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** {
 350              		.loc 1 110 1 is_stmt 1
 351              		.cfi_startproc
 352              	.LVL25:
 111:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     ECLIC_DisableIRQ(source);
 353              		.loc 1 111 5
 354              	.LBB86:
 355              	.LBB87:
 401:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 356              		.loc 3 401 5
 357 0000 B70700D2 		li	a5,-771751936
 358 0004 3345F520 		sh2add	a0,a0,a5
 359              	.LVL26:
 401:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_eclic.h **** }
 360              		.loc 3 401 29 is_stmt 0
 361 0008 8567     		li	a5,4096
 362 000a 3E95     		add	a0,a0,a5
 363 000c 83471500 		lbu	a5,1(a0)
 364 0010 93F7E70F 		andi	a5,a5,254
 365 0014 A300F500 		sb	a5,1(a0)
 366              	.LVL27:
 367              	.LBE87:
 368              	.LBE86:
 112:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** }
 369              		.loc 1 112 1
 370 0018 8280     		ret
 371              		.cfi_endproc
 372              	.LFE370:
 374              		.section	.text.eclic_system_reset,"ax",@progbits
 375              		.align	1
 376              		.globl	eclic_system_reset
 378              	eclic_system_reset:
 379              	.LFB371:
 113:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** 
 114:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** /*!
 115:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \brief      reset system
 116:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[in]  none
 117:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[out] none
 118:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \retval     none
 119:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** */
 120:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** void eclic_system_reset(void)
 121:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** {
 380              		.loc 1 121 1 is_stmt 1
 381              		.cfi_startproc
 122:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     SysTimer_SoftwareReset();
 382              		.loc 1 122 5
 383              	.LBB88:
 384              	.LBB89:
 385              		.file 4 "../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h"
   1:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** /*
   2:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * Copyright (c) 2019 Nuclei Limited. All rights reserved.
   3:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  *
   4:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * SPDX-License-Identifier: Apache-2.0
   5:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  *
   6:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * not use this file except in compliance with the License.
   8:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * You may obtain a copy of the License at
   9:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  *
  10:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * www.apache.org/licenses/LICENSE-2.0
  11:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  *
  12:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * Unless required by applicable law or agreed to in writing, software
  13:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * See the License for the specific language governing permissions and
  16:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * limitations under the License.
  17:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  */
  18:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** #ifndef __CORE_FEATURE_TIMER_H__
  19:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** #define __CORE_FEATURE_TIMER_H__
  20:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** /*!
  21:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * @file     core_feature_timer.h
  22:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * @brief    System Timer feature API header file for Nuclei N/NX Core
  23:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  */
  24:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** /*
  25:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * System Timer Feature Configuration Macro:
  26:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * 1. __SYSTIMER_PRESENT:  Define whether Private System Timer is present or not.
  27:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  *   * 0: Not present
  28:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  *   * 1: Present
  29:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * 2. __SYSTIMER_BASEADDR:  Define the base address of the System Timer.
  30:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  */
  31:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** #ifdef __cplusplus
  32:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  extern "C" {
  33:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** #endif
  34:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** 
  35:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** #include "core_feature_base.h"
  36:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** 
  37:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** #if defined(__SYSTIMER_PRESENT) && (__SYSTIMER_PRESENT == 1)
  38:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** /**
  39:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \defgroup NMSIS_Core_SysTimer_Registers     Register Define and Type Definitions Of System Timer
  40:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \ingroup NMSIS_Core_Registers
  41:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \brief   Type definitions and defines for system timer registers.
  42:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  *
  43:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * @{
  44:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  */
  45:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** /**
  46:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \brief  Structure type to access the System Timer (SysTimer).
  47:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \details
  48:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * Structure definition to access the system timer(SysTimer).
  49:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \remarks
  50:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - MSFTRST register is introduced in Nuclei N Core version 1.3(\ref __NUCLEI_N_REV >= 0x0103)
  51:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - MSTOP register is renamed to MTIMECTL register in Nuclei N Core version 1.4(\ref __NUCLEI_N_RE
  52:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - CMPCLREN and CLKSRC bit in MTIMECTL register is introduced in Nuclei N Core version 1.4(\ref _
  53:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  */
  54:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** typedef struct {
  55:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****     __IOM uint64_t MTIMER;                  /*!< Offset: 0x000 (R/W)  System Timer current value 64
  56:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****     union {
  57:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****         __IOM uint64_t MTIMERCMP_64;        /*!< Offset: 0x008 (R/W)  System Timer compare Value 64
  58:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****         struct {
  59:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****             __IOM uint32_t MTIMERCMP_lo;    /*!< Offset: 0x008 (R/W)  System Timer compare Value lo
  60:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****             __IOM uint32_t MTIMERCMP_hi;    /*!< Offset: 0x00C (R/W)  System Timer compare Value hi
  61:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****         } MTIMERCMP_32;
  62:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****     } MTIMERCMP;
  63:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****     __IOM uint32_t RESERVED0[0x3F8];        /*!< Offset: 0x010 - 0xFEC Reserved */
  64:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****     __IOM uint32_t MSFTRST;                 /*!< Offset: 0xFF0 (R/W)  System Timer Software Core Re
  65:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****     __IOM uint32_t RESERVED1;               /*!< Offset: 0xFF4 Reserved */
  66:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****     __IOM uint32_t MTIMECTL;                /*!< Offset: 0xFF8 (R/W)  System Timer Control Register
  67:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****     __IOM uint32_t MSIP;                    /*!< Offset: 0xFFC (R/W)  System Timer SW interrupt Reg
  68:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** } SysTimer_Type;
  69:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** 
  70:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** /* Timer Control / Status Register Definitions */
  71:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** #define SysTimer_MTIMECTL_TIMESTOP_Pos      0U                                          /*!< SysTic
  72:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** #define SysTimer_MTIMECTL_TIMESTOP_Msk      (1UL << SysTimer_MTIMECTL_TIMESTOP_Pos)     /*!< SysTic
  73:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** #define SysTimer_MTIMECTL_CMPCLREN_Pos      1U                                          /*!< SysTic
  74:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** #define SysTimer_MTIMECTL_CMPCLREN_Msk      (1UL << SysTimer_MTIMECTL_CMPCLREN_Pos)     /*!< SysTic
  75:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** #define SysTimer_MTIMECTL_CLKSRC_Pos        2U                                          /*!< SysTic
  76:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** #define SysTimer_MTIMECTL_CLKSRC_Msk        (1UL << SysTimer_MTIMECTL_CLKSRC_Pos)       /*!< SysTic
  77:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** 
  78:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** #define SysTimer_MSIP_MSIP_Pos              0U                                          /*!< SysTic
  79:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** #define SysTimer_MSIP_MSIP_Msk              (1UL << SysTimer_MSIP_MSIP_Pos)             /*!< SysTic
  80:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** 
  81:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** #define SysTimer_MTIMER_Msk                 (0xFFFFFFFFFFFFFFFFULL)                     /*!< SysTic
  82:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** #define SysTimer_MTIMERCMP_Msk              (0xFFFFFFFFFFFFFFFFULL)                     /*!< SysTic
  83:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** #define SysTimer_MTIMECTL_Msk               (0xFFFFFFFFUL)                              /*!< SysTic
  84:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** #define SysTimer_MSIP_Msk                   (0xFFFFFFFFUL)                              /*!< SysTic
  85:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** #define SysTimer_MSFTRST_Msk                (0xFFFFFFFFUL)                              /*!< SysTic
  86:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** 
  87:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** #define SysTimer_MSFRST_KEY                 (0x80000A5FUL)                              /*!< SysTic
  88:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** 
  89:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** #ifndef __SYSTIMER_BASEADDR
  90:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** /* Base address of SYSTIMER(__SYSTIMER_BASEADDR) should be defined in <Device.h> */
  91:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** #error "__SYSTIMER_BASEADDR is not defined, please check!"
  92:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** #endif
  93:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** /* System Timer Memory mapping of Device  */
  94:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** #define SysTimer_BASE                       __SYSTIMER_BASEADDR                         /*!< SysTic
  95:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** #define SysTimer                            ((SysTimer_Type *) SysTimer_BASE)           /*!< SysTic
  96:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** /** @} */ /* end of group NMSIS_Core_SysTimer_Registers */
  97:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** 
  98:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** /* ##################################    SysTimer function  #######################################
  99:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** /**
 100:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \defgroup NMSIS_Core_SysTimer SysTimer Functions
 101:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \brief    Functions that configure the Core System Timer.
 102:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * @{
 103:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  */
 104:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** /**
 105:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \brief  Set system timer load value
 106:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \details
 107:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * This function set the system timer load value in MTIMER register.
 108:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \param [in]  value   value to set system timer MTIMER register.
 109:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \remarks
 110:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - Load value is 64bits wide.
 111:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - \ref SysTimer_GetLoadValue
 112:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  */
 113:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** __STATIC_FORCEINLINE void SysTimer_SetLoadValue(uint64_t value)
 114:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** {
 115:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****     SysTimer->MTIMER = value;
 116:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** }
 117:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** 
 118:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** /**
 119:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \brief  Get system timer load value
 120:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \details
 121:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * This function get the system timer current value in MTIMER register.
 122:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \return  current value(64bit) of system timer MTIMER register.
 123:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \remarks
 124:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - Load value is 64bits wide.
 125:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - \ref SysTimer_SetLoadValue
 126:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  */
 127:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** __STATIC_FORCEINLINE uint64_t SysTimer_GetLoadValue(void)
 128:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** {
 129:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****     return SysTimer->MTIMER;
 130:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** }
 131:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** 
 132:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** /**
 133:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \brief  Set system timer compare value
 134:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \details
 135:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * This function set the system Timer compare value in MTIMERCMP register.
 136:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \param [in]  value   compare value to set system timer MTIMERCMP register.
 137:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \remarks
 138:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - Compare value is 64bits wide.
 139:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - If compare value is larger than current value timer interrupt generate.
 140:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - Modify the load value or compare value less to clear the interrupt.
 141:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - \ref SysTimer_GetCompareValue
 142:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  */
 143:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** __STATIC_FORCEINLINE void SysTimer_SetCompareValue(uint64_t value)
 144:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** {
 145:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****     uint64_t cur_ticks = SysTimer->MTIMER;
 146:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** 
 147:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****     /* If the low 32bits of reload_ticks are smaller than cur_ticks, the high 32bits are written fi
 148:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****      * otherwise the low 32bits are written first to avoid unexpected interrupt. */
 149:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****     if (__USUALLY((uint32_t)value > (uint32_t)cur_ticks)) {
 150:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****         SysTimer->MTIMERCMP.MTIMERCMP_64 = value;
 151:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****     } else {
 152:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****         SysTimer->MTIMERCMP.MTIMERCMP_32.MTIMERCMP_hi = (uint32_t)(value >> 32);
 153:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****         SysTimer->MTIMERCMP.MTIMERCMP_32.MTIMERCMP_lo = (uint32_t)(value & 0xFFFFFFFF);
 154:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****     }
 155:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** }
 156:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** 
 157:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** /**
 158:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \brief  Get system timer compare value
 159:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \details
 160:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * This function get the system timer compare value in MTIMERCMP register.
 161:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \return  compare value of system timer MTIMERCMP register.
 162:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \remarks
 163:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - Compare value is 64bits wide.
 164:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - \ref SysTimer_SetCompareValue
 165:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  */
 166:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** __STATIC_FORCEINLINE uint64_t SysTimer_GetCompareValue(void)
 167:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** {
 168:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****     return SysTimer->MTIMERCMP.MTIMERCMP_64;
 169:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** }
 170:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** 
 171:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** /**
 172:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \brief  Enable system timer counter running
 173:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \details
 174:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * Enable system timer counter running by clear
 175:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * TIMESTOP bit in MTIMECTL register.
 176:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  */
 177:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** __STATIC_FORCEINLINE void SysTimer_Start(void)
 178:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** {
 179:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****     SysTimer->MTIMECTL &= ~(SysTimer_MTIMECTL_TIMESTOP_Msk);
 180:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** }
 181:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** 
 182:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** /**
 183:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \brief  Stop system timer counter running
 184:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \details
 185:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * Stop system timer counter running by set
 186:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * TIMESTOP bit in MTIMECTL register.
 187:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  */
 188:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** __STATIC_FORCEINLINE void SysTimer_Stop(void)
 189:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** {
 190:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****     SysTimer->MTIMECTL |= SysTimer_MTIMECTL_TIMESTOP_Msk;
 191:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** }
 192:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** 
 193:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** /**
 194:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \brief  Set system timer control value
 195:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \details
 196:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * This function set the system timer MTIMECTL register value.
 197:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \param [in]  mctl    value to set MTIMECTL register
 198:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \remarks
 199:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - Bit TIMESTOP is used to start and stop timer.
 200:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  *   Clear TIMESTOP bit to 0 to start timer, otherwise to stop timer.
 201:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - Bit CMPCLREN is used to enable auto MTIMER clear to zero when MTIMER >= MTIMERCMP.
 202:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  *   Clear CMPCLREN bit to 0 to stop auto clear MTIMER feature, otherwise to enable it.
 203:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - Bit CLKSRC is used to select timer clock source.
 204:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  *   Clear CLKSRC bit to 0 to use *mtime_toggle_a*, otherwise use *core_clk_aon*
 205:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - \ref SysTimer_GetControlValue
 206:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  */
 207:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** __STATIC_FORCEINLINE void SysTimer_SetControlValue(uint32_t mctl)
 208:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** {
 209:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****     SysTimer->MTIMECTL = (mctl & SysTimer_MTIMECTL_Msk);
 210:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** }
 211:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** 
 212:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** /**
 213:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \brief  Get system timer control value
 214:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \details
 215:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * This function get the system timer MTIMECTL register value.
 216:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \return  MTIMECTL register value
 217:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \remarks
 218:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - \ref SysTimer_SetControlValue
 219:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  */
 220:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** __STATIC_FORCEINLINE uint32_t SysTimer_GetControlValue(void)
 221:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** {
 222:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****     return (SysTimer->MTIMECTL & SysTimer_MTIMECTL_Msk);
 223:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** }
 224:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** 
 225:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** /**
 226:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \brief  Trigger or set software interrupt via system timer
 227:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \details
 228:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * This function set the system timer MSIP bit in MSIP register.
 229:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \remarks
 230:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - Set system timer MSIP bit and generate a SW interrupt.
 231:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - \ref SysTimer_ClearSWIRQ
 232:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - \ref SysTimer_GetMsipValue
 233:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  */
 234:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** __STATIC_FORCEINLINE void SysTimer_SetSWIRQ(void)
 235:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** {
 236:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****     SysTimer->MSIP |= SysTimer_MSIP_MSIP_Msk;
 237:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** }
 238:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** 
 239:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** /**
 240:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \brief  Clear system timer software interrupt pending request
 241:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \details
 242:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * This function clear the system timer MSIP bit in MSIP register.
 243:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \remarks
 244:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - Clear system timer MSIP bit in MSIP register to clear the software interrupt pending.
 245:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - \ref SysTimer_SetSWIRQ
 246:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - \ref SysTimer_GetMsipValue
 247:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  */
 248:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** __STATIC_FORCEINLINE void SysTimer_ClearSWIRQ(void)
 249:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** {
 250:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****     SysTimer->MSIP &= ~SysTimer_MSIP_MSIP_Msk;
 251:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** }
 252:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** 
 253:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** /**
 254:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \brief  Get system timer MSIP register value
 255:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \details
 256:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * This function get the system timer MSIP register value.
 257:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \return    Value of Timer MSIP register.
 258:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \remarks
 259:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - Bit0 is SW interrupt flag.
 260:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  *   Bit0 is 1 then SW interrupt set. Bit0 is 0 then SW interrupt clear.
 261:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - \ref SysTimer_SetSWIRQ
 262:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - \ref SysTimer_ClearSWIRQ
 263:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  */
 264:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** __STATIC_FORCEINLINE uint32_t SysTimer_GetMsipValue(void)
 265:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** {
 266:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****     return (uint32_t)(SysTimer->MSIP & SysTimer_MSIP_Msk);
 267:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** }
 268:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** 
 269:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** /**
 270:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \brief  Set system timer MSIP register value
 271:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \details
 272:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * This function set the system timer MSIP register value.
 273:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \param [in]  msip   value to set MSIP register
 274:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  */
 275:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** __STATIC_FORCEINLINE void SysTimer_SetMsipValue(uint32_t msip)
 276:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** {
 277:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****     SysTimer->MSIP = (msip & SysTimer_MSIP_Msk);
 278:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** }
 279:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** 
 280:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** /**
 281:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \brief  Do software reset request
 282:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \details
 283:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * This function will do software reset request through MTIMER
 284:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - Software need to write \ref SysTimer_MSFRST_KEY to generate software reset request
 285:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - The software request flag can be cleared by reset operation to clear
 286:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * \remarks
 287:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - The software reset is sent to SoC, SoC need to generate reset signal and send back to Core
 288:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  * - This function will not return, it will do while(1) to wait the Core reset happened
 289:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****  */
 290:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** __STATIC_FORCEINLINE void SysTimer_SoftwareReset(void)
 291:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h **** {
 292:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****     SysTimer->MSFTRST = SysTimer_MSFRST_KEY;
 386              		.loc 4 292 5
 387              		.loc 4 292 23 is_stmt 0
 388 0000 B7170080 		li	a5,-2147479552
 389 0004 371700D1 		li	a4,-788525056
 390 0008 9387F7A5 		addi	a5,a5,-1441
 391 000c 2328F7FE 		sw	a5,-16(a4)
 392              	.L14:
 293:../../../../MSDK/plf/riscv/NMSIS/Core/Include/core_feature_timer.h ****     while(1);
 393              		.loc 4 293 5 is_stmt 1
 394              		.loc 4 293 13
 395              		.loc 4 293 10
 396              		.loc 4 293 5
 397              		.loc 4 293 13
 398              		.loc 4 293 10
 399 0010 01A0     		j	.L14
 400              	.LBE89:
 401              	.LBE88:
 402              		.cfi_endproc
 403              	.LFE371:
 405              		.text
 406              	.Letext0:
 407              		.file 5 "c:\\users\\stapi\\onedrive\\desktop\\gd32vw553\\embeddedbuilder_v1.4.7.26843\\tools\\nucl
 408              		.file 6 "c:\\users\\stapi\\onedrive\\desktop\\gd32vw553\\embeddedbuilder_v1.4.7.26843\\tools\\nucl
 409              		.file 7 "../../../../MSDK/plf/riscv/gd32vw55x/gd32vw55x.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 gd32vw55x_eclic.c
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:13     .text.eclic_global_interrupt_enable:0000000000000000 eclic_global_interrupt_enable
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:17     .text.eclic_global_interrupt_enable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:18     .text.eclic_global_interrupt_enable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:20     .text.eclic_global_interrupt_enable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:23     .text.eclic_global_interrupt_enable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:25     .text.eclic_global_interrupt_enable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:26     .text.eclic_global_interrupt_enable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:35     .text.eclic_global_interrupt_enable:0000000000000006 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:36     .text.eclic_global_interrupt_enable:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:43     .text.eclic_global_interrupt_disable:0000000000000000 eclic_global_interrupt_disable
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:46     .text.eclic_global_interrupt_disable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:47     .text.eclic_global_interrupt_disable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:48     .text.eclic_global_interrupt_disable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:51     .text.eclic_global_interrupt_disable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:53     .text.eclic_global_interrupt_disable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:54     .text.eclic_global_interrupt_disable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:63     .text.eclic_global_interrupt_disable:0000000000000006 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:64     .text.eclic_global_interrupt_disable:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:71     .text.eclic_level_threshold_set:0000000000000000 eclic_level_threshold_set
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:74     .text.eclic_level_threshold_set:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:76     .text.eclic_level_threshold_set:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:80     .text.eclic_level_threshold_set:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:81     .text.eclic_level_threshold_set:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:82     .text.eclic_level_threshold_set:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:88     .text.eclic_level_threshold_set:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:89     .text.eclic_level_threshold_set:000000000000000a .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:96     .text.eclic_priority_group_set:0000000000000000 eclic_priority_group_set
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:99     .text.eclic_priority_group_set:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:101    .text.eclic_priority_group_set:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:104    .text.eclic_priority_group_set:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:105    .text.eclic_priority_group_set:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:109    .text.eclic_priority_group_set:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:110    .text.eclic_priority_group_set:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:113    .text.eclic_priority_group_set:000000000000000a .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:115    .text.eclic_priority_group_set:000000000000000c .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:118    .text.eclic_priority_group_set:0000000000000014 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:119    .text.eclic_priority_group_set:0000000000000014 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:126    .text.eclic_priority_group_set:0000000000000022 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:127    .text.eclic_priority_group_set:0000000000000024 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:134    .text.eclic_irq_enable:0000000000000000 eclic_irq_enable
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:137    .text.eclic_irq_enable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:139    .text.eclic_irq_enable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:144    .text.eclic_irq_enable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:145    .text.eclic_irq_enable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:150    .text.eclic_irq_enable:000000000000000a .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:158    .text.eclic_irq_enable:000000000000000e .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:161    .text.eclic_irq_enable:000000000000000e .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:162    .text.eclic_irq_enable:000000000000000e .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:163    .text.eclic_irq_enable:000000000000000e .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:164    .text.eclic_irq_enable:000000000000000e .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:166    .text.eclic_irq_enable:0000000000000010 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:170    .text.eclic_irq_enable:0000000000000012 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:179    .text.eclic_irq_enable:0000000000000020 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:180    .text.eclic_irq_enable:0000000000000020 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:181    .text.eclic_irq_enable:0000000000000020 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:184    .text.eclic_irq_enable:0000000000000020 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:187    .text.eclic_irq_enable:0000000000000020 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:188    .text.eclic_irq_enable:0000000000000020 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:189    .text.eclic_irq_enable:0000000000000020 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:190    .text.eclic_irq_enable:0000000000000020 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:191    .text.eclic_irq_enable:0000000000000020 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:193    .text.eclic_irq_enable:0000000000000022 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:196    .text.eclic_irq_enable:0000000000000026 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:198    .text.eclic_irq_enable:000000000000002a .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:200    .text.eclic_irq_enable:000000000000002c .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:202    .text.eclic_irq_enable:0000000000000030 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:204    .text.eclic_irq_enable:0000000000000034 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:207    .text.eclic_irq_enable:000000000000003c .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:211    .text.eclic_irq_enable:0000000000000044 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:217    .text.eclic_irq_enable:000000000000004c .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:218    .text.eclic_irq_enable:000000000000004c .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:228    .text.eclic_irq_enable:0000000000000050 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:231    .text.eclic_irq_enable:0000000000000050 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:232    .text.eclic_irq_enable:0000000000000050 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:233    .text.eclic_irq_enable:0000000000000050 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:237    .text.eclic_irq_enable:000000000000005c .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:242    .text.eclic_irq_enable:000000000000005e .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:243    .text.eclic_irq_enable:000000000000005e .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:244    .text.eclic_irq_enable:000000000000005e .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:251    .text.eclic_irq_enable:0000000000000066 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:261    .text.eclic_irq_enable:000000000000006e .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:267    .text.eclic_irq_enable:0000000000000070 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:268    .text.eclic_irq_enable:0000000000000070 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:269    .text.eclic_irq_enable:0000000000000070 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:270    .text.eclic_irq_enable:0000000000000070 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:274    .text.eclic_irq_enable:0000000000000074 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:279    .text.eclic_irq_enable:000000000000007a .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:284    .text.eclic_irq_enable:000000000000007e .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:286    .text.eclic_irq_enable:0000000000000082 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:288    .text.eclic_irq_enable:0000000000000084 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:290    .text.eclic_irq_enable:0000000000000088 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:292    .text.eclic_irq_enable:000000000000008c .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:294    .text.eclic_irq_enable:0000000000000090 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:299    .text.eclic_irq_enable:0000000000000096 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:300    .text.eclic_irq_enable:0000000000000096 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:303    .text.eclic_irq_enable:0000000000000096 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:306    .text.eclic_irq_enable:0000000000000096 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:307    .text.eclic_irq_enable:0000000000000096 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:308    .text.eclic_irq_enable:0000000000000096 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:309    .text.eclic_irq_enable:0000000000000096 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:316    .text.eclic_irq_enable:00000000000000a0 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:317    .text.eclic_irq_enable:00000000000000a0 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:328    .text.eclic_irq_enable:00000000000000a4 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:329    .text.eclic_irq_enable:00000000000000a4 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:330    .text.eclic_irq_enable:00000000000000a4 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:340    .text.eclic_irq_enable:00000000000000ba .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:341    .text.eclic_irq_enable:00000000000000bc .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:348    .text.eclic_irq_disable:0000000000000000 eclic_irq_disable
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:351    .text.eclic_irq_disable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:353    .text.eclic_irq_disable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:356    .text.eclic_irq_disable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:357    .text.eclic_irq_disable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:361    .text.eclic_irq_disable:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:370    .text.eclic_irq_disable:0000000000000018 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:371    .text.eclic_irq_disable:000000000000001a .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:378    .text.eclic_system_reset:0000000000000000 eclic_system_reset
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:381    .text.eclic_system_reset:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:382    .text.eclic_system_reset:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:386    .text.eclic_system_reset:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:387    .text.eclic_system_reset:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:388    .text.eclic_system_reset:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:394    .text.eclic_system_reset:0000000000000010 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:395    .text.eclic_system_reset:0000000000000010 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:396    .text.eclic_system_reset:0000000000000010 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:397    .text.eclic_system_reset:0000000000000010 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:398    .text.eclic_system_reset:0000000000000010 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:399    .text.eclic_system_reset:0000000000000010 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:402    .text.eclic_system_reset:0000000000000012 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:39     .text.eclic_global_interrupt_enable:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:67     .text.eclic_global_interrupt_disable:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:92     .text.eclic_level_threshold_set:000000000000000a .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:130    .text.eclic_priority_group_set:0000000000000024 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:344    .text.eclic_irq_enable:00000000000000bc .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:374    .text.eclic_irq_disable:000000000000001a .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:405    .text.eclic_system_reset:0000000000000012 .L0 
                     .debug_frame:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:220    .text.eclic_irq_enable:0000000000000050 .L7
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:319    .text.eclic_irq_enable:00000000000000a4 .L8
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:392    .text.eclic_system_reset:0000000000000010 .L14
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:1578   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2969   .debug_str:000000000000088c .LASF148
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2893   .debug_str:00000000000005e7 .LASF149
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2781   .debug_str:000000000000025d .LASF150
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2645   .debug_ranges:0000000000000000 .Ldebug_ranges0
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2695   .debug_line:0000000000000000 .Ldebug_line0
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2899   .debug_str:00000000000006aa .LASF0
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2741   .debug_str:000000000000013d .LASF1
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2709   .debug_str:000000000000005d .LASF6
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2953   .debug_str:0000000000000815 .LASF2
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2903   .debug_str:00000000000006ca .LASF3
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2811   .debug_str:00000000000003a3 .LASF4
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2759   .debug_str:00000000000001b9 .LASF5
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2777   .debug_str:000000000000024d .LASF7
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2799   .debug_str:000000000000033f .LASF8
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2739   .debug_str:000000000000012f .LASF9
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2839   .debug_str:0000000000000480 .LASF10
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2721   .debug_str:00000000000000b0 .LASF11
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2931   .debug_str:0000000000000783 .LASF12
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2971   .debug_str:0000000000000973 .LASF13
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2925   .debug_str:0000000000000766 .LASF14
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2705   .debug_str:0000000000000047 .LASF15
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2843   .debug_str:00000000000004a2 .LASF131
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:3001   .debug_str:0000000000000a36 .LASF16
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2959   .debug_str:000000000000083d .LASF17
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2817   .debug_str:00000000000003d2 .LASF18
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2837   .debug_str:0000000000000477 .LASF19
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2995   .debug_str:0000000000000a09 .LASF20
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2731   .debug_str:00000000000000f2 .LASF21
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2911   .debug_str:00000000000006f3 .LASF22
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2979   .debug_str:00000000000009a3 .LASF23
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2745   .debug_str:0000000000000158 .LASF24
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:3003   .debug_str:0000000000000a43 .LASF25
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2917   .debug_str:000000000000071e .LASF26
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2859   .debug_str:0000000000000513 .LASF27
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2905   .debug_str:00000000000006d4 .LASF28
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2795   .debug_str:000000000000031a .LASF29
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2829   .debug_str:000000000000042d .LASF30
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2863   .debug_str:000000000000052b .LASF31
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2999   .debug_str:0000000000000a24 .LASF32
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2957   .debug_str:000000000000082b .LASF33
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2767   .debug_str:00000000000001f4 .LASF34
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2897   .debug_str:0000000000000698 .LASF35
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2935   .debug_str:0000000000000794 .LASF36
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2993   .debug_str:0000000000000a00 .LASF37
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2761   .debug_str:00000000000001c2 .LASF38
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2791   .debug_str:0000000000000302 .LASF39
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2751   .debug_str:000000000000017d .LASF40
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2987   .debug_str:00000000000009d0 .LASF41
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2735   .debug_str:0000000000000113 .LASF42
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2853   .debug_str:00000000000004df .LASF43
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2895   .debug_str:000000000000068c .LASF44
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2973   .debug_str:000000000000097b .LASF45
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2947   .debug_str:00000000000007ea .LASF46
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2707   .debug_str:0000000000000050 .LASF47
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2991   .debug_str:00000000000009f3 .LASF48
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2875   .debug_str:0000000000000581 .LASF49
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2757   .debug_str:00000000000001ad .LASF50
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2871   .debug_str:000000000000056c .LASF51
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2699   .debug_str:0000000000000017 .LASF52
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2967   .debug_str:000000000000087d .LASF53
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2727   .debug_str:00000000000000de .LASF54
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2749   .debug_str:0000000000000172 .LASF55
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2785   .debug_str:00000000000002e2 .LASF56
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2819   .debug_str:00000000000003dd .LASF57
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2743   .debug_str:0000000000000149 .LASF58
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2845   .debug_str:00000000000004a7 .LASF59
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2933   .debug_str:0000000000000788 .LASF60
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2725   .debug_str:00000000000000cf .LASF61
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:3005   .debug_str:0000000000000a4e .LASF62
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2861   .debug_str:000000000000051e .LASF63
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2849   .debug_str:00000000000004bf .LASF64
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2737   .debug_str:0000000000000127 .LASF65
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2865   .debug_str:000000000000053d .LASF66
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2763   .debug_str:00000000000001cf .LASF67
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2901   .debug_str:00000000000006b7 .LASF68
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2803   .debug_str:0000000000000365 .LASF69
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2943   .debug_str:00000000000007d0 .LASF70
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2975   .debug_str:0000000000000988 .LASF71
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2965   .debug_str:000000000000086a .LASF72
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2835   .debug_str:0000000000000464 .LASF73
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2869   .debug_str:0000000000000559 .LASF74
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2851   .debug_str:00000000000004cc .LASF75
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2733   .debug_str:0000000000000100 .LASF76
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2831   .debug_str:000000000000043f .LASF77
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2951   .debug_str:000000000000080c .LASF78
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2815   .debug_str:00000000000003c4 .LASF79
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2813   .debug_str:00000000000003b6 .LASF80
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2855   .debug_str:00000000000004eb .LASF81
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2923   .debug_str:000000000000074b .LASF82
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2765   .debug_str:00000000000001dd .LASF83
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2841   .debug_str:000000000000048b .LASF84
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2877   .debug_str:000000000000058a .LASF85
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2963   .debug_str:000000000000084f .LASF86
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2713   .debug_str:0000000000000079 .LASF87
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2797   .debug_str:000000000000032c .LASF88
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2921   .debug_str:0000000000000734 .LASF89
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2927   .debug_str:000000000000076f .LASF90
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2771   .debug_str:0000000000000210 .LASF91
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2919   .debug_str:0000000000000729 .LASF92
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2715   .debug_str:000000000000008d .LASF93
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2981   .debug_str:00000000000009ac .LASF94
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2717   .debug_str:0000000000000097 .LASF95
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2941   .debug_str:00000000000007c6 .LASF96
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2913   .debug_str:00000000000006fc .LASF97
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2789   .debug_str:00000000000002fc .LASF98
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2783   .debug_str:00000000000002dc .LASF99
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2793   .debug_str:0000000000000312 .LASF100
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2955   .debug_str:0000000000000823 .LASF101
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2833   .debug_str:0000000000000455 .LASF102
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2881   .debug_str:00000000000005af .LASF103
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2729   .debug_str:00000000000000ed .LASF104
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2883   .debug_str:00000000000005b9 .LASF105
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2885   .debug_str:00000000000005c3 .LASF106
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2961   .debug_str:000000000000084a .LASF107
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2873   .debug_str:0000000000000577 .LASF108
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2787   .debug_str:00000000000002ef .LASF109
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2937   .debug_str:00000000000007a6 .LASF110
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2719   .debug_str:00000000000000a3 .LASF111
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2909   .debug_str:00000000000006e6 .LASF112
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2945   .debug_str:00000000000007e3 .LASF113
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2769   .debug_str:0000000000000206 .LASF114
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2985   .debug_str:00000000000009c8 .LASF115
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2997   .debug_str:0000000000000a1b .LASF116
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2929   .debug_str:000000000000077e .LASF117
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2755   .debug_str:000000000000019f .LASF118
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2753   .debug_str:000000000000018c .LASF119
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:379    .text.eclic_system_reset:0000000000000000 .LFB371
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:403    .text.eclic_system_reset:0000000000000012 .LFE371
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:383    .text.eclic_system_reset:0000000000000000 .LBB88
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:401    .text.eclic_system_reset:0000000000000012 .LBE88
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2711   .debug_str:0000000000000067 .LASF120
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:349    .text.eclic_irq_disable:0000000000000000 .LFB370
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:372    .text.eclic_irq_disable:000000000000001a .LFE370
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2847   .debug_str:00000000000004b8 .LASF122
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2206   .debug_loc:0000000000000000 .LLST22
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:354    .text.eclic_irq_disable:0000000000000000 .LBB86
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:368    .text.eclic_irq_disable:0000000000000018 .LBE86
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2220   .debug_loc:0000000000000021 .LLST23
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2983   .debug_str:00000000000009b7 .LASF121
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:135    .text.eclic_irq_enable:0000000000000000 .LFB369
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:342    .text.eclic_irq_enable:00000000000000bc .LFE369
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2234   .debug_loc:0000000000000042 .LLST3
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2807   .debug_str:000000000000037f .LASF123
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2248   .debug_loc:0000000000000063 .LLST4
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2773   .debug_str:0000000000000225 .LASF124
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2262   .debug_loc:0000000000000084 .LLST5
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:140    .text.eclic_irq_enable:0000000000000000 .LBB56
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:224    .text.eclic_irq_enable:0000000000000050 .LBE56
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2276   .debug_loc:00000000000000a5 .LLST6
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2309   .debug_loc:00000000000000da .LLST7
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2323   .debug_loc:00000000000000fb .LLST8
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2330   .debug_loc:000000000000010e .LLST9
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2343   .debug_loc:0000000000000127 .LLST10
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2383   .debug_loc:000000000000015c .LLST11
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:142    .text.eclic_irq_enable:0000000000000000 .LBB58
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:167    .text.eclic_irq_enable:0000000000000012 .LBB62
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:214    .text.eclic_irq_enable:000000000000004c .LBB66
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:222    .text.eclic_irq_enable:0000000000000050 .LBE66
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2404   .debug_loc:000000000000017d .LLST12
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2411   .debug_loc:0000000000000190 .LLST13
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:226    .text.eclic_irq_enable:0000000000000050 .LBB68
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:324    .text.eclic_irq_enable:00000000000000a4 .LBE68
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2421   .debug_loc:00000000000001a6 .LLST14
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2517   .debug_loc:0000000000000231 .LLST15
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2527   .debug_loc:0000000000000247 .LLST16
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:229    .text.eclic_irq_enable:0000000000000050 .LBB70
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2542   .debug_loc:0000000000000269 .LLST17
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2557   .debug_loc:0000000000000284 .LLST18
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:248    .text.eclic_irq_enable:0000000000000066 .LBB74
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:313    .text.eclic_irq_enable:00000000000000a0 .LBB80
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:321    .text.eclic_irq_enable:00000000000000a4 .LBE80
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2565   .debug_loc:0000000000000298 .LLST19
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2572   .debug_loc:00000000000002ab .LLST20
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:326    .text.eclic_irq_enable:00000000000000a4 .LBB84
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:338    .text.eclic_irq_enable:00000000000000ba .LBE84
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2582   .debug_loc:00000000000002c1 .LLST21
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2915   .debug_str:0000000000000705 .LASF125
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:97     .text.eclic_priority_group_set:0000000000000000 .LFB368
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:128    .text.eclic_priority_group_set:0000000000000024 .LFE368
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2825   .debug_str:0000000000000419 .LASF126
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2592   .debug_loc:00000000000002d7 .LLST1
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:102    .text.eclic_priority_group_set:0000000000000000 .LBB54
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:124    .text.eclic_priority_group_set:0000000000000022 .LBE54
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2606   .debug_loc:00000000000002f8 .LLST2
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2821   .debug_str:00000000000003ea .LASF127
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:72     .text.eclic_level_threshold_set:0000000000000000 .LFB367
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:90     .text.eclic_level_threshold_set:000000000000000a .LFE367
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2891   .debug_str:00000000000005dd .LASF128
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:77     .text.eclic_level_threshold_set:0000000000000000 .LBB52
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:86     .text.eclic_level_threshold_set:0000000000000008 .LBE52
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2613   .debug_loc:000000000000030b .LLST0
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2775   .debug_str:000000000000022e .LASF129
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:44     .text.eclic_global_interrupt_disable:0000000000000000 .LFB366
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:65     .text.eclic_global_interrupt_disable:0000000000000008 .LFE366
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:49     .text.eclic_global_interrupt_disable:0000000000000000 .LBB50
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:61     .text.eclic_global_interrupt_disable:0000000000000006 .LBE50
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:50     .text.eclic_global_interrupt_disable:0000000000000000 .LBB51
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:60     .text.eclic_global_interrupt_disable:0000000000000006 .LBE51
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2809   .debug_str:0000000000000385 .LASF130
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:14     .text.eclic_global_interrupt_enable:0000000000000000 .LFB365
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:37     .text.eclic_global_interrupt_enable:0000000000000008 .LFE365
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:21     .text.eclic_global_interrupt_enable:0000000000000000 .LBB48
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:33     .text.eclic_global_interrupt_enable:0000000000000006 .LBE48
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:22     .text.eclic_global_interrupt_enable:0000000000000000 .LBB49
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:32     .text.eclic_global_interrupt_enable:0000000000000006 .LBE49
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2857   .debug_str:00000000000004fc .LASF151
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2697   .debug_str:0000000000000000 .LASF137
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2907   .debug_str:00000000000006df .LASF132
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2827   .debug_str:0000000000000422 .LASF133
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2805   .debug_str:0000000000000378 .LASF134
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2779   .debug_str:0000000000000258 .LASF135
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2887   .debug_str:00000000000005cd .LASF136
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2801   .debug_str:0000000000000351 .LASF138
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2723   .debug_str:00000000000000c7 .LASF139
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2889   .debug_str:00000000000005d6 .LASF140
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2703   .debug_str:0000000000000034 .LASF152
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2939   .debug_str:00000000000007b3 .LASF141
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2977   .debug_str:000000000000099b .LASF142
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2989   .debug_str:00000000000009e0 .LASF143
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2701   .debug_str:0000000000000022 .LASF144
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2747   .debug_str:0000000000000163 .LASF145
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2823   .debug_str:0000000000000404 .LASF153
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2949   .debug_str:00000000000007f7 .LASF146
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2879   .debug_str:00000000000005a1 .LASF147
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:2867   .debug_str:000000000000054c .LASF154
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:352    .text.eclic_irq_disable:0000000000000000 .LVL25
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:359    .text.eclic_irq_disable:0000000000000008 .LVL26
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:366    .text.eclic_irq_disable:0000000000000018 .LVL27
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:138    .text.eclic_irq_enable:0000000000000000 .LVL7
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:148    .text.eclic_irq_enable:000000000000000a .LVL8
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:252    .text.eclic_irq_enable:0000000000000068 .LVL16
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:295    .text.eclic_irq_enable:0000000000000094 .LVL20
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:152    .text.eclic_irq_enable:000000000000000e .LVL9
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:175    .text.eclic_irq_enable:0000000000000020 .LVL10
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:208    .text.eclic_irq_enable:0000000000000040 .LVL12
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:219    .text.eclic_irq_enable:0000000000000050 .LVL14
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:194    .text.eclic_irq_enable:0000000000000026 .LVL11
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:213    .text.eclic_irq_enable:000000000000004c .LVL13
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:262    .text.eclic_irq_enable:0000000000000070 .LVL17
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:272    .text.eclic_irq_enable:0000000000000074 .LVL18
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:297    .text.eclic_irq_enable:0000000000000096 .LVL21
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:318    .text.eclic_irq_enable:00000000000000a4 .LVL23
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:238    .text.eclic_irq_enable:000000000000005e .LVL15
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:280    .text.eclic_irq_enable:000000000000007e .LVL19
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:312    .text.eclic_irq_enable:00000000000000a0 .LVL22
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:336    .text.eclic_irq_enable:00000000000000ba .LVL24
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:100    .text.eclic_priority_group_set:0000000000000000 .LVL4
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:111    .text.eclic_priority_group_set:000000000000000a .LVL6
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:107    .text.eclic_priority_group_set:0000000000000008 .LVL5
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:75     .text.eclic_level_threshold_set:0000000000000000 .LVL2
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:84     .text.eclic_level_threshold_set:0000000000000008 .LVL3
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:411    .debug_info:0000000000000000 .Ldebug_info0
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:154    .text.eclic_irq_enable:000000000000000e .LBE58
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:156    .text.eclic_irq_enable:000000000000000e .LBB61
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:160    .text.eclic_irq_enable:000000000000000e .LBE61
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:177    .text.eclic_irq_enable:0000000000000020 .LBE62
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:182    .text.eclic_irq_enable:0000000000000020 .LBB65
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:186    .text.eclic_irq_enable:0000000000000020 .LBE65
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:240    .text.eclic_irq_enable:000000000000005e .LBE70
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:258    .text.eclic_irq_enable:000000000000006e .LBB82
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:264    .text.eclic_irq_enable:0000000000000070 .LBE82
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:247    .text.eclic_irq_enable:0000000000000066 .LBB73
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:257    .text.eclic_irq_enable:000000000000006e .LBE73
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:265    .text.eclic_irq_enable:0000000000000070 .LBB83
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:322    .text.eclic_irq_enable:00000000000000a4 .LBE83
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:256    .text.eclic_irq_enable:000000000000006e .LBE74
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:276    .text.eclic_irq_enable:000000000000007a .LBB78
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:282    .text.eclic_irq_enable:000000000000007e .LBE78
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:301    .text.eclic_irq_enable:0000000000000096 .LBB79
C:\Users\stapi\AppData\Local\Temp\cciyvhPc.s:305    .text.eclic_irq_enable:0000000000000096 .LBE79

NO UNDEFINED SYMBOLS
