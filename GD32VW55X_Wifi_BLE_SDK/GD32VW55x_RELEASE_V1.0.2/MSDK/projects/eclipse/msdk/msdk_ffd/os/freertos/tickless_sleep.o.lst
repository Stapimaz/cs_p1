   1              		.file	"tickless_sleep.c"
   2              		.option nopic
   3              		.attribute arch, "rv32i2p0_m2p0_a2p0_f2p0_c2p0_b_p0p94"
   4              		.attribute unaligned_access, 0
   5              		.attribute stack_align, 16
   6              		.text
   7              	.Ltext0:
   8              		.cfi_sections	.debug_frame
   9              		.section	.text.freertos_cpu_sleep_time_get,"ax",@progbits
  10              		.align	1
  11              		.globl	freertos_cpu_sleep_time_get
  13              	freertos_cpu_sleep_time_get:
  14              	.LFB368:
  15              		.file 1 "C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_REL
   1:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** /*!
   2:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****     \file    tickless_sleep.c
   3:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****     \brief   Tickless sleep function for GD32VW55x SDK
   4:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** 
   5:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****     \version 2023-07-20, V1.0.0, firmware for GD32VW55x
   6:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** */
   7:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** 
   8:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** /*
   9:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****     Copyright (c) 2023, GigaDevice Semiconductor Inc.
  10:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** 
  11:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****     Redistribution and use in source and binary forms, with or without modification,
  12:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** are permitted provided that the following conditions are met:
  13:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** 
  14:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****     1. Redistributions of source code must retain the above copyright notice, this
  15:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****        list of conditions and the following disclaimer.
  16:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****     2. Redistributions in binary form must reproduce the above copyright notice,
  17:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****        this list of conditions and the following disclaimer in the documentation
  18:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****        and/or other materials provided with the distribution.
  19:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****     3. Neither the name of the copyright holder nor the names of its contributors
  20:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****        may be used to endorse or promote products derived from this software without
  21:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****        specific prior written permission.
  22:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** 
  23:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  24:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  26:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  27:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  28:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  29:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  30:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  31:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
  32:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** OF SUCH DAMAGE.
  33:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** */
  34:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** #include "app_cfg.h"
  35:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** 
  36:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** #include <stdint.h>
  37:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** #include "dbg_print.h"
  38:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** #include "wakelock.h"
  39:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** #include "tickless_sleep.h"
  40:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** #include "gd32vw55x_platform.h"
  41:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** #include "systime.h"
  42:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** #include "gd32vw55x.h"
  43:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** #include "wrapper_os.h"
  44:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** #include "FreeRTOS.h"
  45:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** 
  46:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** #ifdef CFG_WLAN_SUPPORT
  47:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** #include "wlan_config.h"
  48:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** #include "wifi_export.h"
  49:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** #endif
  50:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** 
  51:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
  52:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** #ifdef CFG_STATS
  53:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** static uint32_t cpu_stats_start = 0;
  54:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** static uint32_t cpu_sleep_ms = 0;
  55:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** #endif
  56:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** extern uint64_t xMaximumPossibleSuppressedTicks;
  57:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** /* maybe need wrap it as sys_task_step_tick later */
  58:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** extern void vTaskStepTick(const uint64_t xTicksToJump);
  59:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** 
  60:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** void freertos_cpu_sleep_time_get(uint32_t *stats_ms, uint32_t *sleep_ms)
  61:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** {
  16              		.loc 1 61 1
  17              		.cfi_startproc
  18              	.LVL0:
  19 0000 17030000 		call	t0,__riscv_save_3
  19      E7020300 
  20              		.cfi_offset 18, -16
  21              		.cfi_offset 9, -12
  22              		.cfi_offset 8, -8
  23              		.cfi_offset 1, -4
  24              		.cfi_def_cfa_offset 16
  62:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** #ifdef CFG_STATS
  63:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****     if (sleep_ms)
  25              		.loc 1 63 5
  26 0008 B7040000 		lui	s1,%hi(.LANCHOR0)
  61:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** #ifdef CFG_STATS
  27              		.loc 1 61 1 is_stmt 0
  28 000c 2A89     		mv	s2,a0
  29 000e 93840400 		addi	s1,s1,%lo(.LANCHOR0)
  30              		.loc 1 63 8
  31 0012 99C1     		beq	a1,zero,.L2
  64:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         *sleep_ms = cpu_sleep_ms;
  32              		.loc 1 64 9 is_stmt 1
  33              		.loc 1 64 19 is_stmt 0
  34 0014 9C40     		lw	a5,0(s1)
  35 0016 9CC1     		sw	a5,0(a1)
  36              	.L2:
  65:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****     if (stats_ms)
  37              		.loc 1 65 5 is_stmt 1
  38 0018 37040000 		lui	s0,%hi(.LANCHOR1)
  39 001c 13040400 		addi	s0,s0,%lo(.LANCHOR1)
  40              		.loc 1 65 8 is_stmt 0
  41 0020 630A0900 		beq	s2,zero,.L3
  66:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         *stats_ms = sys_current_time_get() - cpu_stats_start;
  42              		.loc 1 66 9 is_stmt 1
  43              		.loc 1 66 21 is_stmt 0
  44 0024 97000000 		call	sys_current_time_get
  44      E7800000 
  45              	.LVL1:
  46              		.loc 1 66 44
  47 002c 1C40     		lw	a5,0(s0)
  48 002e 1D8D     		sub	a0,a0,a5
  49              		.loc 1 66 19
  50 0030 2320A900 		sw	a0,0(s2)
  51              	.L3:
  67:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** 
  68:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****     cpu_sleep_ms = 0;
  52              		.loc 1 68 5 is_stmt 1
  53              		.loc 1 68 18 is_stmt 0
  54 0034 23A00400 		sw	zero,0(s1)
  69:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****     cpu_stats_start = sys_current_time_get();
  55              		.loc 1 69 5 is_stmt 1
  56              		.loc 1 69 23 is_stmt 0
  57 0038 97000000 		call	sys_current_time_get
  57      E7800000 
  58              	.LVL2:
  59              		.loc 1 69 21
  60 0040 08C0     		sw	a0,0(s0)
  70:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** #endif
  71:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** }
  61              		.loc 1 71 1
  62 0042 17030000 		tail	__riscv_restore_3
  62      67000300 
  63              		.cfi_restore 18
  64              		.cfi_restore 9
  65              		.cfi_restore 8
  66              		.cfi_restore 1
  67              		.cfi_def_cfa_offset 0
  68              		.cfi_endproc
  69              	.LFE368:
  71              		.section	.text.freertos_pre_sleep_processing,"ax",@progbits
  72              		.align	1
  73              		.globl	freertos_pre_sleep_processing
  75              	freertos_pre_sleep_processing:
  76              	.LFB369:
  72:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** 
  73:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** void freertos_pre_sleep_processing(unsigned long long *expected_idle_time)
  74:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** {
  77              		.loc 1 74 1 is_stmt 1
  78              		.cfi_startproc
  79              	.LVL3:
  80 0000 17030000 		call	t0,__riscv_save_3
  80      E7020300 
  81              		.cfi_offset 18, -16
  82              		.cfi_offset 9, -12
  83              		.cfi_offset 8, -8
  84              		.cfi_offset 1, -4
  85              		.cfi_def_cfa_offset 16
  75:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****     uint16_t sleep_time;
  86              		.loc 1 75 5
  76:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****     struct time_rtc time_before_sleep;
  87              		.loc 1 76 5
  77:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****     struct time_rtc time_after_sleep;
  88              		.loc 1 77 5
  78:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****     // The GCC compiler may optimize the follow variables
  79:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****     volatile uint64_t passed_time;
  89              		.loc 1 79 5
  80:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****     volatile uint64_t sys_timer_val, pass_timer_cnt;
  90              		.loc 1 80 5
  81:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** 
  82:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****     if (sys_ps_get() == SYS_PS_DEEP_SLEEP) {
  91              		.loc 1 82 5
  74:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****     uint16_t sleep_time;
  92              		.loc 1 74 1 is_stmt 0
  93 0008 7971     		addi	sp,sp,-48
  94              		.cfi_def_cfa_offset 64
  74:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****     uint16_t sleep_time;
  95              		.loc 1 74 1
  96 000a AA84     		mv	s1,a0
  97              		.loc 1 82 9
  98 000c 97000000 		call	sys_ps_get
  98      E7800000 
  99              	.LVL4:
 100              		.loc 1 82 8
 101 0014 8547     		li	a5,1
 102 0016 6312F512 		bne	a0,a5,.L11
  83:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         if (*expected_idle_time < xMaximumPossibleSuppressedTicks) {
 103              		.loc 1 83 9 is_stmt 1
 104              		.loc 1 83 33 is_stmt 0
 105 001a B7070000 		lui	a5,%hi(xMaximumPossibleSuppressedTicks)
 106              		.loc 1 83 12
 107 001e 83A64700 		lw	a3,%lo(xMaximumPossibleSuppressedTicks+4)(a5)
 108 0022 D840     		lw	a4,4(s1)
 109 0024 6360D712 		bgtu	a3,a4,.L17
 110 0028 6397E600 		bne	a3,a4,.L18
 111 002c 03A70700 		lw	a4,%lo(xMaximumPossibleSuppressedTicks)(a5)
 112 0030 9C40     		lw	a5,0(s1)
 113 0032 63E9E710 		bgtu	a4,a5,.L17
 114              	.L18:
  84:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****             sleep_time = DEEP_SLEEP_MIN_TIME_MS;
  85:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         } else {
  86:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****             sleep_time = DEEP_SLEEP_MAX_TIME_MS;
 115              		.loc 1 86 24
 116 0036 0969     		li	s2,8192
 117 0038 13090971 		addi	s2,s2,1808
 118              	.L13:
 119              	.LVL5:
  87:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         }
  88:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** 
  89:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         rtc_32k_time_get(&time_before_sleep, 0);
 120              		.loc 1 89 9 is_stmt 1
 121 003c 8145     		li	a1,0
 122 003e 0810     		addi	a0,sp,32
 123              	.LBB24:
 124              	.LBB25:
 125              		.file 2 "..\\..\\..\\..\\plf\\riscv\\NMSIS\\Core\\Include/core_feature_timer.h"
   1:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /*
   2:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * Copyright (c) 2019 Nuclei Limited. All rights reserved.
   3:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  *
   4:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * SPDX-License-Identifier: Apache-2.0
   5:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  *
   6:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * not use this file except in compliance with the License.
   8:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * You may obtain a copy of the License at
   9:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  *
  10:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * www.apache.org/licenses/LICENSE-2.0
  11:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  *
  12:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * Unless required by applicable law or agreed to in writing, software
  13:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * See the License for the specific language governing permissions and
  16:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * limitations under the License.
  17:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
  18:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #ifndef __CORE_FEATURE_TIMER_H__
  19:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define __CORE_FEATURE_TIMER_H__
  20:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /*!
  21:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * @file     core_feature_timer.h
  22:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * @brief    System Timer feature API header file for Nuclei N/NX Core
  23:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
  24:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /*
  25:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * System Timer Feature Configuration Macro:
  26:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * 1. __SYSTIMER_PRESENT:  Define whether Private System Timer is present or not.
  27:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  *   * 0: Not present
  28:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  *   * 1: Present
  29:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * 2. __SYSTIMER_BASEADDR:  Define the base address of the System Timer.
  30:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
  31:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #ifdef __cplusplus
  32:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  extern "C" {
  33:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #endif
  34:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
  35:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #include "core_feature_base.h"
  36:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
  37:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #if defined(__SYSTIMER_PRESENT) && (__SYSTIMER_PRESENT == 1)
  38:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /**
  39:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \defgroup NMSIS_Core_SysTimer_Registers     Register Define and Type Definitions Of System Timer
  40:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \ingroup NMSIS_Core_Registers
  41:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \brief   Type definitions and defines for system timer registers.
  42:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  *
  43:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * @{
  44:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
  45:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /**
  46:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \brief  Structure type to access the System Timer (SysTimer).
  47:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \details
  48:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * Structure definition to access the system timer(SysTimer).
  49:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \remarks
  50:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - MSFTRST register is introduced in Nuclei N Core version 1.3(\ref __NUCLEI_N_REV >= 0x0103)
  51:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - MSTOP register is renamed to MTIMECTL register in Nuclei N Core version 1.4(\ref __NUCLEI_N_RE
  52:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - CMPCLREN and CLKSRC bit in MTIMECTL register is introduced in Nuclei N Core version 1.4(\ref _
  53:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
  54:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** typedef struct {
  55:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     __IOM uint64_t MTIMER;                  /*!< Offset: 0x000 (R/W)  System Timer current value 64
  56:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     union {
  57:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****         __IOM uint64_t MTIMERCMP_64;        /*!< Offset: 0x008 (R/W)  System Timer compare Value 64
  58:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****         struct {
  59:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****             __IOM uint32_t MTIMERCMP_lo;    /*!< Offset: 0x008 (R/W)  System Timer compare Value lo
  60:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****             __IOM uint32_t MTIMERCMP_hi;    /*!< Offset: 0x00C (R/W)  System Timer compare Value hi
  61:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****         } MTIMERCMP_32;
  62:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     } MTIMERCMP;
  63:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     __IOM uint32_t RESERVED0[0x3F8];        /*!< Offset: 0x010 - 0xFEC Reserved */
  64:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     __IOM uint32_t MSFTRST;                 /*!< Offset: 0xFF0 (R/W)  System Timer Software Core Re
  65:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     __IOM uint32_t RESERVED1;               /*!< Offset: 0xFF4 Reserved */
  66:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     __IOM uint32_t MTIMECTL;                /*!< Offset: 0xFF8 (R/W)  System Timer Control Register
  67:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     __IOM uint32_t MSIP;                    /*!< Offset: 0xFFC (R/W)  System Timer SW interrupt Reg
  68:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** } SysTimer_Type;
  69:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
  70:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /* Timer Control / Status Register Definitions */
  71:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer_MTIMECTL_TIMESTOP_Pos      0U                                          /*!< SysTic
  72:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer_MTIMECTL_TIMESTOP_Msk      (1UL << SysTimer_MTIMECTL_TIMESTOP_Pos)     /*!< SysTic
  73:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer_MTIMECTL_CMPCLREN_Pos      1U                                          /*!< SysTic
  74:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer_MTIMECTL_CMPCLREN_Msk      (1UL << SysTimer_MTIMECTL_CMPCLREN_Pos)     /*!< SysTic
  75:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer_MTIMECTL_CLKSRC_Pos        2U                                          /*!< SysTic
  76:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer_MTIMECTL_CLKSRC_Msk        (1UL << SysTimer_MTIMECTL_CLKSRC_Pos)       /*!< SysTic
  77:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
  78:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer_MSIP_MSIP_Pos              0U                                          /*!< SysTic
  79:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer_MSIP_MSIP_Msk              (1UL << SysTimer_MSIP_MSIP_Pos)             /*!< SysTic
  80:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
  81:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer_MTIMER_Msk                 (0xFFFFFFFFFFFFFFFFULL)                     /*!< SysTic
  82:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer_MTIMERCMP_Msk              (0xFFFFFFFFFFFFFFFFULL)                     /*!< SysTic
  83:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer_MTIMECTL_Msk               (0xFFFFFFFFUL)                              /*!< SysTic
  84:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer_MSIP_Msk                   (0xFFFFFFFFUL)                              /*!< SysTic
  85:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer_MSFTRST_Msk                (0xFFFFFFFFUL)                              /*!< SysTic
  86:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
  87:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer_MSFRST_KEY                 (0x80000A5FUL)                              /*!< SysTic
  88:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
  89:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #ifndef __SYSTIMER_BASEADDR
  90:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /* Base address of SYSTIMER(__SYSTIMER_BASEADDR) should be defined in <Device.h> */
  91:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #error "__SYSTIMER_BASEADDR is not defined, please check!"
  92:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #endif
  93:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /* System Timer Memory mapping of Device  */
  94:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer_BASE                       __SYSTIMER_BASEADDR                         /*!< SysTic
  95:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer                            ((SysTimer_Type *) SysTimer_BASE)           /*!< SysTic
  96:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /** @} */ /* end of group NMSIS_Core_SysTimer_Registers */
  97:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
  98:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /* ##################################    SysTimer function  #######################################
  99:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /**
 100:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \defgroup NMSIS_Core_SysTimer SysTimer Functions
 101:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \brief    Functions that configure the Core System Timer.
 102:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * @{
 103:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
 104:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /**
 105:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \brief  Set system timer load value
 106:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \details
 107:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * This function set the system timer load value in MTIMER register.
 108:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \param [in]  value   value to set system timer MTIMER register.
 109:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \remarks
 110:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - Load value is 64bits wide.
 111:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - \ref SysTimer_GetLoadValue
 112:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
 113:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** __STATIC_FORCEINLINE void SysTimer_SetLoadValue(uint64_t value)
 114:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** {
 115:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     SysTimer->MTIMER = value;
 116:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** }
 117:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
 118:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /**
 119:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \brief  Get system timer load value
 120:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \details
 121:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * This function get the system timer current value in MTIMER register.
 122:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \return  current value(64bit) of system timer MTIMER register.
 123:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \remarks
 124:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - Load value is 64bits wide.
 125:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - \ref SysTimer_SetLoadValue
 126:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
 127:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** __STATIC_FORCEINLINE uint64_t SysTimer_GetLoadValue(void)
 128:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** {
 129:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     return SysTimer->MTIMER;
 130:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** }
 131:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
 132:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /**
 133:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \brief  Set system timer compare value
 134:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \details
 135:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * This function set the system Timer compare value in MTIMERCMP register.
 136:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \param [in]  value   compare value to set system timer MTIMERCMP register.
 137:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \remarks
 138:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - Compare value is 64bits wide.
 139:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - If compare value is larger than current value timer interrupt generate.
 140:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - Modify the load value or compare value less to clear the interrupt.
 141:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - \ref SysTimer_GetCompareValue
 142:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
 143:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** __STATIC_FORCEINLINE void SysTimer_SetCompareValue(uint64_t value)
 144:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** {
 145:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     uint64_t cur_ticks = SysTimer->MTIMER;
 146:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
 147:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     /* If the low 32bits of reload_ticks are smaller than cur_ticks, the high 32bits are written fi
 148:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****      * otherwise the low 32bits are written first to avoid unexpected interrupt. */
 149:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     if (__USUALLY((uint32_t)value > (uint32_t)cur_ticks)) {
 150:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****         SysTimer->MTIMERCMP.MTIMERCMP_64 = value;
 151:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     } else {
 152:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****         SysTimer->MTIMERCMP.MTIMERCMP_32.MTIMERCMP_hi = (uint32_t)(value >> 32);
 153:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****         SysTimer->MTIMERCMP.MTIMERCMP_32.MTIMERCMP_lo = (uint32_t)(value & 0xFFFFFFFF);
 154:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     }
 155:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** }
 156:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
 157:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /**
 158:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \brief  Get system timer compare value
 159:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \details
 160:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * This function get the system timer compare value in MTIMERCMP register.
 161:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \return  compare value of system timer MTIMERCMP register.
 162:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \remarks
 163:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - Compare value is 64bits wide.
 164:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - \ref SysTimer_SetCompareValue
 165:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
 166:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** __STATIC_FORCEINLINE uint64_t SysTimer_GetCompareValue(void)
 167:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** {
 168:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     return SysTimer->MTIMERCMP.MTIMERCMP_64;
 169:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** }
 170:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
 171:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /**
 172:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \brief  Enable system timer counter running
 173:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \details
 174:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * Enable system timer counter running by clear
 175:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * TIMESTOP bit in MTIMECTL register.
 176:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
 177:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** __STATIC_FORCEINLINE void SysTimer_Start(void)
 178:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** {
 179:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     SysTimer->MTIMECTL &= ~(SysTimer_MTIMECTL_TIMESTOP_Msk);
 180:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** }
 181:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
 182:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /**
 183:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \brief  Stop system timer counter running
 184:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \details
 185:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * Stop system timer counter running by set
 186:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * TIMESTOP bit in MTIMECTL register.
 187:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
 188:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** __STATIC_FORCEINLINE void SysTimer_Stop(void)
 189:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** {
 190:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     SysTimer->MTIMECTL |= SysTimer_MTIMECTL_TIMESTOP_Msk;
 126              		.loc 2 190 24 is_stmt 0
 127 0040 371400D1 		li	s0,-788525056
 128              	.LBE25:
 129              	.LBE24:
 130              		.loc 1 89 9
 131 0044 97000000 		call	rtc_32k_time_get
 131      E7800000 
 132              	.LVL6:
  90:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         //dbg_print(INFO, "time_before_sleep sec %d msec %d\r\n\n", time_before_sleep.tv_sec, time_
  91:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** 
  92:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         SysTimer_Stop();
 133              		.loc 1 92 9 is_stmt 1
 134              	.LBB28:
 135              	.LBB26:
 136              		.loc 2 190 5
 137              		.loc 2 190 24 is_stmt 0
 138 004c 130404F8 		addi	s0,s0,-128
 139 0050 3C5C     		lw	a5,120(s0)
 140              	.LBE26:
 141              	.LBE28:
  93:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         deep_sleep_enter(sleep_time);
 142              		.loc 1 93 9
 143 0052 4A85     		mv	a0,s2
 144              	.LBB29:
 145              	.LBB27:
 146              		.loc 2 190 24
 147 0054 93E71700 		ori	a5,a5,1
 148 0058 3CDC     		sw	a5,120(s0)
 149              	.LBE27:
 150              	.LBE29:
 151              		.loc 1 93 9 is_stmt 1
 152 005a 97000000 		call	deep_sleep_enter
 152      E7800000 
 153              	.LVL7:
  94:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         rtc_32k_time_get(&time_after_sleep, 1);
 154              		.loc 1 94 9
 155 0062 8545     		li	a1,1
 156 0064 2810     		addi	a0,sp,40
 157 0066 97000000 		call	rtc_32k_time_get
 157      E7800000 
 158              	.LVL8:
  95:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** 
  96:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         /* set expected_idle_time to 0 to use our sleep function and bypass freertos wfi sleep */
  97:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         *expected_idle_time = 0;
 159              		.loc 1 97 9
 160              		.loc 1 97 29 is_stmt 0
 161 006e 0147     		li	a4,0
 162 0070 8147     		li	a5,0
 163 0072 DCC0     		sw	a5,4(s1)
  98:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** 
  99:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         /* CPU wake up by interrupt and run in irc16M clock, so we need enable interrupt to change 
 100:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         by func system_clock_config_nspe() in NSPE\WIFI_IOT\bsp\bsp_wlan.c */
 101:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         __enable_irq();
 164              		.loc 1 101 9 is_stmt 1
 165              		.file 3 "..\\..\\..\\..\\plf\\riscv\\NMSIS\\Core\\Include/core_feature_base.h"
   1:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /*
   2:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Copyright (c) 2019 Nuclei Limited. All rights reserved.
   3:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *
   4:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * SPDX-License-Identifier: Apache-2.0
   5:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *
   6:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * not use this file except in compliance with the License.
   8:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * You may obtain a copy of the License at
   9:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *
  10:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * www.apache.org/licenses/LICENSE-2.0
  11:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *
  12:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Unless required by applicable law or agreed to in writing, software
  13:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * See the License for the specific language governing permissions and
  16:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * limitations under the License.
  17:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
  18:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
  19:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #ifndef __CORE_FEATURE_BASE__
  20:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #define __CORE_FEATURE_BASE__
  21:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /*!
  22:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * @file     core_feature_base.h
  23:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * @brief    Base core feature API for Nuclei N/NX Core
  24:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
  25:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #include <stdint.h>
  26:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #include "riscv_encoding.h"
  27:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
  28:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #ifdef __cplusplus
  29:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  extern "C" {
  30:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
  31:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
  32:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
  33:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \defgroup NMSIS_Core_Registers     Register Define and Type Definitions
  34:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Type definitions and defines for core registers.
  35:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *
  36:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * @{
  37:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
  38:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #ifndef __RISCV_XLEN
  39:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****   /** \brief Refer to the width of an integer register in bits(either 32 or 64) */
  40:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****   #ifndef __riscv_xlen
  41:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     #define __RISCV_XLEN    32
  42:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****   #else
  43:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     #define __RISCV_XLEN    __riscv_xlen
  44:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****   #endif
  45:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif /* __RISCV_XLEN */
  46:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
  47:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /** \brief Type of Control and Status Register(CSR), depends on the XLEN defined in RISC-V */
  48:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if __RISCV_XLEN == 32
  49:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****   typedef uint32_t rv_csr_t;
  50:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #elif __RISCV_XLEN == 64
  51:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****   typedef uint64_t rv_csr_t;
  52:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else
  53:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****   typedef uint32_t rv_csr_t;
  54:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
  55:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /** @} */ /* End of Doxygen Group NMSIS_Core_Registers */
  56:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
  57:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \defgroup NMSIS_Core_Base_Registers     Base Register Define and Type Definitions
  58:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \ingroup NMSIS_Core_Registers
  59:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Type definitions and defines for base core registers.
  60:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *
  61:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * @{
  62:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
  63:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
  64:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MISA CSR register.
  65:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
  66:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
  67:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
  68:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t a:1;                           /*!< bit:     0  Atomic extension */
  69:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t b:1;                           /*!< bit:     1  Tentatively reserved for Bit-Manip
  70:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t c:1;                           /*!< bit:     2  Compressed extension */
  71:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t d:1;                           /*!< bit:     3  Double-precision floating-point ex
  72:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t e:1;                           /*!< bit:     4  RV32E base ISA */
  73:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t f:1;                           /*!< bit:     5  Single-precision floating-point ex
  74:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t g:1;                           /*!< bit:     6  Additional standard extensions pre
  75:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t h:1;                           /*!< bit:     7  Hypervisor extension */
  76:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t i:1;                           /*!< bit:     8  RV32I/64I/128I base ISA */
  77:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t j:1;                           /*!< bit:     9  Tentatively reserved for Dynamical
  78:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:1;                  /*!< bit:     10 Reserved  */
  79:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t l:1;                           /*!< bit:     11 Tentatively reserved for Decimal F
  80:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t m:1;                           /*!< bit:     12 Integer Multiply/Divide extension 
  81:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t n:1;                           /*!< bit:     13 User-level interrupts supported  *
  82:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved2:1;                  /*!< bit:     14 Reserved  */
  83:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t p:1;                           /*!< bit:     15 Tentatively reserved for Packed-SI
  84:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t q:1;                           /*!< bit:     16 Quad-precision floating-point exte
  85:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _resreved3:1;                  /*!< bit:     17 Reserved  */
  86:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t s:1;                           /*!< bit:     18 Supervisor mode implemented  */
  87:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t t:1;                           /*!< bit:     19 Tentatively reserved for Transacti
  88:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t u:1;                           /*!< bit:     20 User mode implemented  */
  89:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t v:1;                           /*!< bit:     21 Tentatively reserved for Vector ex
  90:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved4:1;                  /*!< bit:     22 Reserved  */
  91:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t x:1;                           /*!< bit:     23 Non-standard extensions present  *
  92:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
  93:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved5:38;                 /*!< bit:     24..61 Reserved  */
  94:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mxl:2;                         /*!< bit:     62..63 Machine XLEN  */
  95:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else
  96:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved5:6;                  /*!< bit:     24..29 Reserved  */
  97:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mxl:2;                         /*!< bit:     30..31 Machine XLEN  */
  98:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
  99:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 100:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 101:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MISA_Type;
 102:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 103:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 104:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MSTATUS CSR register.
 105:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 106:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 107:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 108:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
 109:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:3;                  /*!< bit:     0..2  Reserved */
 110:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mie:1;                         /*!< bit:     3  Machine mode interrupt enable flag
 111:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:3;                  /*!< bit:     4..6  Reserved */
 112:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpie:1;                        /*!< bit:     7  mirror of MIE flag */
 113:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved2:3;                  /*!< bit:     8..10  Reserved */
 114:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpp:2;                         /*!< bit:     11..12 mirror of Privilege Mode */
 115:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t fs:2;                          /*!< bit:     13..14 FS status flag */
 116:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t xs:2;                          /*!< bit:     15..16 XS status flag */
 117:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mprv:1;                        /*!< bit:     Machine mode PMP */
 118:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved3:14;                 /*!< bit:     18..31 Reserved */
 119:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t uxl:2;                         /*!< bit:     32..33 user mode xlen */
 120:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved6:29;                 /*!< bit:     34..62 Reserved  */
 121:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t sd:1;                          /*!< bit:     Dirty status for XS or FS */
 122:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else
 123:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:1;                  /*!< bit:     0  Reserved */
 124:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t sie:1;                         /*!< bit:     1  supervisor interrupt enable flag *
 125:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:1;                  /*!< bit:     2  Reserved */
 126:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mie:1;                         /*!< bit:     3  Machine mode interrupt enable flag
 127:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved2:1;                  /*!< bit:     4  Reserved */
 128:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t spie:1;                        /*!< bit:     3  Supervisor Privilede mode interrup
 129:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved3:1;                  /*!< bit:     Reserved */
 130:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpie:1;                        /*!< bit:     mirror of MIE flag */
 131:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved4:3;                  /*!< bit:     Reserved */
 132:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpp:2;                         /*!< bit:     mirror of Privilege Mode */
 133:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t fs:2;                          /*!< bit:     FS status flag */
 134:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t xs:2;                          /*!< bit:     XS status flag */
 135:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mprv:1;                        /*!< bit:     Machine mode PMP */
 136:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t sum:1;                         /*!< bit:     Supervisor Mode load and store protec
 137:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved6:12;                 /*!< bit:     19..30 Reserved  */
 138:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t sd:1;                          /*!< bit:     Dirty status for XS or FS */
 139:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
 140:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 141:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 142:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MSTATUS_Type;
 143:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 144:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 145:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MTVEC CSR register.
 146:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 147:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 148:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 149:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mode:6;                        /*!< bit:     0..5   interrupt mode control */
 150:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
 151:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t addr:58;                       /*!< bit:     6..63  mtvec address */
 152:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else
 153:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t addr:26;                       /*!< bit:     6..31  mtvec address */
 154:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
 155:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 156:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 157:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MTVEC_Type;
 158:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 159:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 160:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MCAUSE CSR register.
 161:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 162:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 163:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 164:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t exccode:12;                    /*!< bit:     11..0  exception or interrupt code */
 165:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:4;                  /*!< bit:     15..12  Reserved */
 166:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpil:8;                        /*!< bit:     23..16  Previous interrupt level */
 167:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:3;                  /*!< bit:     26..24  Reserved */
 168:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpie:1;                        /*!< bit:     27  Interrupt enable flag before ente
 169:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpp:2;                         /*!< bit:     29..28  Privilede mode flag before en
 170:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t minhv:1;                       /*!< bit:     30  Machine interrupt vector table */
 171:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
 172:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved2:32;                 /*!< bit:     31..62  Reserved */
 173:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t interrupt:1;                   /*!< bit:     63  trap type. 0 means exception and 
 174:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else
 175:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t interrupt:1;                   /*!< bit:     31  trap type. 0 means exception and 
 176:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
 177:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 178:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 179:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MCAUSE_Type;
 180:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 181:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 182:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MCOUNTINHIBIT CSR register.
 183:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 184:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 185:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 186:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t cy:1;                          /*!< bit:     0     1 means disable mcycle counter 
 187:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:1;                  /*!< bit:     1     Reserved */
 188:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ir:1;                          /*!< bit:     2     1 means disable minstret counte
 189:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
 190:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:61;                 /*!< bit:     3..63 Reserved */
 191:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else
 192:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:29;                 /*!< bit:     3..31 Reserved */
 193:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
 194:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 195:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 196:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MCOUNTINHIBIT_Type;
 197:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 198:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 199:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MSUBM CSR register.
 200:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 201:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 202:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 203:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:6;                  /*!< bit:     0..5   Reserved */
 204:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t typ:2;                         /*!< bit:     6..7   current trap type */
 205:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ptyp:2;                        /*!< bit:     8..9   previous trap type */
 206:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
 207:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:54;                 /*!< bit:     10..63 Reserved */
 208:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else
 209:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:22;                 /*!< bit:     10..31 Reserved */
 210:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
 211:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 212:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 213:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MSUBM_Type;
 214:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 215:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 216:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MDCAUSE CSR register.
 217:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 218:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 219:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 220:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mdcause:2;                     /*!< bit:     0..1   More detailed exception inform
 221:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:__RISCV_XLEN-2;     /*!< bit:     2..XLEN-1 Reserved */
 222:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 223:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 224:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MDCAUSE_Type;
 225:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 226:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 227:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MMISC_CTRL CSR register.
 228:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 229:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 230:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 231:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:3;                  /*!< bit:     0..2  Reserved */
 232:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t bpu:1;                         /*!< bit:     3     dynamic prediction enable flag 
 233:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:2;                  /*!< bit:     4..5  Reserved */
 234:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t misalign:1;                    /*!< bit:     6     misaligned access support flag 
 235:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved2:2;                  /*!< bit:     7..8  Reserved */
 236:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t nmi_cause:1;                   /*!< bit:     9     mnvec control and nmi mcase exc
 237:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
 238:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved3:54;                 /*!< bit:     10..63 Reserved */
 239:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else
 240:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved3:22;                 /*!< bit:     10..31 Reserved */
 241:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
 242:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 243:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 244:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MMISCCTRL_Type;
 245:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 246:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef CSR_MMISCCTRL_Type CSR_MMISCCTL_Type;
 247:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 248:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 249:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MCACHE_CTL CSR register.
 250:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 251:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 252:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 253:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ic_en:1;                       /*!< I-Cache enable */
 254:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ic_scpd_mod:1;                 /*!< Scratchpad mode, 0: Scratchpad as ICache Data 
 255:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ic_ecc_en:1;                   /*!< I-Cache ECC enable */
 256:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ic_ecc_excp_en:1;              /*!< I-Cache 2bit ECC error exception enable */
 257:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ic_rwtecc:1;                   /*!< Control I-Cache Tag Ram ECC code injection */
 258:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ic_rwdecc:1;                   /*!< Control I-Cache Data Ram ECC code injection */
 259:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:10;
 260:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dc_en:1;                       /*!< DCache enable */
 261:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dc_ecc_en:1;                   /*!< D-Cache ECC enable */
 262:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dc_ecc_excp_en:1;              /*!< D-Cache 2bit ECC error exception enable */
 263:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dc_rwtecc:1;                   /*!< Control D-Cache Tag Ram ECC code injection */
 264:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dc_rwdecc:1;                   /*!< Control D-Cache Data Ram ECC code injection */
 265:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:__RISCV_XLEN-21;
 266:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 267:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 268:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MCACHECTL_Type;
 269:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 270:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 271:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MSAVESTATUS CSR register.
 272:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 273:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 274:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 275:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpie1:1;                       /*!< bit:     0     interrupt enable flag of fisrt 
 276:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpp1:2;                        /*!< bit:     1..2  privilede mode of fisrt level N
 277:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:3;                  /*!< bit:     3..5  Reserved */
 278:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ptyp1:2;                       /*!< bit:     6..7  NMI/exception type of before fi
 279:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpie2:1;                       /*!< bit:     8     interrupt enable flag of second
 280:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpp2:2;                        /*!< bit:     9..10 privilede mode of second level 
 281:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:3;                  /*!< bit:     11..13     Reserved */
 282:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ptyp2:2;                       /*!< bit:     14..15     NMI/exception type of befo
 283:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
 284:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved2:48;                 /*!< bit:     16..63 Reserved*/
 285:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else
 286:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved2:16;                 /*!< bit:     16..31 Reserved*/
 287:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
 288:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 289:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t w;                                 /*!< Type      used for csr data access */
 290:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MSAVESTATUS_Type;
 291:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 292:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 293:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MILM_CTL CSR register.
 294:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 295:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 296:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 297:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ilm_en:1;                      /*!< ILM enable */
 298:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ilm_ecc_en:1;                  /*!< ILM ECC eanble */
 299:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ilm_ecc_excp_en:1;             /*!< ILM ECC exception enable */
 300:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ilm_rwecc:1;                   /*!< Control mecc_code write to ilm, simulate error
 301:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:6;                  /*!< Reserved */
 302:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ilm_bpa:__RISCV_XLEN-10;       /*!< ILM base address */
 303:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 304:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 305:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MILMCTL_Type;
 306:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 307:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 308:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MDLM_CTL CSR register.
 309:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 310:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 311:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 312:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dlm_en:1;                      /*!< DLM enable */
 313:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dlm_ecc_en:1;                  /*!< DLM ECC eanble */
 314:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dlm_ecc_excp_en:1;             /*!< DLM ECC exception enable */
 315:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dlm_rwecc:1;                   /*!< Control mecc_code write to dlm, simulate error
 316:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:6;                  /*!< Reserved */
 317:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dlm_bpa:__RISCV_XLEN-10;       /*!< DLM base address */
 318:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 319:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 320:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MDLMCTL_Type;
 321:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 322:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 323:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MCFG_INFO CSR register.
 324:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 325:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 326:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 327:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t tee:1;                         /*!< TEE present */
 328:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ecc:1;                         /*!< ECC present */
 329:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t clic:1;                        /*!< CLIC present */
 330:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t plic:1;                        /*!< PLIC present */
 331:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t fio:1;                         /*!< FIO present */
 332:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ppi:1;                         /*!< PPI present */
 333:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t nice:1;                        /*!< NICE present */
 334:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ilm:1;                         /*!< ILM present */
 335:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dlm:1;                         /*!< DLM present */
 336:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t icache:1;                      /*!< ICache present */
 337:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dcache:1;                      /*!< DCache present */
 338:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:__RISCV_XLEN-11;
 339:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 340:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 341:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MCFGINFO_Type;
 342:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 343:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 344:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MICFG_INFO CSR register.
 345:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 346:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 347:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 348:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t set:4;                         /*!< I-Cache sets per way */
 349:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t way:3;                         /*!< I-Cache way */
 350:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t lsize:3;                       /*!< I-Cache line size */
 351:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t cache_ecc:1;                   /*!< I-Cache ECC present */
 352:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:5;
 353:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t lm_size:5;                     /*!< ILM size, need to be 2^n size */
 354:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t lm_xonly:1;                    /*!< ILM Execute only permission */
 355:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t lm_ecc:1;                      /*!< ILM ECC present */
 356:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:__RISCV_XLEN-23;
 357:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 358:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 359:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MICFGINFO_Type;
 360:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 361:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 362:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MDCFG_INFO CSR register.
 363:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 364:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 365:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 366:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t set:4;                         /*!< D-Cache sets per way */
 367:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t way:3;                         /*!< D-Cache way */
 368:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t lsize:3;                       /*!< D-Cache line size */
 369:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t cache_ecc:1;                   /*!< D-Cache ECC present */
 370:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:5;
 371:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t lm_size:5;                     /*!< DLM size, need to be 2^n size */
 372:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t lm_xonly:1;                    /*!< DLM Execute only permission */
 373:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t lm_ecc:1;                      /*!< DLM ECC present */
 374:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:__RISCV_XLEN-23;
 375:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 376:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 377:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MDCFGINFO_Type;
 378:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 379:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 380:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MPPICFG_INFO CSR register.
 381:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 382:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 383:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 384:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:1;                  /*!< Reserved */
 385:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ppi_size:5;                    /*!< PPI size, need to be 2^n size */
 386:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:4;                  /*!< Reserved */
 387:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ppi_bpa:__RISCV_XLEN-10;       /*!< PPI base address */
 388:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 389:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 390:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MPPICFGINFO_Type;
 391:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 392:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 393:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MFIOCFG_INFO CSR register.
 394:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 395:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 396:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 397:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:1;                  /*!< Reserved */
 398:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t fio_size:5;                    /*!< FIO size, need to be 2^n size */
 399:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:4;                  /*!< Reserved */
 400:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t fio_bpa:__RISCV_XLEN-10;       /*!< FIO base address */
 401:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 402:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 403:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MFIOCFGINFO_Type;
 404:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 405:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 406:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MECC_LOCK CSR register.
 407:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 408:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 409:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 410:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ecc_lock:1;                    /*!< RW permission, ECC Lock configure */
 411:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:__RISCV_XLEN-1;     /*!< Reserved */
 412:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 413:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 414:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MECCLOCK_Type;
 415:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 416:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 417:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MECC_CODE CSR register.
 418:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 419:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 420:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 421:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t code:9;                        /*!< Used to inject ECC check code */
 422:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:7;                  /*!< Reserved */
 423:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ramid:5;                       /*!< Indicate 2bit ECC error, software can clear th
 424:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:3;                  /*!< Reserved */
 425:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t sramid:5;                      /*!< Indicate 1bit ECC error, software can clear th
 426:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved2:__RISCV_XLEN-29;    /*!< Reserved */
 427:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 428:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 429:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MECCCODE_Type;
 430:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 431:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /** @} */ /* End of Doxygen Group NMSIS_Core_Base_Registers */
 432:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 433:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /* ###########################  Core Function Access  ########################### */
 434:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 435:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \defgroup NMSIS_Core_CSR_Register_Access    Core CSR Register Access
 436:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \ingroup  NMSIS_Core
 437:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief    Functions to access the Core CSR Registers
 438:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 439:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *
 440:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * The following functions or macros provide access to Core CSR registers.
 441:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * - \ref NMSIS_Core_CSR_Encoding
 442:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * - \ref NMSIS_Core_CSR_Registers
 443:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *   @{
 444:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 445:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 446:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 447:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #ifndef __ASSEMBLY__
 448:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 449:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 450:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief CSR operation Macro for csrrw instruction.
 451:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 452:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Read the content of csr register to __v,
 453:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * then write content of val into csr register, then return __v
 454:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param csr   CSR macro definition defined in
 455:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *              \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
 456:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param val   value to store into the CSR register
 457:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \return the CSR register value before written
 458:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 459:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #define __RV_CSR_SWAP(csr, val)                                 \
 460:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     ({                                                          \
 461:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         register rv_csr_t __v = (unsigned long)(val);           \
 462:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __ASM volatile("csrrw %0, " STRINGIFY(csr) ", %1"       \
 463:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "=r"(__v)                                \
 464:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "r"(__v)                                \
 465:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "memory");                               \
 466:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __v;                                                    \
 467:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     })
 468:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 469:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 470:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief CSR operation Macro for csrr instruction.
 471:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 472:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Read the content of csr register to __v and return it
 473:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param csr   CSR macro definition defined in
 474:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *              \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
 475:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \return the CSR register value
 476:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 477:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #define __RV_CSR_READ(csr)                                      \
 478:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     ({                                                          \
 479:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         register rv_csr_t __v;                                  \
 480:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __ASM volatile("csrr %0, " STRINGIFY(csr)               \
 481:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "=r"(__v)                                \
 482:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      :                                          \
 483:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "memory");                               \
 484:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __v;                                                    \
 485:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     })
 486:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 487:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 488:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief CSR operation Macro for csrw instruction.
 489:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 490:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Write the content of val to csr register
 491:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param csr   CSR macro definition defined in
 492:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *              \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
 493:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param val   value to store into the CSR register
 494:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 495:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #define __RV_CSR_WRITE(csr, val)                                \
 496:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     ({                                                          \
 497:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         register rv_csr_t __v = (rv_csr_t)(val);                \
 498:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __ASM volatile("csrw " STRINGIFY(csr) ", %0"            \
 499:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      :                                          \
 500:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "r"(__v)                                \
 501:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "memory");                               \
 502:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     })
 503:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 504:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 505:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief CSR operation Macro for csrrs instruction.
 506:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 507:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Read the content of csr register to __v,
 508:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * then set csr register to be __v | val, then return __v
 509:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param csr   CSR macro definition defined in
 510:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *              \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
 511:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param val   Mask value to be used wih csrrs instruction
 512:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \return the CSR register value before written
 513:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 514:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #define __RV_CSR_READ_SET(csr, val)                             \
 515:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     ({                                                          \
 516:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         register rv_csr_t __v = (rv_csr_t)(val);                \
 517:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __ASM volatile("csrrs %0, " STRINGIFY(csr) ", %1"       \
 518:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "=r"(__v)                                \
 519:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "r"(__v)                                \
 520:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "memory");                               \
 521:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __v;                                                    \
 522:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     })
 523:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 524:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 525:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief CSR operation Macro for csrs instruction.
 526:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 527:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Set csr register to be csr_content | val
 528:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param csr   CSR macro definition defined in
 529:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *              \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
 530:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param val   Mask value to be used wih csrs instruction
 531:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 532:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #define __RV_CSR_SET(csr, val)                                  \
 533:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     ({                                                          \
 534:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         register rv_csr_t __v = (rv_csr_t)(val);                \
 535:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __ASM volatile("csrs " STRINGIFY(csr) ", %0"            \
 536:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      :                                          \
 537:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "r"(__v)                                \
 538:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "memory");                               \
 539:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     })
 540:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 541:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 542:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief CSR operation Macro for csrrc instruction.
 543:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 544:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Read the content of csr register to __v,
 545:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * then set csr register to be __v & ~val, then return __v
 546:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param csr   CSR macro definition defined in
 547:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *              \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
 548:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param val   Mask value to be used wih csrrc instruction
 549:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \return the CSR register value before written
 550:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 551:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #define __RV_CSR_READ_CLEAR(csr, val)                           \
 552:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     ({                                                          \
 553:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         register rv_csr_t __v = (rv_csr_t)(val);                \
 554:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __ASM volatile("csrrc %0, " STRINGIFY(csr) ", %1"       \
 555:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "=r"(__v)                                \
 556:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "r"(__v)                                \
 557:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "memory");                               \
 558:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __v;                                                    \
 559:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     })
 560:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 561:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 562:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief CSR operation Macro for csrc instruction.
 563:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 564:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Set csr register to be csr_content & ~val
 565:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param csr   CSR macro definition defined in
 566:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *              \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
 567:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param val   Mask value to be used wih csrc instruction
 568:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 569:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #define __RV_CSR_CLEAR(csr, val)                                \
 570:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     ({                                                          \
 571:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         register rv_csr_t __v = (rv_csr_t)(val);                \
 572:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __ASM volatile("csrc " STRINGIFY(csr) ", %0"            \
 573:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      :                                          \
 574:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "r"(__v)                                \
 575:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "memory");                               \
 576:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     })
 577:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif /* __ASSEMBLY__ */
 578:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 579:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 580:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Get IRQ status
 581:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details Get IRQ state in the MSUBM Register.
 582:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \remarks
 583:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *          Can only be executed in Privileged modes.
 584:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 585:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 586:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 587:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     return (uint32_t) ((__RV_CSR_READ(CSR_MSUBM) & ((0xFFFFFFFFUL << 6) & (0xFFFFFFFFUL >> (31U - (
 588:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 589:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 590:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 591:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Enable IRQ Interrupts
 592:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details Enables IRQ interrupts by setting the MIE-bit in the MSTATUS Register.
 593:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \remarks
 594:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *          Can only be executed in Privileged modes.
 595:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 596:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 597:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 598:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __RV_CSR_SET(CSR_MSTATUS, MSTATUS_MIE);
 166              		.loc 3 598 5
 167              	.LBB30:
 168              	.LBB31:
 169              		.loc 3 598 5
 170              	.LVL9:
 171              		.loc 3 598 5
 172              	.LBE31:
 173              	.LBE30:
  97:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** 
 174              		.loc 1 97 29 is_stmt 0
 175 0074 98C0     		sw	a4,0(s1)
 176              	.LBB33:
 177              	.LBB32:
 178              		.loc 3 598 5
 179 0076 A147     		li	a5,8
 180              	 #APP
 181              	# 598 "..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h" 1
   0              	
 182              		csrs 0x300, a5
 183              	# 0 "" 2
 184              	 #NO_APP
 185              	.LBE32:
 186              	.LBE33:
 102:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** 
 103:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         /* Make sure interrupt enable is executed */
 104:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         __RWMB();
 187              		.loc 1 104 9 is_stmt 1
 188              	 #APP
 189              	# 104 "C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEAS
 105              	        __FENCE_I();
 190              		fence iorw,iorw
 191              	# 0 "" 2
 192              		.loc 1 105 9
 193              	 #NO_APP
 194              	.LBB34:
 195              	.LBB35:
 599:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 600:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 601:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 602:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Disable IRQ Interrupts
 603:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details Disables IRQ interrupts by clearing the MIE-bit in the MSTATUS Register.
 604:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \remarks
 605:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *          Can only be executed in Privileged modes.
 606:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 607:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 608:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 609:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __RV_CSR_CLEAR(CSR_MSTATUS, MSTATUS_MIE);
 610:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 611:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 612:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 613:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Read whole 64 bits value of mcycle counter
 614:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details This function will read the whole 64 bits of MCYCLE register
 615:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \return  The whole 64 bits value of MCYCLE
 616:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \remarks It will work for both RV32 and RV64 to get full 64bits value of MCYCLE
 617:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 618:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE uint64_t __get_rv_cycle(void)
 619:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 620:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if __RISCV_XLEN == 32
 621:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     volatile uint32_t high0, low, high;
 622:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     uint64_t full;
 623:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 624:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     high0 = __RV_CSR_READ(CSR_MCYCLEH);
 625:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     low = __RV_CSR_READ(CSR_MCYCLE);
 626:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     high = __RV_CSR_READ(CSR_MCYCLEH);
 627:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     if (high0 != high) {
 628:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         low = __RV_CSR_READ(CSR_MCYCLE);
 629:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     }
 630:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     full = (((uint64_t)high) << 32) | low;
 631:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     return full;
 632:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #elif __RISCV_XLEN == 64
 633:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     return (uint64_t)__RV_CSR_READ(CSR_MCYCLE);
 634:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else // TODO Need cover for XLEN=128 case in future
 635:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     return (uint64_t)__RV_CSR_READ(CSR_MCYCLE);
 636:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
 637:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 638:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 639:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 640:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Read whole 64 bits value of machine instruction-retired counter
 641:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details This function will read the whole 64 bits of MINSTRET register
 642:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \return  The whole 64 bits value of MINSTRET
 643:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \remarks It will work for both RV32 and RV64 to get full 64bits value of MINSTRET
 644:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 645:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE uint64_t __get_rv_instret(void)
 646:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 647:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if __RISCV_XLEN == 32
 648:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     volatile uint32_t high0, low, high;
 649:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     uint64_t full;
 650:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 651:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     high0 = __RV_CSR_READ(CSR_MINSTRETH);
 652:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     low = __RV_CSR_READ(CSR_MINSTRET);
 653:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     high = __RV_CSR_READ(CSR_MINSTRETH);
 654:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     if (high0 != high) {
 655:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         low = __RV_CSR_READ(CSR_MINSTRET);
 656:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     }
 657:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     full = (((uint64_t)high) << 32) | low;
 658:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     return full;
 659:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #elif __RISCV_XLEN == 64
 660:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     return (uint64_t)__RV_CSR_READ(CSR_MINSTRET);
 661:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else // TODO Need cover for XLEN=128 case in future
 662:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     return (uint64_t)__RV_CSR_READ(CSR_MINSTRET);
 663:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
 664:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 665:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 666:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 667:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Read whole 64 bits value of real-time clock
 668:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details This function will read the whole 64 bits of TIME register
 669:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \return  The whole 64 bits value of TIME CSR
 670:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \remarks It will work for both RV32 and RV64 to get full 64bits value of TIME
 671:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \attention only available when user mode available
 672:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 673:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE uint64_t __get_rv_time(void)
 674:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 675:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if __RISCV_XLEN == 32
 676:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     volatile uint32_t high0, low, high;
 677:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     uint64_t full;
 678:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 679:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     high0 = __RV_CSR_READ(CSR_TIMEH);
 680:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     low = __RV_CSR_READ(CSR_TIME);
 681:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     high = __RV_CSR_READ(CSR_TIMEH);
 682:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     if (high0 != high) {
 683:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         low = __RV_CSR_READ(CSR_TIME);
 684:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     }
 685:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     full = (((uint64_t)high) << 32) | low;
 686:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     return full;
 687:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #elif __RISCV_XLEN == 64
 688:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     return (uint64_t)__RV_CSR_READ(CSR_TIME);
 689:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else // TODO Need cover for XLEN=128 case in future
 690:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     return (uint64_t)__RV_CSR_READ(CSR_TIME);
 691:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
 692:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 693:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 694:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /** @} */ /* End of Doxygen Group NMSIS_Core_CSR_Register_Access */
 695:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 696:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /* ###########################  CPU Intrinsic Functions ########################### */
 697:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 698:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \defgroup NMSIS_Core_CPU_Intrinsic   Intrinsic Functions for CPU Intructions
 699:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \ingroup  NMSIS_Core
 700:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief    Functions that generate RISC-V CPU instructions.
 701:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 702:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *
 703:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * The following functions generate specified RISC-V instructions that cannot be directly accessed 
 704:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *   @{
 705:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 706:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 707:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 708:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   NOP Instruction
 709:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 710:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * No Operation does nothing.
 711:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * This instruction can be used for code alignment purposes.
 712:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 713:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __NOP(void)
 714:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 715:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __ASM volatile("nop");
 716:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 717:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 718:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 719:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Wait For Interrupt
 720:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 721:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Wait For Interrupt is is executed using CSR_WFE.WFE=0 and WFI instruction.
 722:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * It will suspends execution until interrupt, NMI or Debug happened.
 723:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * When Core is waked up by interrupt, if
 724:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * 1. mstatus.MIE == 1(interrupt enabled), Core will enter ISR code
 725:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * 2. mstatus.MIE == 0(interrupt disabled), Core will resume previous execution
 726:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 727:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __WFI(void)
 728:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 729:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __RV_CSR_CLEAR(CSR_WFE, WFE_WFE);
 730:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __ASM volatile("wfi");
 731:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 732:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 733:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 734:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Wait For Event
 735:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 736:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Wait For Event is executed using CSR_WFE.WFE=1 and WFI instruction.
 737:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * It will suspends execution until event, NMI or Debug happened.
 738:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * When Core is waked up, Core will resume previous execution
 739:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 740:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __WFE(void)
 741:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 742:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __RV_CSR_SET(CSR_WFE, WFE_WFE);
 743:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __ASM volatile("wfi");
 744:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __RV_CSR_CLEAR(CSR_WFE, WFE_WFE);
 745:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 746:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 747:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 748:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Breakpoint Instruction
 749:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 750:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Causes the processor to enter Debug state.
 751:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Debug tools can use this to investigate system state
 752:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * when the instruction at a particular address is reached.
 753:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 754:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __EBREAK(void)
 755:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 756:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __ASM volatile("ebreak");
 757:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 758:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 759:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 760:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Environment Call Instruction
 761:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 762:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * The ECALL instruction is used to make a service request to
 763:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * the execution environment.
 764:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 765:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __ECALL(void)
 766:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 767:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __ASM volatile("ecall");
 768:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 769:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 770:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 771:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief WFI Sleep Mode enumeration
 772:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 773:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef enum WFI_SleepMode {
 774:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     WFI_SHALLOW_SLEEP = 0,      /*!< Shallow sleep mode, the core_clk will poweroff */
 775:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     WFI_DEEP_SLEEP = 1          /*!< Deep sleep mode, the core_clk and core_ano_clk will poweroff *
 776:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } WFI_SleepMode_Type;
 777:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 778:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 779:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Set Sleep mode of WFI
 780:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 781:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Set the SLEEPVALUE CSR register to control the
 782:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * WFI Sleep mode.
 783:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param[in] mode      The sleep mode to be set
 784:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 785:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __set_wfi_sleepmode(WFI_SleepMode_Type mode)
 786:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 787:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __RV_CSR_WRITE(CSR_SLEEPVALUE, mode);
 788:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 789:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 790:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 791:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Send TX Event
 792:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 793:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Set the CSR TXEVT to control send a TX Event.
 794:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * The Core will output signal tx_evt as output event signal.
 795:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 796:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __TXEVT(void)
 797:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 798:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __RV_CSR_SET(CSR_TXEVT, 0x1);
 799:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 800:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 801:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 802:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Enable MCYCLE counter
 803:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 804:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Clear the CY bit of MCOUNTINHIBIT to 0 to enable MCYCLE Counter
 805:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 806:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __enable_mcycle_counter(void)
 807:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 808:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __RV_CSR_CLEAR(CSR_MCOUNTINHIBIT, MCOUNTINHIBIT_CY);
 809:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 810:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 811:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 812:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Disable MCYCLE counter
 813:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 814:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Set the CY bit of MCOUNTINHIBIT to 1 to disable MCYCLE Counter
 815:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 816:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __disable_mcycle_counter(void)
 817:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 818:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __RV_CSR_SET(CSR_MCOUNTINHIBIT, MCOUNTINHIBIT_CY);
 819:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 820:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 821:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 822:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Enable MINSTRET counter
 823:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 824:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Clear the IR bit of MCOUNTINHIBIT to 0 to enable MINSTRET Counter
 825:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 826:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __enable_minstret_counter(void)
 827:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 828:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __RV_CSR_CLEAR(CSR_MCOUNTINHIBIT, MCOUNTINHIBIT_IR);
 829:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 830:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 831:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 832:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Disable MINSTRET counter
 833:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 834:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Set the IR bit of MCOUNTINHIBIT to 1 to disable MINSTRET Counter
 835:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 836:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __disable_minstret_counter(void)
 837:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 838:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __RV_CSR_SET(CSR_MCOUNTINHIBIT, MCOUNTINHIBIT_IR);
 839:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 840:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 841:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 842:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Enable MCYCLE & MINSTRET counter
 843:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 844:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Clear the IR and CY bit of MCOUNTINHIBIT to 1 to enable MINSTRET & MCYCLE Counter
 845:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 846:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __enable_all_counter(void)
 847:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 848:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __RV_CSR_CLEAR(CSR_MCOUNTINHIBIT, MCOUNTINHIBIT_IR|MCOUNTINHIBIT_CY);
 849:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 850:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 851:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 852:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Disable MCYCLE & MINSTRET counter
 853:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 854:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Set the IR and CY bit of MCOUNTINHIBIT to 1 to disable MINSTRET & MCYCLE Counter
 855:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 856:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __disable_all_counter(void)
 857:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 858:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __RV_CSR_SET(CSR_MCOUNTINHIBIT, MCOUNTINHIBIT_IR|MCOUNTINHIBIT_CY);
 859:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 860:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 861:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 862:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief Execute fence instruction, p -> pred, s -> succ
 863:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 864:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * the FENCE instruction ensures that all memory accesses from instructions preceding
 865:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * the fence in program order (the `predecessor set`) appear earlier in the global memory order tha
 866:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * memory accesses from instructions appearing after the fence in program order (the `successor set
 867:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * For details, please refer to The RISC-V Instruction Set Manual
 868:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param p     predecessor set, such as iorw, rw, r, w
 869:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param s     successor set, such as iorw, rw, r, w
 870:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  **/
 871:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #define __FENCE(p, s) __ASM volatile ("fence " #p "," #s : : : "memory")
 872:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 873:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 874:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Fence.i Instruction
 875:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 876:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * The FENCE.I instruction is used to synchronize the instruction
 877:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * and data streams.
 878:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 879:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __FENCE_I(void)
 880:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 881:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __ASM volatile("fence.i");
 196              		.loc 3 881 5
 197              	 #APP
 198              	# 881 "..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h" 1
 199              		fence.i
 200              	# 0 "" 2
 201              	 #NO_APP
 202              	.LBE35:
 203              	.LBE34:
 106:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         __NOP();
 204              		.loc 1 106 9
 205              	.LBB36:
 206              	.LBB37:
 715:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 207              		.loc 3 715 5
 208              	 #APP
 209              	# 715 "..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h" 1
 210              		nop
 211              	# 0 "" 2
 212              	 #NO_APP
 213              	.LBE37:
 214              	.LBE36:
 107:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** 
 108:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         /* Disable interrupts again because the clock is about to be stopped
 109:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****            and interrupts that execute while the clock is stopped will increase
 110:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****            any slippage between the time maintained by the RTOS and calendar
 111:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****            time. */
 112:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         __disable_irq();
 215              		.loc 1 112 9
 609:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 216              		.loc 3 609 5
 217              	.LBB38:
 218              	.LBB39:
 609:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 219              		.loc 3 609 5
 220              	.LVL10:
 609:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 221              		.loc 3 609 5
 222              	 #APP
 223              	# 609 "..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h" 1
 224              		csrc 0x300, a5
 225              	# 0 "" 2
 226              	 #NO_APP
 227              	.LBE39:
 228              	.LBE38:
 113:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** 
 114:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         SysTimer_Start();
 229              		.loc 1 114 9
 230              	.LBB40:
 231              	.LBB41:
 179:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** }
 232              		.loc 2 179 5
 179:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** }
 233              		.loc 2 179 24 is_stmt 0
 234 008a 3C5C     		lw	a5,120(s0)
 235 008c F99B     		andi	a5,a5,-2
 236 008e 3CDC     		sw	a5,120(s0)
 237              	.LBE41:
 238              	.LBE40:
 115:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         //dbg_print(INFO, "time_after_sleep sec %d msec %d\r\n", time_after_sleep.tv_sec, time_afte
 116:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         if (time_after_sleep.tv_sec >= time_before_sleep.tv_sec) {
 239              		.loc 1 116 9 is_stmt 1
 240              		.loc 1 116 29 is_stmt 0
 241 0090 A257     		lw	a5,40(sp)
 242              		.loc 1 116 57
 243 0092 8255     		lw	a1,32(sp)
 244 0094 1256     		lw	a2,36(sp)
 245 0096 3257     		lw	a4,44(sp)
 246              		.loc 1 116 12
 247 0098 63E9B70A 		bltu	a5,a1,.L15
 117:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****             passed_time = (time_after_sleep.tv_sec * 1000 + time_after_sleep.tv_msec) -
 248              		.loc 1 117 13 is_stmt 1
 249              		.loc 1 117 52 is_stmt 0
 250 009c 1305803E 		li	a0,1000
 251 00a0 B387A702 		mul	a5,a5,a0
 252              		.loc 1 117 87
 253 00a4 918F     		sub	a5,a5,a2
 254 00a6 BA97     		add	a5,a5,a4
 255              	.L20:
 118:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****                     (time_before_sleep.tv_sec * 1000 + time_before_sleep.tv_msec);
 119:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         } else {
 120:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****             passed_time = ((time_after_sleep.tv_sec + 60) * 1000 + time_after_sleep.tv_msec) -
 256              		.loc 1 120 94
 257 00a8 FF97A5C6 		msubr32	a5, a1, a0
 258 00ac 8146     		li	a3,0
 259              		.loc 1 120 25
 260 00ae 3EC4     		sw	a5,8(sp)
 261 00b0 36C6     		sw	a3,12(sp)
 121:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****                     (time_before_sleep.tv_sec * 1000 + time_before_sleep.tv_msec);
 122:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         }
 123:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         pass_timer_cnt = passed_time * clock_us_factor * 1000;
 262              		.loc 1 123 9 is_stmt 1
 263              		.loc 1 123 38 is_stmt 0
 264 00b2 B7070000 		lui	a5,%hi(clock_us_factor)
 265 00b6 2246     		lw	a2,8(sp)
 266 00b8 83A50700 		lw	a1,%lo(clock_us_factor)(a5)
 267 00bc B246     		lw	a3,12(sp)
 268              		.loc 1 123 56
 269 00be 7F97C5F0 		mulr64	a4, a1, a2
 270 00c2 FF97D5C4 		maddr32	a5, a1, a3
 271 00c6 9305803E 		li	a1,1000
 272 00ca 7F96E5F0 		mulr64	a2, a1, a4
 273              		.loc 1 123 24
 274 00ce 32CC     		sw	a2,24(sp)
 275              		.loc 1 123 56
 276 00d0 FF96F5C4 		maddr32	a3, a1, a5
 277              	.LBB42:
 278              	.LBB43:
 279              		.loc 2 190 24
 280 00d4 B71700D1 		li	a5,-788525056
 281              	.LBE43:
 282              	.LBE42:
 283              		.loc 1 123 24
 284 00d8 36CE     		sw	a3,28(sp)
 124:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** 
 125:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         /* compensate the systimer clock */
 126:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         SysTimer_Stop();
 285              		.loc 1 126 9 is_stmt 1
 286              	.LBB45:
 287              	.LBB44:
 288              		.loc 2 190 5
 289              		.loc 2 190 24 is_stmt 0
 290 00da 938707F8 		addi	a5,a5,-128
 291 00de B85F     		lw	a4,120(a5)
 292 00e0 B70500D1 		li	a1,-788529152
 293 00e4 13671700 		ori	a4,a4,1
 294 00e8 B8DF     		sw	a4,120(a5)
 295              	.LBE44:
 296              	.LBE45:
 127:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         sys_timer_val = SysTimer_GetLoadValue();
 297              		.loc 1 127 9 is_stmt 1
 298              	.LBB46:
 299              	.LBB47:
 129:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** }
 300              		.loc 2 129 5
 129:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** }
 301              		.loc 2 129 20 is_stmt 0
 302 00ea 9041     		lw	a2,0(a1)
 303 00ec D441     		lw	a3,4(a1)
 304              	.LBE47:
 305              	.LBE46:
 306              		.loc 1 127 23
 307 00ee 32C8     		sw	a2,16(sp)
 308 00f0 36CA     		sw	a3,20(sp)
 128:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         sys_timer_val += pass_timer_cnt;
 309              		.loc 1 128 9 is_stmt 1
 310 00f2 6248     		lw	a6,24(sp)
 311 00f4 F248     		lw	a7,28(sp)
 312              		.loc 1 128 23 is_stmt 0
 313 00f6 4246     		lw	a2,16(sp)
 314 00f8 D246     		lw	a3,20(sp)
 315 00fa 33070601 		add	a4,a2,a6
 316 00fe 3333C700 		sltu	t1,a4,a2
 317 0102 33851601 		add	a0,a3,a7
 318 0106 3AC8     		sw	a4,16(sp)
 319 0108 B306A300 		add	a3,t1,a0
 320 010c 36CA     		sw	a3,20(sp)
 129:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         SysTimer_SetLoadValue(sys_timer_val);
 321              		.loc 1 129 9 is_stmt 1
 322 010e 4246     		lw	a2,16(sp)
 323 0110 D246     		lw	a3,20(sp)
 324              	.LVL11:
 325              	.LBB48:
 326              	.LBB49:
 115:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** }
 327              		.loc 2 115 5
 115:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** }
 328              		.loc 2 115 22 is_stmt 0
 329 0112 90C1     		sw	a2,0(a1)
 330 0114 D4C1     		sw	a3,4(a1)
 331              	.LVL12:
 332              	.LBE49:
 333              	.LBE48:
 130:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         SysTimer_Start();
 334              		.loc 1 130 9 is_stmt 1
 335              	.LBB50:
 336              	.LBB51:
 179:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** }
 337              		.loc 2 179 5
 179:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** }
 338              		.loc 2 179 24 is_stmt 0
 339 0116 B85F     		lw	a4,120(a5)
 340 0118 799B     		andi	a4,a4,-2
 341 011a B8DF     		sw	a4,120(a5)
 342              	.LBE51:
 343              	.LBE50:
 131:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** 
 132:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         //dbg_print(INFO, "wakeup: sleep time = %d passed_time = %d\r\n", sleep_time, passed_time);
 133:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** 
 134:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         vTaskStepTick(passed_time * portTICK_PERIOD_MS);
 344              		.loc 1 134 9 is_stmt 1
 345 011c 2245     		lw	a0,8(sp)
 346 011e B245     		lw	a1,12(sp)
 347 0120 97000000 		call	vTaskStepTick
 347      E7800000 
 348              	.LVL13:
 135:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** #ifdef CFG_STATS
 136:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         cpu_sleep_ms += passed_time;
 349              		.loc 1 136 9
 350              		.loc 1 136 22 is_stmt 0
 351 0128 B7070000 		lui	a5,%hi(.LANCHOR0)
 352 012c 93870700 		addi	a5,a5,%lo(.LANCHOR0)
 353              		.loc 1 136 9
 354 0130 2246     		lw	a2,8(sp)
 355              		.loc 1 136 22
 356 0132 9843     		lw	a4,0(a5)
 357              		.loc 1 136 9
 358 0134 B246     		lw	a3,12(sp)
 359              		.loc 1 136 22
 360 0136 3297     		add	a4,a4,a2
 361 0138 98C3     		sw	a4,0(a5)
 362              	.LVL14:
 363              	.L11:
 137:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** #endif
 138:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****     }
 139:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** }
 364              		.loc 1 139 1
 365 013a 4561     		addi	sp,sp,48
 366              		.cfi_remember_state
 367              		.cfi_def_cfa_offset 0
 368 013c 17030000 		tail	__riscv_restore_3
 368      67000300 
 369              		.cfi_restore 18
 370              		.cfi_restore 9
 371              		.cfi_restore 8
 372              		.cfi_restore 1
 373              		.cfi_def_cfa_offset -16
 374              	.L17:
 375              		.cfi_restore_state
  84:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         } else {
 376              		.loc 1 84 24
 377 0144 1309007D 		li	s2,2000
 378 0148 D5BD     		j	.L13
 379              	.LVL15:
 380              	.L15:
 120:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****                     (time_before_sleep.tv_sec * 1000 + time_before_sleep.tv_msec);
 381              		.loc 1 120 13 is_stmt 1
 120:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****                     (time_before_sleep.tv_sec * 1000 + time_before_sleep.tv_msec);
 382              		.loc 1 120 94 is_stmt 0
 383 014a BD66     		li	a3,61440
 384 014c 938606A6 		addi	a3,a3,-1440
 385 0150 3697     		add	a4,a4,a3
 120:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****                     (time_before_sleep.tv_sec * 1000 + time_before_sleep.tv_msec);
 386              		.loc 1 120 66
 387 0152 1305803E 		li	a0,1000
 120:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****                     (time_before_sleep.tv_sec * 1000 + time_before_sleep.tv_msec);
 388              		.loc 1 120 94
 389 0156 7F97A7C4 		maddr32	a4, a5, a0
 390 015a B307C740 		sub	a5,a4,a2
 391 015e A9B7     		j	.L20
 392              		.cfi_endproc
 393              	.LFE369:
 395              		.section	.text.freertos_post_sleep_processing,"ax",@progbits
 396              		.align	1
 397              		.globl	freertos_post_sleep_processing
 399              	freertos_post_sleep_processing:
 400              	.LFB370:
 140:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** 
 141:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** void freertos_post_sleep_processing(unsigned long long *expected_idle_time)
 142:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** {
 401              		.loc 1 142 1 is_stmt 1
 402              		.cfi_startproc
 403              	.LVL16:
 404 0000 17030000 		call	t0,__riscv_save_1
 404      E7020300 
 405              		.cfi_offset 8, -8
 406              		.cfi_offset 1, -4
 407              		.cfi_def_cfa_offset 16
 143:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****     if (sys_ps_get() == SYS_PS_DEEP_SLEEP) {
 408              		.loc 1 143 5
 142:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****     if (sys_ps_get() == SYS_PS_DEEP_SLEEP) {
 409              		.loc 1 142 1 is_stmt 0
 410 0008 2A84     		mv	s0,a0
 411              		.loc 1 143 9
 412 000a 97000000 		call	sys_ps_get
 412      E7800000 
 413              	.LVL17:
 414              		.loc 1 143 8
 415 0012 8547     		li	a5,1
 416 0014 6316F500 		bne	a0,a5,.L21
 144:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****         *expected_idle_time = 1;
 417              		.loc 1 144 9 is_stmt 1
 418              		.loc 1 144 29 is_stmt 0
 419 0018 0547     		li	a4,1
 420 001a 8147     		li	a5,0
 421 001c 18C0     		sw	a4,0(s0)
 422 001e 5CC0     		sw	a5,4(s0)
 423              	.L21:
 145:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****     }
 146:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** }
 424              		.loc 1 146 1
 425 0020 17030000 		tail	__riscv_restore_1
 425      67000300 
 426              		.cfi_restore 8
 427              		.cfi_restore 1
 428              		.cfi_def_cfa_offset 0
 429              		.cfi_endproc
 430              	.LFE370:
 432              		.section	.text.freertos_ready_to_sleep,"ax",@progbits
 433              		.align	1
 434              		.globl	freertos_ready_to_sleep
 436              	freertos_ready_to_sleep:
 437              	.LFB371:
 147:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** 
 148:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** int freertos_ready_to_sleep(void)
 149:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** {
 438              		.loc 1 149 1 is_stmt 1
 439              		.cfi_startproc
 440 0000 17030000 		call	t0,__riscv_save_0
 440      E7020300 
 441              		.cfi_offset 1, -4
 442              		.cfi_def_cfa_offset 16
 150:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c ****     return sys_wakelock_status_get() == 0 && wifi_hw_is_sleep();
 443              		.loc 1 150 5
 444              		.loc 1 150 12 is_stmt 0
 445 0008 97000000 		call	sys_wakelock_status_get
 445      E7800000 
 446              	.LVL18:
 447 0010 AA87     		mv	a5,a0
 448 0012 0145     		li	a0,0
 449              		.loc 1 150 43
 450 0014 89E7     		bne	a5,zero,.L24
 451              		.loc 1 150 46 discriminator 1
 452 0016 97000000 		call	wifi_hw_is_sleep
 452      E7800000 
 453              	.LVL19:
 454              	.L24:
 151:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c **** }
 455              		.loc 1 151 1
 456 001e 17030000 		tail	__riscv_restore_0
 456      67000300 
 457              		.cfi_restore 1
 458              		.cfi_def_cfa_offset 0
 459              		.cfi_endproc
 460              	.LFE371:
 462              		.section	.sbss.cpu_sleep_ms,"aw",@nobits
 463              		.align	2
 464              		.set	.LANCHOR0,. + 0
 467              	cpu_sleep_ms:
 468 0000 00000000 		.zero	4
 469              		.section	.sbss.cpu_stats_start,"aw",@nobits
 470              		.align	2
 471              		.set	.LANCHOR1,. + 0
 474              	cpu_stats_start:
 475 0000 00000000 		.zero	4
 476              		.text
 477              	.Letext0:
 478              		.file 4 "c:\\users\\stapi\\onedrive\\desktop\\gd32vw553\\embeddedbuilder_v1.4.7.26843\\tools\\nucl
 479              		.file 5 "c:\\users\\stapi\\onedrive\\desktop\\gd32vw553\\embeddedbuilder_v1.4.7.26843\\tools\\nucl
 480              		.file 6 "..\\..\\..\\..\\plf\\src/gd32vw55x_platform.h"
 481              		.file 7 "..\\..\\..\\..\\rtos\\FreeRTOS\\Source\\portable\\riscv32/portmacro.h"
 482              		.file 8 "..\\..\\..\\..\\plf\\src\\time/systime.h"
 483              		.file 9 "..\\..\\..\\..\\plf\\src/wakelock.h"
 484              		.file 10 "..\\..\\..\\..\\rtos\\rtos_wrapper/wrapper_os.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 tickless_sleep.c
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:13     .text.freertos_cpu_sleep_time_get:0000000000000000 freertos_cpu_sleep_time_get
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:17     .text.freertos_cpu_sleep_time_get:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:19     .text.freertos_cpu_sleep_time_get:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:20     .text.freertos_cpu_sleep_time_get:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:21     .text.freertos_cpu_sleep_time_get:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:22     .text.freertos_cpu_sleep_time_get:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:23     .text.freertos_cpu_sleep_time_get:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:24     .text.freertos_cpu_sleep_time_get:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:26     .text.freertos_cpu_sleep_time_get:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:28     .text.freertos_cpu_sleep_time_get:000000000000000c .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:31     .text.freertos_cpu_sleep_time_get:0000000000000012 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:33     .text.freertos_cpu_sleep_time_get:0000000000000014 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:34     .text.freertos_cpu_sleep_time_get:0000000000000014 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:38     .text.freertos_cpu_sleep_time_get:0000000000000018 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:41     .text.freertos_cpu_sleep_time_get:0000000000000020 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:43     .text.freertos_cpu_sleep_time_get:0000000000000024 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:44     .text.freertos_cpu_sleep_time_get:0000000000000024 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:47     .text.freertos_cpu_sleep_time_get:000000000000002c .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:50     .text.freertos_cpu_sleep_time_get:0000000000000030 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:53     .text.freertos_cpu_sleep_time_get:0000000000000034 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:54     .text.freertos_cpu_sleep_time_get:0000000000000034 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:56     .text.freertos_cpu_sleep_time_get:0000000000000038 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:57     .text.freertos_cpu_sleep_time_get:0000000000000038 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:60     .text.freertos_cpu_sleep_time_get:0000000000000040 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:62     .text.freertos_cpu_sleep_time_get:0000000000000042 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:63     .text.freertos_cpu_sleep_time_get:000000000000004a .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:64     .text.freertos_cpu_sleep_time_get:000000000000004a .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:65     .text.freertos_cpu_sleep_time_get:000000000000004a .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:66     .text.freertos_cpu_sleep_time_get:000000000000004a .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:67     .text.freertos_cpu_sleep_time_get:000000000000004a .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:68     .text.freertos_cpu_sleep_time_get:000000000000004a .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:75     .text.freertos_pre_sleep_processing:0000000000000000 freertos_pre_sleep_processing
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:78     .text.freertos_pre_sleep_processing:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:80     .text.freertos_pre_sleep_processing:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:81     .text.freertos_pre_sleep_processing:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:82     .text.freertos_pre_sleep_processing:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:83     .text.freertos_pre_sleep_processing:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:84     .text.freertos_pre_sleep_processing:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:85     .text.freertos_pre_sleep_processing:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:87     .text.freertos_pre_sleep_processing:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:88     .text.freertos_pre_sleep_processing:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:89     .text.freertos_pre_sleep_processing:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:90     .text.freertos_pre_sleep_processing:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:91     .text.freertos_pre_sleep_processing:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:92     .text.freertos_pre_sleep_processing:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:93     .text.freertos_pre_sleep_processing:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:94     .text.freertos_pre_sleep_processing:000000000000000a .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:96     .text.freertos_pre_sleep_processing:000000000000000a .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:98     .text.freertos_pre_sleep_processing:000000000000000c .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:101    .text.freertos_pre_sleep_processing:0000000000000014 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:104    .text.freertos_pre_sleep_processing:000000000000001a .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:105    .text.freertos_pre_sleep_processing:000000000000001a .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:107    .text.freertos_pre_sleep_processing:000000000000001e .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:116    .text.freertos_pre_sleep_processing:0000000000000036 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:121    .text.freertos_pre_sleep_processing:000000000000003c .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:127    .text.freertos_pre_sleep_processing:0000000000000040 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:131    .text.freertos_pre_sleep_processing:0000000000000044 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:136    .text.freertos_pre_sleep_processing:000000000000004c .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:137    .text.freertos_pre_sleep_processing:000000000000004c .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:138    .text.freertos_pre_sleep_processing:000000000000004c .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:143    .text.freertos_pre_sleep_processing:0000000000000052 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:147    .text.freertos_pre_sleep_processing:0000000000000054 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:152    .text.freertos_pre_sleep_processing:000000000000005a .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:155    .text.freertos_pre_sleep_processing:0000000000000062 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:160    .text.freertos_pre_sleep_processing:000000000000006e .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:161    .text.freertos_pre_sleep_processing:000000000000006e .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:166    .text.freertos_pre_sleep_processing:0000000000000074 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:169    .text.freertos_pre_sleep_processing:0000000000000074 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:171    .text.freertos_pre_sleep_processing:0000000000000074 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:174    .text.freertos_pre_sleep_processing:0000000000000074 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:175    .text.freertos_pre_sleep_processing:0000000000000074 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:179    .text.freertos_pre_sleep_processing:0000000000000076 .L0 
C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/rtos/FreeRTOS/Source/portable/Common\tickless_sleep.c:104    .text.freertos_pre_sleep_processing:000000000000007c .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:196    .text.freertos_pre_sleep_processing:0000000000000080 .L0 
........plfiscvNMSISCoreInclude/core_feature_base.h:881    .text.freertos_pre_sleep_processing:0000000000000080 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:207    .text.freertos_pre_sleep_processing:0000000000000084 .L0 
........plfiscvNMSISCoreInclude/core_feature_base.h:715    .text.freertos_pre_sleep_processing:0000000000000084 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:216    .text.freertos_pre_sleep_processing:0000000000000086 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:219    .text.freertos_pre_sleep_processing:0000000000000086 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:221    .text.freertos_pre_sleep_processing:0000000000000086 .L0 
........plfiscvNMSISCoreInclude/core_feature_base.h:609    .text.freertos_pre_sleep_processing:0000000000000086 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:232    .text.freertos_pre_sleep_processing:000000000000008a .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:233    .text.freertos_pre_sleep_processing:000000000000008a .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:234    .text.freertos_pre_sleep_processing:000000000000008a .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:240    .text.freertos_pre_sleep_processing:0000000000000090 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:241    .text.freertos_pre_sleep_processing:0000000000000090 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:243    .text.freertos_pre_sleep_processing:0000000000000092 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:247    .text.freertos_pre_sleep_processing:0000000000000098 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:249    .text.freertos_pre_sleep_processing:000000000000009c .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:250    .text.freertos_pre_sleep_processing:000000000000009c .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:253    .text.freertos_pre_sleep_processing:00000000000000a4 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:257    .text.freertos_pre_sleep_processing:00000000000000a8 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:260    .text.freertos_pre_sleep_processing:00000000000000ae .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:263    .text.freertos_pre_sleep_processing:00000000000000b2 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:264    .text.freertos_pre_sleep_processing:00000000000000b2 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:269    .text.freertos_pre_sleep_processing:00000000000000be .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:274    .text.freertos_pre_sleep_processing:00000000000000ce .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:276    .text.freertos_pre_sleep_processing:00000000000000d0 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:280    .text.freertos_pre_sleep_processing:00000000000000d4 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:284    .text.freertos_pre_sleep_processing:00000000000000d8 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:288    .text.freertos_pre_sleep_processing:00000000000000da .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:289    .text.freertos_pre_sleep_processing:00000000000000da .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:290    .text.freertos_pre_sleep_processing:00000000000000da .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:300    .text.freertos_pre_sleep_processing:00000000000000ea .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:301    .text.freertos_pre_sleep_processing:00000000000000ea .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:302    .text.freertos_pre_sleep_processing:00000000000000ea .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:307    .text.freertos_pre_sleep_processing:00000000000000ee .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:310    .text.freertos_pre_sleep_processing:00000000000000f2 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:313    .text.freertos_pre_sleep_processing:00000000000000f6 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:322    .text.freertos_pre_sleep_processing:000000000000010e .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:328    .text.freertos_pre_sleep_processing:0000000000000112 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:329    .text.freertos_pre_sleep_processing:0000000000000112 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:337    .text.freertos_pre_sleep_processing:0000000000000116 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:338    .text.freertos_pre_sleep_processing:0000000000000116 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:339    .text.freertos_pre_sleep_processing:0000000000000116 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:345    .text.freertos_pre_sleep_processing:000000000000011c .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:350    .text.freertos_pre_sleep_processing:0000000000000128 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:351    .text.freertos_pre_sleep_processing:0000000000000128 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:354    .text.freertos_pre_sleep_processing:0000000000000130 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:356    .text.freertos_pre_sleep_processing:0000000000000132 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:358    .text.freertos_pre_sleep_processing:0000000000000134 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:360    .text.freertos_pre_sleep_processing:0000000000000136 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:365    .text.freertos_pre_sleep_processing:000000000000013a .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:366    .text.freertos_pre_sleep_processing:000000000000013c .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:367    .text.freertos_pre_sleep_processing:000000000000013c .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:369    .text.freertos_pre_sleep_processing:0000000000000144 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:370    .text.freertos_pre_sleep_processing:0000000000000144 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:371    .text.freertos_pre_sleep_processing:0000000000000144 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:372    .text.freertos_pre_sleep_processing:0000000000000144 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:373    .text.freertos_pre_sleep_processing:0000000000000144 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:375    .text.freertos_pre_sleep_processing:0000000000000144 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:377    .text.freertos_pre_sleep_processing:0000000000000144 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:382    .text.freertos_pre_sleep_processing:000000000000014a .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:383    .text.freertos_pre_sleep_processing:000000000000014a .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:387    .text.freertos_pre_sleep_processing:0000000000000152 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:389    .text.freertos_pre_sleep_processing:0000000000000156 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:392    .text.freertos_pre_sleep_processing:0000000000000160 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:399    .text.freertos_post_sleep_processing:0000000000000000 freertos_post_sleep_processing
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:402    .text.freertos_post_sleep_processing:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:404    .text.freertos_post_sleep_processing:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:405    .text.freertos_post_sleep_processing:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:406    .text.freertos_post_sleep_processing:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:407    .text.freertos_post_sleep_processing:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:409    .text.freertos_post_sleep_processing:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:410    .text.freertos_post_sleep_processing:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:412    .text.freertos_post_sleep_processing:000000000000000a .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:415    .text.freertos_post_sleep_processing:0000000000000012 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:418    .text.freertos_post_sleep_processing:0000000000000018 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:419    .text.freertos_post_sleep_processing:0000000000000018 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:425    .text.freertos_post_sleep_processing:0000000000000020 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:426    .text.freertos_post_sleep_processing:0000000000000028 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:427    .text.freertos_post_sleep_processing:0000000000000028 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:428    .text.freertos_post_sleep_processing:0000000000000028 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:429    .text.freertos_post_sleep_processing:0000000000000028 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:436    .text.freertos_ready_to_sleep:0000000000000000 freertos_ready_to_sleep
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:439    .text.freertos_ready_to_sleep:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:440    .text.freertos_ready_to_sleep:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:441    .text.freertos_ready_to_sleep:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:442    .text.freertos_ready_to_sleep:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:444    .text.freertos_ready_to_sleep:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:445    .text.freertos_ready_to_sleep:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:450    .text.freertos_ready_to_sleep:0000000000000014 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:452    .text.freertos_ready_to_sleep:0000000000000016 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:456    .text.freertos_ready_to_sleep:000000000000001e .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:457    .text.freertos_ready_to_sleep:0000000000000026 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:458    .text.freertos_ready_to_sleep:0000000000000026 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:459    .text.freertos_ready_to_sleep:0000000000000026 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:464    .sbss.cpu_sleep_ms:0000000000000000 .LANCHOR0
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:467    .sbss.cpu_sleep_ms:0000000000000000 cpu_sleep_ms
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:471    .sbss.cpu_stats_start:0000000000000000 .LANCHOR1
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:474    .sbss.cpu_stats_start:0000000000000000 cpu_stats_start
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:71     .text.freertos_cpu_sleep_time_get:000000000000004a .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:395    .text.freertos_pre_sleep_processing:0000000000000160 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:432    .text.freertos_post_sleep_processing:0000000000000028 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:462    .text.freertos_ready_to_sleep:0000000000000026 .L0 
                     .debug_frame:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:36     .text.freertos_cpu_sleep_time_get:0000000000000018 .L2
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:51     .text.freertos_cpu_sleep_time_get:0000000000000034 .L3
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:363    .text.freertos_pre_sleep_processing:000000000000013a .L11
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:374    .text.freertos_pre_sleep_processing:0000000000000144 .L17
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:114    .text.freertos_pre_sleep_processing:0000000000000036 .L18
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:380    .text.freertos_pre_sleep_processing:000000000000014a .L15
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:118    .text.freertos_pre_sleep_processing:000000000000003c .L13
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:255    .text.freertos_pre_sleep_processing:00000000000000a8 .L20
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:423    .text.freertos_post_sleep_processing:0000000000000020 .L21
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:454    .text.freertos_ready_to_sleep:000000000000001e .L24
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1172   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1997   .debug_str:00000000000001b1 .LASF63
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1971   .debug_str:0000000000000064 .LASF64
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2075   .debug_str:0000000000000485 .LASF65
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1921   .debug_ranges:0000000000000000 .Ldebug_ranges0
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1953   .debug_line:0000000000000000 .Ldebug_line0
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2035   .debug_str:0000000000000394 .LASF0
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2027   .debug_str:000000000000035c .LASF1
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1967   .debug_str:0000000000000047 .LASF2
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1975   .debug_str:000000000000010f .LASF5
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2057   .debug_str:0000000000000419 .LASF3
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2007   .debug_str:00000000000002e0 .LASF4
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1973   .debug_str:0000000000000104 .LASF6
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2071   .debug_str:0000000000000467 .LASF7
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1999   .debug_str:00000000000002aa .LASF8
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2063   .debug_str:0000000000000440 .LASF9
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2037   .debug_str:00000000000003a0 .LASF10
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2043   .debug_str:00000000000003d1 .LASF11
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2045   .debug_str:00000000000003de .LASF12
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1987   .debug_str:0000000000000156 .LASF13
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1965   .debug_str:000000000000003e .LASF14
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2023   .debug_str:000000000000034c .LASF66
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2025   .debug_str:0000000000000355 .LASF15
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2069   .debug_str:000000000000045f .LASF16
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1959   .debug_str:0000000000000014 .LASF35
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2053   .debug_str:0000000000000407 .LASF17
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2083   .debug_str:0000000000000541 .LASF18
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2055   .debug_str:000000000000040c .LASF19
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2047   .debug_str:00000000000003e7 .LASF20
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1957   .debug_str:0000000000000007 .LASF21
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1981   .debug_str:0000000000000138 .LASF22
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1955   .debug_str:0000000000000000 .LASF23
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2011   .debug_str:00000000000002ff .LASF24
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2065   .debug_str:000000000000044b .LASF25
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2041   .debug_str:00000000000003c9 .LASF26
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2067   .debug_str:0000000000000455 .LASF27
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1963   .debug_str:0000000000000035 .LASF28
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2081   .debug_str:000000000000053c .LASF29
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2089   .debug_str:0000000000000582 .LASF30
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2019   .debug_str:0000000000000333 .LASF31
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2061   .debug_str:000000000000043a .LASF32
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1995   .debug_str:00000000000001a1 .LASF33
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1979   .debug_str:000000000000012b .LASF34
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2085   .debug_str:000000000000054a .LASF36
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2087   .debug_str:000000000000056a .LASF67
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:437    .text.freertos_ready_to_sleep:0000000000000000 .LFB371
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:460    .text.freertos_ready_to_sleep:0000000000000026 .LFE371
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:446    .text.freertos_ready_to_sleep:0000000000000010 .LVL18
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:453    .text.freertos_ready_to_sleep:000000000000001e .LVL19
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2077   .debug_str:000000000000050e .LASF37
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:400    .text.freertos_post_sleep_processing:0000000000000000 .LFB370
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:430    .text.freertos_post_sleep_processing:0000000000000028 .LFE370
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1969   .debug_str:0000000000000051 .LASF39
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1806   .debug_loc:0000000000000000 .LLST7
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:413    .text.freertos_post_sleep_processing:0000000000000012 .LVL17
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2091   .debug_str:0000000000000590 .LASF38
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:76     .text.freertos_pre_sleep_processing:0000000000000000 .LFB369
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:393    .text.freertos_pre_sleep_processing:0000000000000160 .LFE369
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1817   .debug_loc:000000000000001e .LLST2
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1985   .debug_str:000000000000014b .LASF40
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1828   .debug_loc:000000000000003c .LLST3
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2039   .debug_str:00000000000003b7 .LASF41
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2005   .debug_str:00000000000002cf .LASF42
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2073   .debug_str:0000000000000479 .LASF43
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2021   .debug_str:000000000000033e .LASF44
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2079   .debug_str:000000000000052d .LASF45
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:123    .text.freertos_pre_sleep_processing:0000000000000040 .LBB24
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:167    .text.freertos_pre_sleep_processing:0000000000000074 .LBB30
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1839   .debug_loc:000000000000005a .LLST4
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:194    .text.freertos_pre_sleep_processing:0000000000000080 .LBB34
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:203    .text.freertos_pre_sleep_processing:0000000000000084 .LBE34
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:205    .text.freertos_pre_sleep_processing:0000000000000084 .LBB36
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:214    .text.freertos_pre_sleep_processing:0000000000000086 .LBE36
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:217    .text.freertos_pre_sleep_processing:0000000000000086 .LBB38
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:228    .text.freertos_pre_sleep_processing:000000000000008a .LBE38
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:218    .text.freertos_pre_sleep_processing:0000000000000086 .LBB39
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:227    .text.freertos_pre_sleep_processing:000000000000008a .LBE39
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1852   .debug_loc:000000000000007a .LLST5
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:230    .text.freertos_pre_sleep_processing:000000000000008a .LBB40
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:238    .text.freertos_pre_sleep_processing:0000000000000090 .LBE40
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:277    .text.freertos_pre_sleep_processing:00000000000000d4 .LBB42
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:298    .text.freertos_pre_sleep_processing:00000000000000ea .LBB46
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:305    .text.freertos_pre_sleep_processing:00000000000000ee .LBE46
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:325    .text.freertos_pre_sleep_processing:0000000000000112 .LBB48
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:333    .text.freertos_pre_sleep_processing:0000000000000116 .LBE48
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1865   .debug_loc:000000000000009a .LLST6
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:335    .text.freertos_pre_sleep_processing:0000000000000116 .LBB50
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:343    .text.freertos_pre_sleep_processing:000000000000011c .LBE50
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:99     .text.freertos_pre_sleep_processing:0000000000000014 .LVL4
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:132    .text.freertos_pre_sleep_processing:000000000000004c .LVL6
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:153    .text.freertos_pre_sleep_processing:0000000000000062 .LVL7
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:158    .text.freertos_pre_sleep_processing:000000000000006e .LVL8
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:348    .text.freertos_pre_sleep_processing:0000000000000128 .LVL13
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1989   .debug_str:000000000000015f .LASF46
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:14     .text.freertos_cpu_sleep_time_get:0000000000000000 .LFB368
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:69     .text.freertos_cpu_sleep_time_get:000000000000004a .LFE368
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2031   .debug_str:0000000000000380 .LASF47
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1877   .debug_loc:00000000000000b2 .LLST0
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2051   .debug_str:00000000000003fe .LASF48
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1888   .debug_loc:00000000000000d0 .LLST1
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:45     .text.freertos_cpu_sleep_time_get:000000000000002c .LVL1
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:58     .text.freertos_cpu_sleep_time_get:0000000000000040 .LVL2
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1991   .debug_str:000000000000017b .LASF49
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2017   .debug_str:0000000000000324 .LASF50
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2029   .debug_str:000000000000036a .LASF68
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2009   .debug_str:00000000000002e9 .LASF53
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1983   .debug_str:0000000000000145 .LASF69
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2049   .debug_str:00000000000003f4 .LASF51
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2003   .debug_str:00000000000002c9 .LASF52
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2015   .debug_str:0000000000000316 .LASF54
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2013   .debug_str:0000000000000309 .LASF55
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1993   .debug_str:0000000000000189 .LASF56
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1961   .debug_str:0000000000000024 .LASF57
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2033   .debug_str:0000000000000389 .LASF58
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2001   .debug_str:00000000000002b8 .LASF59
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:1977   .debug_str:000000000000011a .LASF60
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2059   .debug_str:000000000000042c .LASF61
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:2093   .debug_str:00000000000005ae .LASF62
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:403    .text.freertos_post_sleep_processing:0000000000000000 .LVL16
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:79     .text.freertos_pre_sleep_processing:0000000000000000 .LVL3
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:119    .text.freertos_pre_sleep_processing:000000000000003c .LVL5
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:362    .text.freertos_pre_sleep_processing:000000000000013a .LVL14
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:379    .text.freertos_pre_sleep_processing:000000000000014a .LVL15
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:170    .text.freertos_pre_sleep_processing:0000000000000074 .LVL9
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:220    .text.freertos_pre_sleep_processing:0000000000000086 .LVL10
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:324    .text.freertos_pre_sleep_processing:0000000000000112 .LVL11
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:331    .text.freertos_pre_sleep_processing:0000000000000116 .LVL12
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:18     .text.freertos_cpu_sleep_time_get:0000000000000000 .LVL0
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:486    .debug_info:0000000000000000 .Ldebug_info0
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:129    .text.freertos_pre_sleep_processing:0000000000000044 .LBE24
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:134    .text.freertos_pre_sleep_processing:000000000000004c .LBB28
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:141    .text.freertos_pre_sleep_processing:0000000000000052 .LBE28
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:144    .text.freertos_pre_sleep_processing:0000000000000054 .LBB29
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:150    .text.freertos_pre_sleep_processing:000000000000005a .LBE29
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:173    .text.freertos_pre_sleep_processing:0000000000000074 .LBE30
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:176    .text.freertos_pre_sleep_processing:0000000000000076 .LBB33
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:186    .text.freertos_pre_sleep_processing:000000000000007c .LBE33
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:282    .text.freertos_pre_sleep_processing:00000000000000d8 .LBE42
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:286    .text.freertos_pre_sleep_processing:00000000000000da .LBB45
C:\Users\stapi\AppData\Local\Temp\ccuUaJko.s:296    .text.freertos_pre_sleep_processing:00000000000000ea .LBE45

UNDEFINED SYMBOLS
__riscv_save_3
sys_current_time_get
__riscv_restore_3
sys_ps_get
xMaximumPossibleSuppressedTicks
rtc_32k_time_get
deep_sleep_enter
clock_us_factor
vTaskStepTick
__riscv_save_1
__riscv_restore_1
__riscv_save_0
sys_wakelock_status_get
wifi_hw_is_sleep
__riscv_restore_0
