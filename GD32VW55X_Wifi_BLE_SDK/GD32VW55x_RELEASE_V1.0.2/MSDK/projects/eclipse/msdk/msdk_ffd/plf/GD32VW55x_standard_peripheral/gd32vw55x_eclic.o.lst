   1              		.file	"gd32vw55x_eclic.c"
   2              		.option nopic
   3              		.attribute arch, "rv32i2p0_m2p0_a2p0_f2p0_c2p0_b_p0p94"
   4              		.attribute unaligned_access, 0
   5              		.attribute stack_align, 16
   6              		.text
   7              	.Ltext0:
   8              		.cfi_sections	.debug_frame
   9              		.section	.text.eclic_global_interrupt_enable,"ax",@progbits
  10              		.align	1
  11              		.globl	eclic_global_interrupt_enable
  13              	eclic_global_interrupt_enable:
  14              	.LFB365:
  15              		.file 1 "C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_REL
   1:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** /*!
   2:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \file    gd32vw55x_eclic.c
   3:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \brief   ECLIC(Enhancement Core-Local Interrupt Controller) driver
   4:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** 
   5:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \version 2023-07-20, V1.0.0, firmware for GD32VW55x
   6:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** */
   7:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** 
   8:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** /*
   9:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     Copyright (c) 2023, GigaDevice Semiconductor Inc.
  10:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** 
  11:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     Redistribution and use in source and binary forms, with or without modification,
  12:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** are permitted provided that the following conditions are met:
  13:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** 
  14:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     1. Redistributions of source code must retain the above copyright notice, this
  15:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****        list of conditions and the following disclaimer.
  16:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     2. Redistributions in binary form must reproduce the above copyright notice,
  17:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****        this list of conditions and the following disclaimer in the documentation
  18:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****        and/or other materials provided with the distribution.
  19:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     3. Neither the name of the copyright holder nor the names of its contributors
  20:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****        may be used to endorse or promote products derived from this software without
  21:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****        specific prior written permission.
  22:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** 
  23:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  24:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  26:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  27:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  28:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  29:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  30:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  31:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
  32:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** OF SUCH DAMAGE.
  33:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** */
  34:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** 
  35:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** #include "gd32vw55x_eclic.h"
  36:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** #include "riscv_encoding.h"
  37:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** 
  38:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** /*!
  39:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \brief      enable the global interrupt
  40:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[in]  none
  41:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[out] none
  42:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \retval     none
  43:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** */
  44:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** void eclic_global_interrupt_enable(void)
  45:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** {
  16              		.loc 1 45 1
  17              		.cfi_startproc
  46:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     __enable_irq();
  18              		.loc 1 46 5
  19              		.file 2 "..\\..\\..\\..\\plf\\riscv\\NMSIS\\Core\\Include/core_feature_base.h"
   1:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /*
   2:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Copyright (c) 2019 Nuclei Limited. All rights reserved.
   3:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *
   4:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * SPDX-License-Identifier: Apache-2.0
   5:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *
   6:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * not use this file except in compliance with the License.
   8:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * You may obtain a copy of the License at
   9:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *
  10:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * www.apache.org/licenses/LICENSE-2.0
  11:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *
  12:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Unless required by applicable law or agreed to in writing, software
  13:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * See the License for the specific language governing permissions and
  16:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * limitations under the License.
  17:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
  18:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
  19:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #ifndef __CORE_FEATURE_BASE__
  20:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #define __CORE_FEATURE_BASE__
  21:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /*!
  22:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * @file     core_feature_base.h
  23:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * @brief    Base core feature API for Nuclei N/NX Core
  24:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
  25:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #include <stdint.h>
  26:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #include "riscv_encoding.h"
  27:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
  28:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #ifdef __cplusplus
  29:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  extern "C" {
  30:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
  31:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
  32:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
  33:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \defgroup NMSIS_Core_Registers     Register Define and Type Definitions
  34:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Type definitions and defines for core registers.
  35:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *
  36:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * @{
  37:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
  38:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #ifndef __RISCV_XLEN
  39:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****   /** \brief Refer to the width of an integer register in bits(either 32 or 64) */
  40:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****   #ifndef __riscv_xlen
  41:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     #define __RISCV_XLEN    32
  42:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****   #else
  43:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     #define __RISCV_XLEN    __riscv_xlen
  44:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****   #endif
  45:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif /* __RISCV_XLEN */
  46:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
  47:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /** \brief Type of Control and Status Register(CSR), depends on the XLEN defined in RISC-V */
  48:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if __RISCV_XLEN == 32
  49:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****   typedef uint32_t rv_csr_t;
  50:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #elif __RISCV_XLEN == 64
  51:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****   typedef uint64_t rv_csr_t;
  52:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else
  53:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****   typedef uint32_t rv_csr_t;
  54:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
  55:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /** @} */ /* End of Doxygen Group NMSIS_Core_Registers */
  56:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
  57:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \defgroup NMSIS_Core_Base_Registers     Base Register Define and Type Definitions
  58:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \ingroup NMSIS_Core_Registers
  59:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Type definitions and defines for base core registers.
  60:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *
  61:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * @{
  62:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
  63:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
  64:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MISA CSR register.
  65:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
  66:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
  67:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
  68:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t a:1;                           /*!< bit:     0  Atomic extension */
  69:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t b:1;                           /*!< bit:     1  Tentatively reserved for Bit-Manip
  70:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t c:1;                           /*!< bit:     2  Compressed extension */
  71:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t d:1;                           /*!< bit:     3  Double-precision floating-point ex
  72:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t e:1;                           /*!< bit:     4  RV32E base ISA */
  73:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t f:1;                           /*!< bit:     5  Single-precision floating-point ex
  74:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t g:1;                           /*!< bit:     6  Additional standard extensions pre
  75:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t h:1;                           /*!< bit:     7  Hypervisor extension */
  76:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t i:1;                           /*!< bit:     8  RV32I/64I/128I base ISA */
  77:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t j:1;                           /*!< bit:     9  Tentatively reserved for Dynamical
  78:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:1;                  /*!< bit:     10 Reserved  */
  79:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t l:1;                           /*!< bit:     11 Tentatively reserved for Decimal F
  80:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t m:1;                           /*!< bit:     12 Integer Multiply/Divide extension 
  81:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t n:1;                           /*!< bit:     13 User-level interrupts supported  *
  82:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved2:1;                  /*!< bit:     14 Reserved  */
  83:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t p:1;                           /*!< bit:     15 Tentatively reserved for Packed-SI
  84:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t q:1;                           /*!< bit:     16 Quad-precision floating-point exte
  85:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _resreved3:1;                  /*!< bit:     17 Reserved  */
  86:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t s:1;                           /*!< bit:     18 Supervisor mode implemented  */
  87:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t t:1;                           /*!< bit:     19 Tentatively reserved for Transacti
  88:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t u:1;                           /*!< bit:     20 User mode implemented  */
  89:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t v:1;                           /*!< bit:     21 Tentatively reserved for Vector ex
  90:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved4:1;                  /*!< bit:     22 Reserved  */
  91:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t x:1;                           /*!< bit:     23 Non-standard extensions present  *
  92:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
  93:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved5:38;                 /*!< bit:     24..61 Reserved  */
  94:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mxl:2;                         /*!< bit:     62..63 Machine XLEN  */
  95:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else
  96:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved5:6;                  /*!< bit:     24..29 Reserved  */
  97:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mxl:2;                         /*!< bit:     30..31 Machine XLEN  */
  98:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
  99:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 100:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 101:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MISA_Type;
 102:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 103:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 104:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MSTATUS CSR register.
 105:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 106:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 107:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 108:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
 109:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:3;                  /*!< bit:     0..2  Reserved */
 110:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mie:1;                         /*!< bit:     3  Machine mode interrupt enable flag
 111:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:3;                  /*!< bit:     4..6  Reserved */
 112:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpie:1;                        /*!< bit:     7  mirror of MIE flag */
 113:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved2:3;                  /*!< bit:     8..10  Reserved */
 114:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpp:2;                         /*!< bit:     11..12 mirror of Privilege Mode */
 115:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t fs:2;                          /*!< bit:     13..14 FS status flag */
 116:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t xs:2;                          /*!< bit:     15..16 XS status flag */
 117:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mprv:1;                        /*!< bit:     Machine mode PMP */
 118:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved3:14;                 /*!< bit:     18..31 Reserved */
 119:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t uxl:2;                         /*!< bit:     32..33 user mode xlen */
 120:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved6:29;                 /*!< bit:     34..62 Reserved  */
 121:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t sd:1;                          /*!< bit:     Dirty status for XS or FS */
 122:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else
 123:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:1;                  /*!< bit:     0  Reserved */
 124:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t sie:1;                         /*!< bit:     1  supervisor interrupt enable flag *
 125:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:1;                  /*!< bit:     2  Reserved */
 126:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mie:1;                         /*!< bit:     3  Machine mode interrupt enable flag
 127:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved2:1;                  /*!< bit:     4  Reserved */
 128:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t spie:1;                        /*!< bit:     3  Supervisor Privilede mode interrup
 129:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved3:1;                  /*!< bit:     Reserved */
 130:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpie:1;                        /*!< bit:     mirror of MIE flag */
 131:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved4:3;                  /*!< bit:     Reserved */
 132:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpp:2;                         /*!< bit:     mirror of Privilege Mode */
 133:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t fs:2;                          /*!< bit:     FS status flag */
 134:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t xs:2;                          /*!< bit:     XS status flag */
 135:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mprv:1;                        /*!< bit:     Machine mode PMP */
 136:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t sum:1;                         /*!< bit:     Supervisor Mode load and store protec
 137:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved6:12;                 /*!< bit:     19..30 Reserved  */
 138:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t sd:1;                          /*!< bit:     Dirty status for XS or FS */
 139:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
 140:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 141:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 142:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MSTATUS_Type;
 143:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 144:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 145:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MTVEC CSR register.
 146:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 147:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 148:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 149:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mode:6;                        /*!< bit:     0..5   interrupt mode control */
 150:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
 151:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t addr:58;                       /*!< bit:     6..63  mtvec address */
 152:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else
 153:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t addr:26;                       /*!< bit:     6..31  mtvec address */
 154:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
 155:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 156:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 157:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MTVEC_Type;
 158:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 159:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 160:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MCAUSE CSR register.
 161:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 162:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 163:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 164:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t exccode:12;                    /*!< bit:     11..0  exception or interrupt code */
 165:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:4;                  /*!< bit:     15..12  Reserved */
 166:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpil:8;                        /*!< bit:     23..16  Previous interrupt level */
 167:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:3;                  /*!< bit:     26..24  Reserved */
 168:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpie:1;                        /*!< bit:     27  Interrupt enable flag before ente
 169:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpp:2;                         /*!< bit:     29..28  Privilede mode flag before en
 170:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t minhv:1;                       /*!< bit:     30  Machine interrupt vector table */
 171:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
 172:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved2:32;                 /*!< bit:     31..62  Reserved */
 173:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t interrupt:1;                   /*!< bit:     63  trap type. 0 means exception and 
 174:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else
 175:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t interrupt:1;                   /*!< bit:     31  trap type. 0 means exception and 
 176:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
 177:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 178:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 179:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MCAUSE_Type;
 180:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 181:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 182:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MCOUNTINHIBIT CSR register.
 183:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 184:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 185:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 186:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t cy:1;                          /*!< bit:     0     1 means disable mcycle counter 
 187:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:1;                  /*!< bit:     1     Reserved */
 188:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ir:1;                          /*!< bit:     2     1 means disable minstret counte
 189:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
 190:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:61;                 /*!< bit:     3..63 Reserved */
 191:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else
 192:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:29;                 /*!< bit:     3..31 Reserved */
 193:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
 194:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 195:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 196:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MCOUNTINHIBIT_Type;
 197:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 198:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 199:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MSUBM CSR register.
 200:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 201:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 202:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 203:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:6;                  /*!< bit:     0..5   Reserved */
 204:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t typ:2;                         /*!< bit:     6..7   current trap type */
 205:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ptyp:2;                        /*!< bit:     8..9   previous trap type */
 206:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
 207:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:54;                 /*!< bit:     10..63 Reserved */
 208:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else
 209:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:22;                 /*!< bit:     10..31 Reserved */
 210:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
 211:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 212:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 213:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MSUBM_Type;
 214:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 215:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 216:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MDCAUSE CSR register.
 217:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 218:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 219:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 220:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mdcause:2;                     /*!< bit:     0..1   More detailed exception inform
 221:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:__RISCV_XLEN-2;     /*!< bit:     2..XLEN-1 Reserved */
 222:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 223:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 224:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MDCAUSE_Type;
 225:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 226:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 227:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MMISC_CTRL CSR register.
 228:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 229:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 230:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 231:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:3;                  /*!< bit:     0..2  Reserved */
 232:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t bpu:1;                         /*!< bit:     3     dynamic prediction enable flag 
 233:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:2;                  /*!< bit:     4..5  Reserved */
 234:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t misalign:1;                    /*!< bit:     6     misaligned access support flag 
 235:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved2:2;                  /*!< bit:     7..8  Reserved */
 236:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t nmi_cause:1;                   /*!< bit:     9     mnvec control and nmi mcase exc
 237:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
 238:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved3:54;                 /*!< bit:     10..63 Reserved */
 239:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else
 240:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved3:22;                 /*!< bit:     10..31 Reserved */
 241:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
 242:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 243:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 244:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MMISCCTRL_Type;
 245:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 246:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef CSR_MMISCCTRL_Type CSR_MMISCCTL_Type;
 247:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 248:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 249:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MCACHE_CTL CSR register.
 250:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 251:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 252:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 253:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ic_en:1;                       /*!< I-Cache enable */
 254:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ic_scpd_mod:1;                 /*!< Scratchpad mode, 0: Scratchpad as ICache Data 
 255:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ic_ecc_en:1;                   /*!< I-Cache ECC enable */
 256:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ic_ecc_excp_en:1;              /*!< I-Cache 2bit ECC error exception enable */
 257:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ic_rwtecc:1;                   /*!< Control I-Cache Tag Ram ECC code injection */
 258:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ic_rwdecc:1;                   /*!< Control I-Cache Data Ram ECC code injection */
 259:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:10;
 260:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dc_en:1;                       /*!< DCache enable */
 261:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dc_ecc_en:1;                   /*!< D-Cache ECC enable */
 262:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dc_ecc_excp_en:1;              /*!< D-Cache 2bit ECC error exception enable */
 263:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dc_rwtecc:1;                   /*!< Control D-Cache Tag Ram ECC code injection */
 264:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dc_rwdecc:1;                   /*!< Control D-Cache Data Ram ECC code injection */
 265:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:__RISCV_XLEN-21;
 266:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 267:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 268:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MCACHECTL_Type;
 269:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 270:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 271:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MSAVESTATUS CSR register.
 272:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 273:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 274:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 275:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpie1:1;                       /*!< bit:     0     interrupt enable flag of fisrt 
 276:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpp1:2;                        /*!< bit:     1..2  privilede mode of fisrt level N
 277:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:3;                  /*!< bit:     3..5  Reserved */
 278:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ptyp1:2;                       /*!< bit:     6..7  NMI/exception type of before fi
 279:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpie2:1;                       /*!< bit:     8     interrupt enable flag of second
 280:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpp2:2;                        /*!< bit:     9..10 privilede mode of second level 
 281:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:3;                  /*!< bit:     11..13     Reserved */
 282:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ptyp2:2;                       /*!< bit:     14..15     NMI/exception type of befo
 283:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
 284:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved2:48;                 /*!< bit:     16..63 Reserved*/
 285:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else
 286:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved2:16;                 /*!< bit:     16..31 Reserved*/
 287:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
 288:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 289:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t w;                                 /*!< Type      used for csr data access */
 290:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MSAVESTATUS_Type;
 291:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 292:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 293:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MILM_CTL CSR register.
 294:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 295:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 296:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 297:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ilm_en:1;                      /*!< ILM enable */
 298:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ilm_ecc_en:1;                  /*!< ILM ECC eanble */
 299:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ilm_ecc_excp_en:1;             /*!< ILM ECC exception enable */
 300:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ilm_rwecc:1;                   /*!< Control mecc_code write to ilm, simulate error
 301:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:6;                  /*!< Reserved */
 302:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ilm_bpa:__RISCV_XLEN-10;       /*!< ILM base address */
 303:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 304:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 305:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MILMCTL_Type;
 306:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 307:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 308:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MDLM_CTL CSR register.
 309:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 310:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 311:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 312:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dlm_en:1;                      /*!< DLM enable */
 313:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dlm_ecc_en:1;                  /*!< DLM ECC eanble */
 314:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dlm_ecc_excp_en:1;             /*!< DLM ECC exception enable */
 315:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dlm_rwecc:1;                   /*!< Control mecc_code write to dlm, simulate error
 316:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:6;                  /*!< Reserved */
 317:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dlm_bpa:__RISCV_XLEN-10;       /*!< DLM base address */
 318:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 319:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 320:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MDLMCTL_Type;
 321:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 322:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 323:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MCFG_INFO CSR register.
 324:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 325:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 326:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 327:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t tee:1;                         /*!< TEE present */
 328:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ecc:1;                         /*!< ECC present */
 329:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t clic:1;                        /*!< CLIC present */
 330:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t plic:1;                        /*!< PLIC present */
 331:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t fio:1;                         /*!< FIO present */
 332:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ppi:1;                         /*!< PPI present */
 333:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t nice:1;                        /*!< NICE present */
 334:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ilm:1;                         /*!< ILM present */
 335:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dlm:1;                         /*!< DLM present */
 336:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t icache:1;                      /*!< ICache present */
 337:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dcache:1;                      /*!< DCache present */
 338:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:__RISCV_XLEN-11;
 339:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 340:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 341:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MCFGINFO_Type;
 342:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 343:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 344:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MICFG_INFO CSR register.
 345:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 346:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 347:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 348:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t set:4;                         /*!< I-Cache sets per way */
 349:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t way:3;                         /*!< I-Cache way */
 350:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t lsize:3;                       /*!< I-Cache line size */
 351:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t cache_ecc:1;                   /*!< I-Cache ECC present */
 352:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:5;
 353:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t lm_size:5;                     /*!< ILM size, need to be 2^n size */
 354:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t lm_xonly:1;                    /*!< ILM Execute only permission */
 355:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t lm_ecc:1;                      /*!< ILM ECC present */
 356:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:__RISCV_XLEN-23;
 357:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 358:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 359:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MICFGINFO_Type;
 360:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 361:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 362:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MDCFG_INFO CSR register.
 363:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 364:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 365:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 366:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t set:4;                         /*!< D-Cache sets per way */
 367:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t way:3;                         /*!< D-Cache way */
 368:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t lsize:3;                       /*!< D-Cache line size */
 369:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t cache_ecc:1;                   /*!< D-Cache ECC present */
 370:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:5;
 371:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t lm_size:5;                     /*!< DLM size, need to be 2^n size */
 372:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t lm_xonly:1;                    /*!< DLM Execute only permission */
 373:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t lm_ecc:1;                      /*!< DLM ECC present */
 374:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:__RISCV_XLEN-23;
 375:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 376:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 377:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MDCFGINFO_Type;
 378:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 379:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 380:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MPPICFG_INFO CSR register.
 381:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 382:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 383:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 384:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:1;                  /*!< Reserved */
 385:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ppi_size:5;                    /*!< PPI size, need to be 2^n size */
 386:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:4;                  /*!< Reserved */
 387:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ppi_bpa:__RISCV_XLEN-10;       /*!< PPI base address */
 388:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 389:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 390:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MPPICFGINFO_Type;
 391:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 392:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 393:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MFIOCFG_INFO CSR register.
 394:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 395:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 396:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 397:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:1;                  /*!< Reserved */
 398:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t fio_size:5;                    /*!< FIO size, need to be 2^n size */
 399:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:4;                  /*!< Reserved */
 400:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t fio_bpa:__RISCV_XLEN-10;       /*!< FIO base address */
 401:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 402:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 403:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MFIOCFGINFO_Type;
 404:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 405:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 406:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MECC_LOCK CSR register.
 407:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 408:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 409:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 410:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ecc_lock:1;                    /*!< RW permission, ECC Lock configure */
 411:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:__RISCV_XLEN-1;     /*!< Reserved */
 412:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 413:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 414:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MECCLOCK_Type;
 415:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 416:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 417:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MECC_CODE CSR register.
 418:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 419:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 420:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 421:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t code:9;                        /*!< Used to inject ECC check code */
 422:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:7;                  /*!< Reserved */
 423:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ramid:5;                       /*!< Indicate 2bit ECC error, software can clear th
 424:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:3;                  /*!< Reserved */
 425:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t sramid:5;                      /*!< Indicate 1bit ECC error, software can clear th
 426:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved2:__RISCV_XLEN-29;    /*!< Reserved */
 427:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 428:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 429:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MECCCODE_Type;
 430:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 431:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /** @} */ /* End of Doxygen Group NMSIS_Core_Base_Registers */
 432:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 433:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /* ###########################  Core Function Access  ########################### */
 434:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 435:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \defgroup NMSIS_Core_CSR_Register_Access    Core CSR Register Access
 436:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \ingroup  NMSIS_Core
 437:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief    Functions to access the Core CSR Registers
 438:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 439:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *
 440:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * The following functions or macros provide access to Core CSR registers.
 441:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * - \ref NMSIS_Core_CSR_Encoding
 442:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * - \ref NMSIS_Core_CSR_Registers
 443:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *   @{
 444:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 445:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 446:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 447:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #ifndef __ASSEMBLY__
 448:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 449:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 450:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief CSR operation Macro for csrrw instruction.
 451:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 452:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Read the content of csr register to __v,
 453:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * then write content of val into csr register, then return __v
 454:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param csr   CSR macro definition defined in
 455:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *              \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
 456:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param val   value to store into the CSR register
 457:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \return the CSR register value before written
 458:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 459:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #define __RV_CSR_SWAP(csr, val)                                 \
 460:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     ({                                                          \
 461:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         register rv_csr_t __v = (unsigned long)(val);           \
 462:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __ASM volatile("csrrw %0, " STRINGIFY(csr) ", %1"       \
 463:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "=r"(__v)                                \
 464:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "r"(__v)                                \
 465:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "memory");                               \
 466:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __v;                                                    \
 467:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     })
 468:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 469:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 470:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief CSR operation Macro for csrr instruction.
 471:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 472:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Read the content of csr register to __v and return it
 473:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param csr   CSR macro definition defined in
 474:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *              \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
 475:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \return the CSR register value
 476:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 477:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #define __RV_CSR_READ(csr)                                      \
 478:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     ({                                                          \
 479:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         register rv_csr_t __v;                                  \
 480:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __ASM volatile("csrr %0, " STRINGIFY(csr)               \
 481:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "=r"(__v)                                \
 482:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      :                                          \
 483:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "memory");                               \
 484:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __v;                                                    \
 485:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     })
 486:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 487:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 488:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief CSR operation Macro for csrw instruction.
 489:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 490:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Write the content of val to csr register
 491:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param csr   CSR macro definition defined in
 492:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *              \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
 493:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param val   value to store into the CSR register
 494:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 495:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #define __RV_CSR_WRITE(csr, val)                                \
 496:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     ({                                                          \
 497:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         register rv_csr_t __v = (rv_csr_t)(val);                \
 498:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __ASM volatile("csrw " STRINGIFY(csr) ", %0"            \
 499:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      :                                          \
 500:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "r"(__v)                                \
 501:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "memory");                               \
 502:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     })
 503:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 504:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 505:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief CSR operation Macro for csrrs instruction.
 506:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 507:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Read the content of csr register to __v,
 508:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * then set csr register to be __v | val, then return __v
 509:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param csr   CSR macro definition defined in
 510:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *              \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
 511:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param val   Mask value to be used wih csrrs instruction
 512:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \return the CSR register value before written
 513:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 514:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #define __RV_CSR_READ_SET(csr, val)                             \
 515:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     ({                                                          \
 516:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         register rv_csr_t __v = (rv_csr_t)(val);                \
 517:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __ASM volatile("csrrs %0, " STRINGIFY(csr) ", %1"       \
 518:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "=r"(__v)                                \
 519:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "r"(__v)                                \
 520:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "memory");                               \
 521:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __v;                                                    \
 522:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     })
 523:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 524:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 525:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief CSR operation Macro for csrs instruction.
 526:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 527:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Set csr register to be csr_content | val
 528:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param csr   CSR macro definition defined in
 529:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *              \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
 530:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param val   Mask value to be used wih csrs instruction
 531:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 532:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #define __RV_CSR_SET(csr, val)                                  \
 533:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     ({                                                          \
 534:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         register rv_csr_t __v = (rv_csr_t)(val);                \
 535:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __ASM volatile("csrs " STRINGIFY(csr) ", %0"            \
 536:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      :                                          \
 537:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "r"(__v)                                \
 538:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "memory");                               \
 539:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     })
 540:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 541:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 542:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief CSR operation Macro for csrrc instruction.
 543:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 544:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Read the content of csr register to __v,
 545:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * then set csr register to be __v & ~val, then return __v
 546:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param csr   CSR macro definition defined in
 547:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *              \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
 548:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param val   Mask value to be used wih csrrc instruction
 549:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \return the CSR register value before written
 550:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 551:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #define __RV_CSR_READ_CLEAR(csr, val)                           \
 552:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     ({                                                          \
 553:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         register rv_csr_t __v = (rv_csr_t)(val);                \
 554:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __ASM volatile("csrrc %0, " STRINGIFY(csr) ", %1"       \
 555:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "=r"(__v)                                \
 556:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "r"(__v)                                \
 557:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "memory");                               \
 558:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __v;                                                    \
 559:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     })
 560:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 561:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 562:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief CSR operation Macro for csrc instruction.
 563:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 564:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Set csr register to be csr_content & ~val
 565:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param csr   CSR macro definition defined in
 566:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *              \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
 567:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param val   Mask value to be used wih csrc instruction
 568:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 569:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #define __RV_CSR_CLEAR(csr, val)                                \
 570:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     ({                                                          \
 571:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         register rv_csr_t __v = (rv_csr_t)(val);                \
 572:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __ASM volatile("csrc " STRINGIFY(csr) ", %0"            \
 573:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      :                                          \
 574:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "r"(__v)                                \
 575:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "memory");                               \
 576:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     })
 577:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif /* __ASSEMBLY__ */
 578:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 579:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 580:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Get IRQ status
 581:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details Get IRQ state in the MSUBM Register.
 582:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \remarks
 583:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *          Can only be executed in Privileged modes.
 584:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 585:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 586:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 587:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     return (uint32_t) ((__RV_CSR_READ(CSR_MSUBM) & ((0xFFFFFFFFUL << 6) & (0xFFFFFFFFUL >> (31U - (
 588:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 589:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 590:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 591:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Enable IRQ Interrupts
 592:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details Enables IRQ interrupts by setting the MIE-bit in the MSTATUS Register.
 593:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \remarks
 594:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *          Can only be executed in Privileged modes.
 595:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 596:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 597:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 598:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __RV_CSR_SET(CSR_MSTATUS, MSTATUS_MIE);
  20              		.loc 2 598 5
  21              	.LBB48:
  22              	.LBB49:
  23              		.loc 2 598 5
  24              	.LVL0:
  25              		.loc 2 598 5
  26 0000 A147     		li	a5,8
  27              	 #APP
  28              	# 598 "..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h" 1
   0              	
  29              		csrs 0x300, a5
  30              	# 0 "" 2
  31              	 #NO_APP
  32              	.LBE49:
  33              	.LBE48:
  47:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** }
  34              		.loc 1 47 1 is_stmt 0
  35 0006 8280     		ret
  36              		.cfi_endproc
  37              	.LFE365:
  39              		.section	.text.eclic_global_interrupt_disable,"ax",@progbits
  40              		.align	1
  41              		.globl	eclic_global_interrupt_disable
  43              	eclic_global_interrupt_disable:
  44              	.LFB366:
  48:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** 
  49:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** /*!
  50:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \brief      disable the global interrupt
  51:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[in]  none
  52:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[out] none
  53:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \retval     none
  54:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** */
  55:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** void eclic_global_interrupt_disable(void)
  56:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** {
  45              		.loc 1 56 1 is_stmt 1
  46              		.cfi_startproc
  57:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     __disable_irq();
  47              		.loc 1 57 5
 599:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 600:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 601:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 602:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Disable IRQ Interrupts
 603:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details Disables IRQ interrupts by clearing the MIE-bit in the MSTATUS Register.
 604:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \remarks
 605:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *          Can only be executed in Privileged modes.
 606:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 607:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 608:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 609:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __RV_CSR_CLEAR(CSR_MSTATUS, MSTATUS_MIE);
  48              		.loc 2 609 5
  49              	.LBB50:
  50              	.LBB51:
  51              		.loc 2 609 5
  52              	.LVL1:
  53              		.loc 2 609 5
  54 0000 A147     		li	a5,8
  55              	 #APP
  56              	# 609 "..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h" 1
  57              		csrc 0x300, a5
  58              	# 0 "" 2
  59              	 #NO_APP
  60              	.LBE51:
  61              	.LBE50:
  58:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** }
  62              		.loc 1 58 1 is_stmt 0
  63 0006 8280     		ret
  64              		.cfi_endproc
  65              	.LFE366:
  67              		.section	.text.eclic_level_threshold_set,"ax",@progbits
  68              		.align	1
  69              		.globl	eclic_level_threshold_set
  71              	eclic_level_threshold_set:
  72              	.LFB367:
  59:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** 
  60:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** /*!
  61:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \brief      set machine mode interrupt level threshold
  62:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[in]  threshold: the level threshold needed to set (0 ~ 15)
  63:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[out] none
  64:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \retval     none
  65:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** */
  66:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** void eclic_level_threshold_set(uint8_t threshold)
  67:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** {
  73              		.loc 1 67 1 is_stmt 1
  74              		.cfi_startproc
  75              	.LVL2:
  68:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     ECLIC_SetMth(threshold);
  76              		.loc 1 68 5
  77              	.LBB52:
  78              	.LBB53:
  79              		.file 3 "..\\..\\..\\..\\plf\\riscv\\NMSIS\\Core\\Include/core_feature_eclic.h"
   1:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /*
   2:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * Copyright (c) 2019 Nuclei Limited. All rights reserved.
   3:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  *
   4:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * SPDX-License-Identifier: Apache-2.0
   5:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  *
   6:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * not use this file except in compliance with the License.
   8:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * You may obtain a copy of the License at
   9:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  *
  10:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * www.apache.org/licenses/LICENSE-2.0
  11:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  *
  12:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * Unless required by applicable law or agreed to in writing, software
  13:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * See the License for the specific language governing permissions and
  16:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * limitations under the License.
  17:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
  18:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #ifndef __CORE_FEATURE_ECLIC__
  19:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #define __CORE_FEATURE_ECLIC__
  20:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /*!
  21:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * @file     core_feature_eclic.h
  22:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * @brief    ECLIC feature API header file for Nuclei N/NX Core
  23:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
  24:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /*
  25:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * ECLIC Feature Configuration Macro:
  26:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * 1. __ECLIC_PRESENT:  Define whether Enhanced Core Local Interrupt Controller (ECLIC) Unit is pre
  27:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  *   * 0: Not present
  28:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  *   * 1: Present
  29:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * 2. __ECLIC_BASEADDR:  Base address of the ECLIC unit.
  30:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * 3. ECLIC_GetInfoCtlbits():  Define the number of hardware bits are actually implemented in the c
  31:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  *   Valid number is 1 - 8.
  32:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * 4. __ECLIC_INTNUM  : Define the external interrupt number of ECLIC Unit
  33:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  *
  34:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
  35:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #ifdef __cplusplus
  36:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  extern "C" {
  37:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #endif
  38:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
  39:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #if defined(__ECLIC_PRESENT) && (__ECLIC_PRESENT == 1)
  40:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /**
  41:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \defgroup NMSIS_Core_ECLIC_Registers     Register Define and Type Definitions Of ECLIC
  42:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \ingroup NMSIS_Core_Registers
  43:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \brief   Type definitions and defines for eclic registers.
  44:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  *
  45:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * @{
  46:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
  47:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
  48:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /**
  49:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \brief  Union type to access CLICFG configure register.
  50:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
  51:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** typedef union
  52:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** {
  53:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     struct {
  54:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****         uint8_t _reserved0:1;                   /*!< bit:     0   Overflow condition code flag */
  55:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****         uint8_t nlbits:4;                       /*!< bit:     29  Carry condition code flag */
  56:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****         uint8_t _reserved1:2;                   /*!< bit:     30  Zero condition code flag */
  57:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****         uint8_t _reserved2:1;                   /*!< bit:     31  Negative condition code flag */
  58:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     } b;                                        /*!< Structure used for bit  access */
  59:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     uint8_t w;                                  /*!< Type      used for byte access */
  60:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** } CLICCFG_Type;
  61:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
  62:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /**
  63:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \brief  Union type to access CLICINFO information register.
  64:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
  65:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** typedef union {
  66:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     struct {
  67:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****         uint32_t numint:13;                     /*!< bit:  0..12   number of maximum interrupt inpu
  68:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****         uint32_t version:8;                     /*!< bit:  13..20  20:17 for architecture version,1
  69:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****         uint32_t intctlbits:4;                  /*!< bit:  21..24  specifies how many hardware bits
  70:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****         uint32_t _reserved0:7;                  /*!< bit:  25..31  Reserved */
  71:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     } b;                                        /*!< Structure used for bit  access */
  72:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     uint32_t w;                                 /*!< Type      used for word access */
  73:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** } CLICINFO_Type;
  74:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
  75:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /**
  76:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \brief Access to the structure of a vector interrupt controller.
  77:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
  78:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** typedef struct {
  79:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     __IOM uint8_t  INTIP;                       /*!< Offset: 0x000 (R/W)  Interrupt set pending reg
  80:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     __IOM uint8_t  INTIE;                       /*!< Offset: 0x001 (R/W)  Interrupt set enable regi
  81:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     __IOM uint8_t  INTATTR;                     /*!< Offset: 0x002 (R/W)  Interrupt set attributes 
  82:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     __IOM uint8_t  INTCTRL;                     /*!< Offset: 0x003 (R/W)  Interrupt configure regis
  83:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** } CLIC_CTRL_Type;
  84:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
  85:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** typedef struct {
  86:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     __IOM uint8_t   CFG;                        /*!< Offset: 0x000 (R/W)  CLIC configuration regist
  87:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     uint8_t RESERVED0[3];
  88:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     __IM uint32_t  INFO;                        /*!< Offset: 0x004 (R/ )  CLIC information register
  89:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     uint8_t RESERVED1[3];
  90:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     __IOM uint8_t  MTH;                         /*!< Offset: 0x00B (R/W)  CLIC machine mode thresho
  91:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     uint32_t RESERVED2[0x3FD];
  92:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     CLIC_CTRL_Type CTRL[4096];                  /*!< Offset: 0x1000 (R/W) CLIC register structure f
  93:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** } CLIC_Type;
  94:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
  95:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #define CLIC_CLICCFG_NLBIT_Pos                 1U                                       /*!< CLIC C
  96:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #define CLIC_CLICCFG_NLBIT_Msk                 (0xFUL << CLIC_CLICCFG_NLBIT_Pos)        /*!< CLIC C
  97:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
  98:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #define CLIC_CLICINFO_CTLBIT_Pos                21U                                     /*!< CLIC I
  99:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #define CLIC_CLICINFO_CTLBIT_Msk                (0xFUL << CLIC_CLICINFO_CTLBIT_Pos)     /*!< CLIC I
 100:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 101:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #define CLIC_CLICINFO_VER_Pos                  13U                                      /*!< CLIC C
 102:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #define CLIC_CLICINFO_VER_Msk                  (0xFFUL << CLIC_CLICCFG_NLBIT_Pos)       /*!< CLIC C
 103:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 104:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #define CLIC_CLICINFO_NUM_Pos                  0U                                       /*!< CLIC C
 105:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #define CLIC_CLICINFO_NUM_Msk                  (0xFFFUL << CLIC_CLICINFO_NUM_Pos)       /*!< CLIC C
 106:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 107:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #define CLIC_INTIP_IP_Pos                      0U                                       /*!< CLIC I
 108:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #define CLIC_INTIP_IP_Msk                      (0x1UL << CLIC_INTIP_IP_Pos)             /*!< CLIC I
 109:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 110:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #define CLIC_INTIE_IE_Pos                      0U                                       /*!< CLIC I
 111:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #define CLIC_INTIE_IE_Msk                      (0x1UL << CLIC_INTIE_IE_Pos)             /*!< CLIC I
 112:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 113:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #define CLIC_INTATTR_TRIG_Pos                  1U                                       /*!< CLIC I
 114:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #define CLIC_INTATTR_TRIG_Msk                  (0x3UL << CLIC_INTATTR_TRIG_Pos)         /*!< CLIC I
 115:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 116:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #define CLIC_INTATTR_SHV_Pos                   0U                                       /*!< CLIC I
 117:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #define CLIC_INTATTR_SHV_Msk                   (0x1UL << CLIC_INTATTR_SHV_Pos)          /*!< CLIC I
 118:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 119:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #define ECLIC_MAX_NLBITS                       8U                                       /*!< Max nl
 120:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #define ECLIC_MODE_MTVEC_Msk                   3U                                       /*!< ECLIC 
 121:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 122:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #define ECLIC_NON_VECTOR_INTERRUPT             0x0                                      /*!< Non-Ve
 123:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #define ECLIC_VECTOR_INTERRUPT                 0x1                                      /*!< Vector
 124:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 125:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /**\brief ECLIC Trigger Enum for different Trigger Type */
 126:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** typedef enum ECLIC_TRIGGER {
 127:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     ECLIC_LEVEL_TRIGGER = 0x0,          /*!< Level Triggerred, trig[0] = 0 */
 128:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     ECLIC_POSTIVE_EDGE_TRIGGER = 0x1,   /*!< Postive/Rising Edge Triggered, trig[0] = 1, trig[1] = 
 129:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     ECLIC_NEGTIVE_EDGE_TRIGGER = 0x3,   /*!< Negtive/Falling Edge Triggered, trig[0] = 1, trig[1] =
 130:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     ECLIC_MAX_TRIGGER = 0x3             /*!< MAX Supported Trigger Mode */
 131:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** } ECLIC_TRIGGER_Type;
 132:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 133:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #ifndef __ECLIC_BASEADDR
 134:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /* Base address of ECLIC(__ECLIC_BASEADDR) should be defined in <Device.h> */
 135:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #error "__ECLIC_BASEADDR is not defined, please check!"
 136:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #endif
 137:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 138:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #ifndef __ECLIC_INTCTLBITS
 139:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /* Define __ECLIC_INTCTLBITS to get via ECLIC->INFO if not defined */
 140:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #define __ECLIC_INTCTLBITS                  (__ECLIC_GetInfoCtlbits())
 141:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #endif
 142:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 143:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /* ECLIC Memory mapping of Device */
 144:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #define ECLIC_BASE                          __ECLIC_BASEADDR                            /*!< ECLIC 
 145:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #define ECLIC                               ((CLIC_Type *) ECLIC_BASE)                  /*!< CLIC c
 146:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 147:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /** @} */ /* end of group NMSIS_Core_ECLIC_Registers */
 148:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 149:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /* ##########################   ECLIC functions  #################################### */
 150:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /**
 151:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \defgroup   NMSIS_Core_IntExc        Interrupts and Exceptions
 152:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \brief Functions that manage interrupts and exceptions via the ECLIC.
 153:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  *
 154:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * @{
 155:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
 156:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 157:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /**
 158:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \brief  Definition of IRQn numbers
 159:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \details
 160:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * The core interrupt enumeration names for IRQn values are defined in the file <b><Device>.h</b>.
 161:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - Interrupt ID(IRQn) from 0 to 18 are reserved for core internal interrupts.
 162:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - Interrupt ID(IRQn) start from 19 represent device-specific external interrupts.
 163:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - The first device-specific interrupt has the IRQn value 19.
 164:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  *
 165:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * The table below describes the core interrupt names and their availability in various Nuclei Core
 166:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
 167:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /* The following enum IRQn definition in this file
 168:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * is only used for doxygen documentation generation,
 169:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * The <Device>.h is the real file to define it by vendor
 170:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
 171:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #if defined(__ONLY_FOR_DOXYGEN_DOCUMENT_GENERATION__)
 172:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** typedef enum IRQn {
 173:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     /* ========= Nuclei N/NX Core Specific Interrupt Numbers  =========== */
 174:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     /* Core Internal Interrupt IRQn definitions */
 175:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     Reserved0_IRQn            =   0,              /*!<  Internal reserved */
 176:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     Reserved1_IRQn            =   1,              /*!<  Internal reserved */
 177:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     Reserved2_IRQn            =   2,              /*!<  Internal reserved */
 178:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     CLIC_INT_SFT              =   3,              /*!<  System Timer SW interrupt */
 179:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     Reserved3_IRQn            =   4,              /*!<  Internal reserved */
 180:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     Reserved4_IRQn            =   5,              /*!<  Internal reserved */
 181:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     Reserved5_IRQn            =   6,              /*!<  Internal reserved */
 182:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     CLIC_INT_TMR              =   7,              /*!<  System Timer Interrupt */
 183:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     Reserved6_IRQn            =   8,              /*!<  Internal reserved */
 184:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     Reserved7_IRQn            =   9,              /*!<  Internal reserved */
 185:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     Reserved8_IRQn            =  10,              /*!<  Internal reserved */
 186:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     Reserved9_IRQn            =  11,              /*!<  Internal reserved */
 187:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     Reserved10_IRQn           =  12,              /*!<  Internal reserved */
 188:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     Reserved11_IRQn           =  13,              /*!<  Internal reserved */
 189:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     Reserved12_IRQn           =  14,              /*!<  Internal reserved */
 190:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     Reserved13_IRQn           =  15,              /*!<  Internal reserved */
 191:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     Reserved14_IRQn           =  16,              /*!<  Internal reserved */
 192:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     Reserved15_IRQn           =  17,              /*!<  Internal reserved */
 193:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     Reserved16_IRQn           =  18,              /*!<  Internal reserved */
 194:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 195:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     /* ========= Device Specific Interrupt Numbers  =================== */
 196:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     /* ToDo: add here your device specific external interrupt numbers.
 197:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****      * 19~max(NUM_INTERRUPT, 1023) is reserved number for user.
 198:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****      * Maxmum interrupt supported could get from clicinfo.NUM_INTERRUPT.
 199:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****      * According the interrupt handlers defined in startup_Device.S
 200:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****      * eg.: Interrupt for Timer#1       eclic_tim1_handler   ->   TIM1_IRQn */
 201:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     FirstDeviceSpecificInterrupt_IRQn    = 19,    /*!< First Device Specific Interrupt */
 202:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     SOC_INT_MAX,                                  /*!< Number of total interrupts */
 203:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** } IRQn_Type;
 204:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #endif /* __ONLY_FOR_DOXYGEN_DOCUMENT_GENERATION__ */
 205:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 206:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #ifdef NMSIS_ECLIC_VIRTUAL
 207:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #ifndef NMSIS_ECLIC_VIRTUAL_HEADER_FILE
 208:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****         #define NMSIS_ECLIC_VIRTUAL_HEADER_FILE "nmsis_eclic_virtual.h"
 209:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #endif
 210:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #include NMSIS_ECLIC_VIRTUAL_HEADER_FILE
 211:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #else
 212:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #define ECLIC_SetCfgNlbits            __ECLIC_SetCfgNlbits
 213:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #define ECLIC_GetCfgNlbits            __ECLIC_GetCfgNlbits
 214:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #define ECLIC_GetInfoVer              __ECLIC_GetInfoVer
 215:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #define ECLIC_GetInfoCtlbits          __ECLIC_GetInfoCtlbits
 216:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #define ECLIC_GetInfoNum              __ECLIC_GetInfoNum
 217:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #define ECLIC_SetMth                  __ECLIC_SetMth
 218:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #define ECLIC_GetMth                  __ECLIC_GetMth
 219:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #define ECLIC_EnableIRQ               __ECLIC_EnableIRQ
 220:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #define ECLIC_GetEnableIRQ            __ECLIC_GetEnableIRQ
 221:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #define ECLIC_DisableIRQ              __ECLIC_DisableIRQ
 222:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #define ECLIC_SetPendingIRQ           __ECLIC_SetPendingIRQ
 223:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #define ECLIC_GetPendingIRQ           __ECLIC_GetPendingIRQ
 224:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #define ECLIC_ClearPendingIRQ         __ECLIC_ClearPendingIRQ
 225:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #define ECLIC_SetTrigIRQ              __ECLIC_SetTrigIRQ
 226:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #define ECLIC_GetTrigIRQ              __ECLIC_GetTrigIRQ
 227:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #define ECLIC_SetShvIRQ               __ECLIC_SetShvIRQ
 228:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #define ECLIC_GetShvIRQ               __ECLIC_GetShvIRQ
 229:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #define ECLIC_SetCtrlIRQ              __ECLIC_SetCtrlIRQ
 230:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #define ECLIC_GetCtrlIRQ              __ECLIC_GetCtrlIRQ
 231:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #define ECLIC_SetLevelIRQ             __ECLIC_SetLevelIRQ
 232:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #define ECLIC_GetLevelIRQ             __ECLIC_GetLevelIRQ
 233:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #define ECLIC_SetPriorityIRQ          __ECLIC_SetPriorityIRQ
 234:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #define ECLIC_GetPriorityIRQ          __ECLIC_GetPriorityIRQ
 235:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 236:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #endif /* NMSIS_ECLIC_VIRTUAL */
 237:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 238:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #ifdef NMSIS_VECTAB_VIRTUAL
 239:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #ifndef NMSIS_VECTAB_VIRTUAL_HEADER_FILE
 240:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****         #define NMSIS_VECTAB_VIRTUAL_HEADER_FILE "nmsis_vectab_virtual.h"
 241:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #endif
 242:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #include NMSIS_VECTAB_VIRTUAL_HEADER_FILE
 243:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #else
 244:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #define ECLIC_SetVector              __ECLIC_SetVector
 245:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     #define ECLIC_GetVector              __ECLIC_GetVector
 246:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** #endif  /* (NMSIS_VECTAB_VIRTUAL) */
 247:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 248:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /**
 249:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \brief  Set nlbits value
 250:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \details
 251:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * This function set the nlbits value of CLICCFG register.
 252:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \param [in]    nlbits    nlbits value
 253:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \remarks
 254:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - nlbits is used to set the width of level in the CLICINTCTL[i].
 255:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \sa
 256:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - \ref ECLIC_GetCfgNlbits
 257:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
 258:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** __STATIC_FORCEINLINE void __ECLIC_SetCfgNlbits(uint32_t nlbits)
 259:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** {
 260:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     ECLIC->CFG &= ~CLIC_CLICCFG_NLBIT_Msk;
 261:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     ECLIC->CFG |= (uint8_t)((nlbits <<CLIC_CLICCFG_NLBIT_Pos) & CLIC_CLICCFG_NLBIT_Msk);
 262:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 263:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 264:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /**
 265:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \brief  Get nlbits value
 266:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \details
 267:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * This function get the nlbits value of CLICCFG register.
 268:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \return   nlbits value of CLICCFG register
 269:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \remarks
 270:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - nlbits is used to set the width of level in the CLICINTCTL[i].
 271:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \sa
 272:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - \ref ECLIC_SetCfgNlbits
 273:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
 274:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** __STATIC_FORCEINLINE uint32_t __ECLIC_GetCfgNlbits(void)
 275:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** {
 276:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     return ((uint32_t)((ECLIC->CFG & CLIC_CLICCFG_NLBIT_Msk) >> CLIC_CLICCFG_NLBIT_Pos));
 277:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 278:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 279:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /**
 280:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \brief  Get the ECLIC version number
 281:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \details
 282:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * This function gets the hardware version information from CLICINFO register.
 283:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \return   hardware version number in CLICINFO register.
 284:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \remarks
 285:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - This function gets harware version information from CLICINFO register.
 286:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - Bit 20:17 for architecture version, bit 16:13 for implementation version.
 287:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \sa
 288:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - \ref ECLIC_GetInfoNum
 289:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** */
 290:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** __STATIC_FORCEINLINE uint32_t __ECLIC_GetInfoVer(void)
 291:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** {
 292:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     return ((uint32_t)((ECLIC->INFO & CLIC_CLICINFO_VER_Msk) >> CLIC_CLICINFO_VER_Pos));
 293:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 294:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 295:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /**
 296:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \brief  Get CLICINTCTLBITS
 297:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \details
 298:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * This function gets CLICINTCTLBITS from CLICINFO register.
 299:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \return  CLICINTCTLBITS from CLICINFO register.
 300:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \remarks
 301:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - In the CLICINTCTL[i] registers, with 2 <= CLICINTCTLBITS <= 8.
 302:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - The implemented bits are kept left-justified in the most-significant bits of each 8-bit
 303:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  *   CLICINTCTL[I] register, with the lower unimplemented bits treated as hardwired to 1.
 304:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \sa
 305:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - \ref ECLIC_GetInfoNum
 306:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
 307:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** __STATIC_FORCEINLINE uint32_t __ECLIC_GetInfoCtlbits(void)
 308:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** {
 309:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     return ((uint32_t)((ECLIC->INFO & CLIC_CLICINFO_CTLBIT_Msk) >> CLIC_CLICINFO_CTLBIT_Pos));
 310:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 311:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 312:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /**
 313:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \brief  Get number of maximum interrupt inputs supported
 314:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \details
 315:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * This function gets number of maximum interrupt inputs supported from CLICINFO register.
 316:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \return  number of maximum interrupt inputs supported from CLICINFO register.
 317:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \remarks
 318:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - This function gets number of maximum interrupt inputs supported from CLICINFO register.
 319:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - The num_interrupt field specifies the actual number of maximum interrupt inputs supported in t
 320:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \sa
 321:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - \ref ECLIC_GetInfoCtlbits
 322:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
 323:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** __STATIC_FORCEINLINE uint32_t __ECLIC_GetInfoNum(void)
 324:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** {
 325:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     return ((uint32_t)((ECLIC->INFO & CLIC_CLICINFO_NUM_Msk) >> CLIC_CLICINFO_NUM_Pos));
 326:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 327:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 328:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /**
 329:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \brief  Set Machine Mode Interrupt Level Threshold
 330:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \details
 331:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * This function sets machine mode interrupt level threshold.
 332:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \param [in]  mth       Interrupt Level Threshold.
 333:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \sa
 334:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - \ref ECLIC_GetMth
 335:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
 336:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** __STATIC_FORCEINLINE void __ECLIC_SetMth(uint8_t mth)
 337:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** {
 338:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     ECLIC->MTH = mth;
  80              		.loc 3 338 5
  81              		.loc 3 338 16 is_stmt 0
  82 0000 B70700D2 		li	a5,-771751936
  83 0004 A385A700 		sb	a0,11(a5)
  84              	.LVL3:
  85              	.LBE53:
  86              	.LBE52:
  69:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** }
  87              		.loc 1 69 1
  88 0008 8280     		ret
  89              		.cfi_endproc
  90              	.LFE367:
  92              		.section	.text.eclic_priority_group_set,"ax",@progbits
  93              		.align	1
  94              		.globl	eclic_priority_group_set
  96              	eclic_priority_group_set:
  97              	.LFB368:
  70:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** 
  71:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** /*!
  72:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \brief      set the priority group
  73:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[in]  prigroup: specify the priority group
  74:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****       \arg        ECLIC_PRIGROUP_LEVEL0_PRIO4
  75:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****       \arg        ECLIC_PRIGROUP_LEVEL1_PRIO3
  76:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****       \arg        ECLIC_PRIGROUP_LEVEL2_PRIO2
  77:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****       \arg        ECLIC_PRIGROUP_LEVEL3_PRIO1
  78:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****       \arg        ECLIC_PRIGROUP_LEVEL4_PRIO0
  79:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[out] none
  80:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \retval     none
  81:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** */
  82:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** void eclic_priority_group_set(uint8_t prigroup)
  83:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** {
  98              		.loc 1 83 1 is_stmt 1
  99              		.cfi_startproc
 100              	.LVL4:
  84:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     ECLIC_SetCfgNlbits(prigroup);
 101              		.loc 1 84 5
 102              	.LBB54:
 103              	.LBB55:
 260:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     ECLIC->CFG |= (uint8_t)((nlbits <<CLIC_CLICCFG_NLBIT_Pos) & CLIC_CLICCFG_NLBIT_Msk);
 104              		.loc 3 260 5
 260:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     ECLIC->CFG |= (uint8_t)((nlbits <<CLIC_CLICCFG_NLBIT_Pos) & CLIC_CLICCFG_NLBIT_Msk);
 105              		.loc 3 260 16 is_stmt 0
 106 0000 B70700D2 		li	a5,-771751936
 107 0004 03C70700 		lbu	a4,0(a5)
 261:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 108              		.loc 3 261 37
 109 0008 0605     		slli	a0,a0,1
 110              	.LVL5:
 261:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 111              		.loc 3 261 19
 112 000a 7989     		andi	a0,a0,30
 260:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     ECLIC->CFG |= (uint8_t)((nlbits <<CLIC_CLICCFG_NLBIT_Pos) & CLIC_CLICCFG_NLBIT_Msk);
 113              		.loc 3 260 16
 114 000c 1377170E 		andi	a4,a4,225
 115 0010 2380E700 		sb	a4,0(a5)
 261:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 116              		.loc 3 261 5 is_stmt 1
 261:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 117              		.loc 3 261 16 is_stmt 0
 118 0014 03C70700 		lbu	a4,0(a5)
 119 0018 1377F70F 		andi	a4,a4,0xff
 120 001c 598D     		or	a0,a0,a4
 121 001e 2380A700 		sb	a0,0(a5)
 122              	.LBE55:
 123              	.LBE54:
  85:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** }
 124              		.loc 1 85 1
 125 0022 8280     		ret
 126              		.cfi_endproc
 127              	.LFE368:
 129              		.section	.text.eclic_irq_enable,"ax",@progbits
 130              		.align	1
 131              		.globl	eclic_irq_enable
 133              	eclic_irq_enable:
 134              	.LFB369:
  86:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** 
  87:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** /*!
  88:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \brief      enable the interrupt request
  89:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[in]  source: interrupt request, detailed in IRQn_Type
  90:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[in]  level: the level needed to set (maximum is 15, refer to the priority group)
  91:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[in]  priority: the priority needed to set (maximum is 15, refer to the priority group)
  92:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[out] none
  93:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \retval     none
  94:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** */
  95:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** void eclic_irq_enable(IRQn_Type source, uint8_t level, uint8_t priority)
  96:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** {
 135              		.loc 1 96 1 is_stmt 1
 136              		.cfi_startproc
 137              	.LVL6:
  97:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     /* level trigger, non-vector mode */
  98:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     ECLIC_SetLevelIRQ(source, level);
 138              		.loc 1 98 5
 139              	.LBB56:
 140              	.LBB57:
 339:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 340:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 341:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /**
 342:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \brief  Get Machine Mode Interrupt Level Threshold
 343:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \details
 344:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * This function gets machine mode interrupt level threshold.
 345:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \return       Interrupt Level Threshold.
 346:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \sa
 347:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - \ref ECLIC_SetMth
 348:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
 349:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** __STATIC_FORCEINLINE uint8_t __ECLIC_GetMth(void)
 350:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** {
 351:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     return (ECLIC->MTH);
 352:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 353:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 354:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 355:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /**
 356:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \brief  Enable a specific interrupt
 357:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \details
 358:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * This function enables the specific interrupt \em IRQn.
 359:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \param [in]  IRQn  Interrupt number
 360:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \remarks
 361:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - IRQn must not be negative.
 362:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \sa
 363:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - \ref ECLIC_DisableIRQ
 364:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
 365:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** __STATIC_FORCEINLINE void __ECLIC_EnableIRQ(IRQn_Type IRQn)
 366:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** {
 367:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     ECLIC->CTRL[IRQn].INTIE |= CLIC_INTIE_IE_Msk;
 368:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 369:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 370:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /**
 371:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \brief  Get a specific interrupt enable status
 372:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \details
 373:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * This function returns the interrupt enable status for the specific interrupt \em IRQn.
 374:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \param [in]  IRQn  Interrupt number
 375:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \returns
 376:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - 0  Interrupt is not enabled
 377:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - 1  Interrupt is pending
 378:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \remarks
 379:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - IRQn must not be negative.
 380:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \sa
 381:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - \ref ECLIC_EnableIRQ
 382:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - \ref ECLIC_DisableIRQ
 383:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
 384:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** __STATIC_FORCEINLINE uint32_t __ECLIC_GetEnableIRQ(IRQn_Type IRQn)
 385:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** {
 386:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     return((uint32_t) (ECLIC->CTRL[IRQn].INTIE) & CLIC_INTIE_IE_Msk);
 387:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 388:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 389:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /**
 390:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \brief  Disable a specific interrupt
 391:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \details
 392:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * This function disables the specific interrupt \em IRQn.
 393:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \param [in]  IRQn  Number of the external interrupt to disable
 394:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \remarks
 395:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - IRQn must not be negative.
 396:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \sa
 397:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - \ref ECLIC_EnableIRQ
 398:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
 399:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** __STATIC_FORCEINLINE void __ECLIC_DisableIRQ(IRQn_Type IRQn)
 400:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** {
 401:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     ECLIC->CTRL[IRQn].INTIE &= ~CLIC_INTIE_IE_Msk;
 402:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 403:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 404:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /**
 405:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \brief  Get the pending specific interrupt
 406:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \details
 407:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * This function returns the pending status of the specific interrupt \em IRQn.
 408:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \param [in]      IRQn  Interrupt number
 409:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \returns
 410:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - 0  Interrupt is not pending
 411:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - 1  Interrupt is pending
 412:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \remarks
 413:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - IRQn must not be negative.
 414:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \sa
 415:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - \ref ECLIC_SetPendingIRQ
 416:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - \ref ECLIC_ClearPendingIRQ
 417:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
 418:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** __STATIC_FORCEINLINE int32_t __ECLIC_GetPendingIRQ(IRQn_Type IRQn)
 419:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** {
 420:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     return((uint32_t)(ECLIC->CTRL[IRQn].INTIP) & CLIC_INTIP_IP_Msk);
 421:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 422:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 423:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /**
 424:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \brief  Set a specific interrupt to pending
 425:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \details
 426:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * This function sets the pending bit for the specific interrupt \em IRQn.
 427:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \param [in]      IRQn  Interrupt number
 428:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \remarks
 429:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - IRQn must not be negative.
 430:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \sa
 431:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - \ref ECLIC_GetPendingIRQ
 432:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - \ref ECLIC_ClearPendingIRQ
 433:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
 434:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** __STATIC_FORCEINLINE void __ECLIC_SetPendingIRQ(IRQn_Type IRQn)
 435:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** {
 436:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     ECLIC->CTRL[IRQn].INTIP |= CLIC_INTIP_IP_Msk;
 437:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 438:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 439:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /**
 440:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \brief  Clear a specific interrupt from pending
 441:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \details
 442:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * This function removes the pending state of the specific interrupt \em IRQn.
 443:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \em IRQn cannot be a negative number.
 444:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \param [in]      IRQn  Interrupt number
 445:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \remarks
 446:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - IRQn must not be negative.
 447:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \sa
 448:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - \ref ECLIC_SetPendingIRQ
 449:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - \ref ECLIC_GetPendingIRQ
 450:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
 451:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** __STATIC_FORCEINLINE void __ECLIC_ClearPendingIRQ(IRQn_Type IRQn)
 452:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** {
 453:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     ECLIC->CTRL[IRQn].INTIP &= ~ CLIC_INTIP_IP_Msk;
 454:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 455:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 456:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /**
 457:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \brief  Set trigger mode and polarity for a specific interrupt
 458:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \details
 459:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * This function set trigger mode and polarity of the specific interrupt \em IRQn.
 460:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \param [in]      IRQn  Interrupt number
 461:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \param [in]      trig
 462:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  *                   - 00  level trigger, \ref ECLIC_LEVEL_TRIGGER
 463:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  *                   - 01  positive edge trigger, \ref ECLIC_POSTIVE_EDGE_TRIGGER
 464:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  *                   - 02  level trigger, \ref ECLIC_LEVEL_TRIGGER
 465:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  *                   - 03  negative edge trigger, \ref ECLIC_NEGTIVE_EDGE_TRIGGER
 466:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \remarks
 467:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - IRQn must not be negative.
 468:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  *
 469:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \sa
 470:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - \ref ECLIC_GetTrigIRQ
 471:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
 472:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** __STATIC_FORCEINLINE void __ECLIC_SetTrigIRQ(IRQn_Type IRQn, uint32_t trig)
 473:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** {
 474:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     ECLIC->CTRL[IRQn].INTATTR &= ~CLIC_INTATTR_TRIG_Msk;
 475:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     ECLIC->CTRL[IRQn].INTATTR |= (uint8_t)(trig<<CLIC_INTATTR_TRIG_Pos);
 476:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 477:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 478:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /**
 479:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \brief  Get trigger mode and polarity for a specific interrupt
 480:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \details
 481:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * This function get trigger mode and polarity of the specific interrupt \em IRQn.
 482:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \param [in]      IRQn  Interrupt number
 483:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \return
 484:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  *                 - 00  level trigger, \ref ECLIC_LEVEL_TRIGGER
 485:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  *                 - 01  positive edge trigger, \ref ECLIC_POSTIVE_EDGE_TRIGGER
 486:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  *                 - 02  level trigger, \ref ECLIC_LEVEL_TRIGGER
 487:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  *                 - 03  negative edge trigger, \ref ECLIC_NEGTIVE_EDGE_TRIGGER
 488:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \remarks
 489:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  *     - IRQn must not be negative.
 490:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \sa
 491:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  *     - \ref ECLIC_SetTrigIRQ
 492:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
 493:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** __STATIC_FORCEINLINE uint32_t __ECLIC_GetTrigIRQ(IRQn_Type IRQn)
 494:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** {
 495:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     return ((int32_t)(((ECLIC->CTRL[IRQn].INTATTR) & CLIC_INTATTR_TRIG_Msk)>>CLIC_INTATTR_TRIG_Pos)
 496:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 497:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 498:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /**
 499:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \brief  Set interrupt working mode for a specific interrupt
 500:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \details
 501:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * This function set selective hardware vector or non-vector working mode of the specific interrupt
 502:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \param [in]      IRQn  Interrupt number
 503:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \param [in]      shv
 504:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  *                        - 0  non-vector mode, \ref ECLIC_NON_VECTOR_INTERRUPT
 505:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  *                        - 1  vector mode, \ref ECLIC_VECTOR_INTERRUPT
 506:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \remarks
 507:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - IRQn must not be negative.
 508:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \sa
 509:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - \ref ECLIC_GetShvIRQ
 510:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
 511:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** __STATIC_FORCEINLINE void __ECLIC_SetShvIRQ(IRQn_Type IRQn, uint32_t shv)
 512:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** {
 513:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     ECLIC->CTRL[IRQn].INTATTR &= ~CLIC_INTATTR_SHV_Msk;
 514:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     ECLIC->CTRL[IRQn].INTATTR |= (uint8_t)(shv<<CLIC_INTATTR_SHV_Pos);
 515:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 516:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 517:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /**
 518:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \brief  Get interrupt working mode for a specific interrupt
 519:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \details
 520:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * This function get selective hardware vector or non-vector working mode of the specific interrupt
 521:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \param [in]      IRQn  Interrupt number
 522:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \return       shv
 523:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  *                        - 0  non-vector mode, \ref ECLIC_NON_VECTOR_INTERRUPT
 524:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  *                        - 1  vector mode, \ref ECLIC_VECTOR_INTERRUPT
 525:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \remarks
 526:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - IRQn must not be negative.
 527:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \sa
 528:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - \ref ECLIC_SetShvIRQ
 529:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
 530:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** __STATIC_FORCEINLINE uint32_t __ECLIC_GetShvIRQ(IRQn_Type IRQn)
 531:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** {
 532:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     return ((int32_t)(((ECLIC->CTRL[IRQn].INTATTR) & CLIC_INTATTR_SHV_Msk)>>CLIC_INTATTR_SHV_Pos));
 533:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 534:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 535:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /**
 536:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \brief  Modify ECLIC Interrupt Input Control Register for a specific interrupt
 537:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \details
 538:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * This function modify ECLIC Interrupt Input Control(CLICINTCTL[i]) register of the specific inter
 539:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \param [in]      IRQn  Interrupt number
 540:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \param [in]      intctrl  Set value for CLICINTCTL[i] register
 541:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \remarks
 542:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - IRQn must not be negative.
 543:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \sa
 544:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - \ref ECLIC_GetCtrlIRQ
 545:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
 546:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** __STATIC_FORCEINLINE void __ECLIC_SetCtrlIRQ(IRQn_Type IRQn, uint8_t intctrl)
 547:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** {
 548:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     ECLIC->CTRL[IRQn].INTCTRL = intctrl;
 549:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 550:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 551:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /**
 552:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \brief  Get ECLIC Interrupt Input Control Register value for a specific interrupt
 553:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \details
 554:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * This function modify ECLIC Interrupt Input Control register of the specific interrupt \em IRQn.
 555:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \param [in]      IRQn  Interrupt number
 556:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \return       value of ECLIC Interrupt Input Control register
 557:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \remarks
 558:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - IRQn must not be negative.
 559:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \sa
 560:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - \ref ECLIC_SetCtrlIRQ
 561:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
 562:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** __STATIC_FORCEINLINE uint8_t __ECLIC_GetCtrlIRQ(IRQn_Type IRQn)
 563:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** {
 564:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     return (ECLIC->CTRL[IRQn].INTCTRL);
 565:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 566:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 567:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /**
 568:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \brief  Set ECLIC Interrupt level of a specific interrupt
 569:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \details
 570:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * This function set interrupt level of the specific interrupt \em IRQn.
 571:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \param [in]      IRQn  Interrupt number
 572:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \param [in]      lvl_abs   Interrupt level
 573:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \remarks
 574:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - IRQn must not be negative.
 575:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - If lvl_abs to be set is larger than the max level allowed, it will be force to be max level.
 576:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - When you set level value you need use clciinfo.nlbits to get the width of level.
 577:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  *   Then we could know the maximum of level. CLICINTCTLBITS is how many total bits are
 578:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  *   present in the CLICINTCTL register.
 579:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \sa
 580:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - \ref ECLIC_GetLevelIRQ
 581:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
 582:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** __STATIC_FORCEINLINE void __ECLIC_SetLevelIRQ(IRQn_Type IRQn, uint8_t lvl_abs)
 583:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** {
 584:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     uint8_t nlbits = __ECLIC_GetCfgNlbits();
 141              		.loc 3 584 5
 142              	.LBB58:
 143              	.LBB59:
 276:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 144              		.loc 3 276 5
 276:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 145              		.loc 3 276 30 is_stmt 0
 146 0000 370800D2 		li	a6,-771751936
 147 0004 83460800 		lbu	a3,0(a6)
 148 0008 0A05     		slli	a0,a0,2
 149              	.LVL7:
 276:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 150              		.loc 3 276 13
 151 000a 8582     		srli	a3,a3,1
 152 000c BD8A     		andi	a3,a3,15
 153              	.LVL8:
 154              	.LBE59:
 155              	.LBE58:
 585:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     uint8_t intctlbits = (uint8_t)__ECLIC_INTCTLBITS;
 156              		.loc 3 585 5 is_stmt 1
 586:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 587:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     if (nlbits == 0) {
 157              		.loc 3 587 5
 158              		.loc 3 587 8 is_stmt 0
 159 000e 9DCE     		beq	a3,zero,.L6
 588:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****         return;
 589:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     }
 590:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 591:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     if (nlbits > intctlbits) {
 160              		.loc 3 591 5 is_stmt 1
 161              	.LBB60:
 162              	.LBB61:
 564:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 163              		.loc 3 564 30 is_stmt 0
 164 0010 8567     		li	a5,4096
 165 0012 2A98     		add	a6,a6,a0
 166 0014 3E98     		add	a6,a6,a5
 167 0016 83473800 		lbu	a5,3(a6)
 168 001a 1147     		li	a4,4
 169 001c B3D6E60A 		minu	a3,a3,a4
 170              	.LVL9:
 171              	.LBE61:
 172              	.LBE60:
 592:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****         nlbits = intctlbits;
 593:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     }
 594:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     uint8_t maxlvl = ((1 << nlbits) - 1);
 173              		.loc 3 594 5 is_stmt 1
 595:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     if (lvl_abs > maxlvl) {
 174              		.loc 3 595 5
 596:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****         lvl_abs = maxlvl;
 597:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     }
 598:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     uint8_t lvl = lvl_abs << (ECLIC_MAX_NLBITS - nlbits);
 175              		.loc 3 598 5
 599:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     uint8_t cur_ctrl = __ECLIC_GetCtrlIRQ(IRQn);
 176              		.loc 3 599 5
 177              	.LBB63:
 178              	.LBB62:
 564:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 179              		.loc 3 564 5
 180              	.LBE62:
 181              	.LBE63:
 600:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     cur_ctrl = cur_ctrl << nlbits;
 182              		.loc 3 600 5
 601:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     cur_ctrl = cur_ctrl >> nlbits;
 183              		.loc 3 601 5
 602:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     __ECLIC_SetCtrlIRQ(IRQn, (cur_ctrl | lvl));
 184              		.loc 3 602 5
 594:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     if (lvl_abs > maxlvl) {
 185              		.loc 3 594 26 is_stmt 0
 186 0020 3317D028 		bset	a4,x0,a3
 594:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     if (lvl_abs > maxlvl) {
 187              		.loc 3 594 13
 188 0024 7D17     		addi	a4,a4,-1
 598:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     uint8_t cur_ctrl = __ECLIC_GetCtrlIRQ(IRQn);
 189              		.loc 3 598 27
 190 0026 1377F70F 		andi	a4,a4,0xff
 600:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     cur_ctrl = cur_ctrl >> nlbits;
 191              		.loc 3 600 25
 192 002a B397D700 		sll	a5,a5,a3
 193              	.LVL10:
 598:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     uint8_t cur_ctrl = __ECLIC_GetCtrlIRQ(IRQn);
 194              		.loc 3 598 27
 195 002e 3357B70A 		minu	a4,a4,a1
 598:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     uint8_t cur_ctrl = __ECLIC_GetCtrlIRQ(IRQn);
 196              		.loc 3 598 48
 197 0032 A145     		li	a1,8
 198              	.LVL11:
 199 0034 958D     		sub	a1,a1,a3
 601:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     __ECLIC_SetCtrlIRQ(IRQn, (cur_ctrl | lvl));
 200              		.loc 3 601 25
 201 0036 93F7F70F 		andi	a5,a5,0xff
 598:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     uint8_t cur_ctrl = __ECLIC_GetCtrlIRQ(IRQn);
 202              		.loc 3 598 27
 203 003a 3317B700 		sll	a4,a4,a1
 601:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     __ECLIC_SetCtrlIRQ(IRQn, (cur_ctrl | lvl));
 204              		.loc 3 601 25
 205 003e B3D6D740 		sra	a3,a5,a3
 206              	.LVL12:
 207              		.loc 3 602 5
 208 0042 558F     		or	a4,a4,a3
 209 0044 1377F70F 		andi	a4,a4,0xff
 210              	.LVL13:
 211              	.LBB64:
 212              	.LBB65:
 548:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 213              		.loc 3 548 5 is_stmt 1
 548:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 214              		.loc 3 548 31 is_stmt 0
 215 0048 A301E800 		sb	a4,3(a6)
 216              	.LVL14:
 217              	.L6:
 218              	.LBE65:
 219              	.LBE64:
 220              	.LBE57:
 221              	.LBE56:
  99:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     ECLIC_SetPriorityIRQ(source, priority);
 222              		.loc 1 99 5 is_stmt 1
 223              	.LBB66:
 224              	.LBB67:
 603:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 604:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 605:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /**
 606:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \brief  Get ECLIC Interrupt level of a specific interrupt
 607:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \details
 608:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * This function get interrupt level of the specific interrupt \em IRQn.
 609:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \param [in]      IRQn  Interrupt number
 610:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \return         Interrupt level
 611:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \remarks
 612:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - IRQn must not be negative.
 613:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \sa
 614:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - \ref ECLIC_SetLevelIRQ
 615:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
 616:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** __STATIC_FORCEINLINE uint8_t __ECLIC_GetLevelIRQ(IRQn_Type IRQn)
 617:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** {
 618:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     uint8_t nlbits = __ECLIC_GetCfgNlbits();
 619:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     uint8_t intctlbits = (uint8_t)__ECLIC_INTCTLBITS;
 620:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 621:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     if (nlbits == 0) {
 622:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****         return 0;
 623:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     }
 624:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 625:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     if (nlbits > intctlbits) {
 626:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****         nlbits = intctlbits;
 627:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     }
 628:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     uint8_t intctrl = __ECLIC_GetCtrlIRQ(IRQn);
 629:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     uint8_t lvl_abs = intctrl >> (ECLIC_MAX_NLBITS - nlbits);
 630:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     return lvl_abs;
 631:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 632:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** 
 633:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** /**
 634:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \brief  Get ECLIC Interrupt priority of a specific interrupt
 635:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \details
 636:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * This function get interrupt priority of the specific interrupt \em IRQn.
 637:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \param [in]      IRQn  Interrupt number
 638:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \param [in]      pri   Interrupt priority
 639:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \remarks
 640:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - IRQn must not be negative.
 641:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - If pri to be set is larger than the max priority allowed, it will be force to be max priority.
 642:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - Priority width is CLICINTCTLBITS minus clciinfo.nlbits if clciinfo.nlbits
 643:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  *   is less than CLICINTCTLBITS. Otherwise priority width is 0.
 644:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * \sa
 645:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  * - \ref ECLIC_GetPriorityIRQ
 646:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****  */
 647:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** __STATIC_FORCEINLINE void __ECLIC_SetPriorityIRQ(IRQn_Type IRQn, uint8_t pri)
 648:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** {
 649:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     uint8_t nlbits = __ECLIC_GetCfgNlbits();
 225              		.loc 3 649 5
 226              	.LBB68:
 227              	.LBB69:
 276:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 228              		.loc 3 276 5
 276:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 229              		.loc 3 276 30 is_stmt 0
 230 004c B70600D2 		li	a3,-771751936
 231 0050 03C70600 		lbu	a4,0(a3)
 232 0054 1377F70F 		andi	a4,a4,0xff
 276:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 233              		.loc 3 276 13
 234 0058 0583     		srli	a4,a4,1
 235              	.LVL15:
 236              	.LBE69:
 237              	.LBE68:
 650:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     uint8_t intctlbits = (uint8_t)__ECLIC_INTCTLBITS;
 238              		.loc 3 650 5 is_stmt 1
 651:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****     if (nlbits < intctlbits) {
 239              		.loc 3 651 5
 240              		.loc 3 651 8 is_stmt 0
 241 005a 9377C700 		andi	a5,a4,12
 242 005e B1E3     		bne	a5,zero,.L7
 243              	.LBB71:
 244              	.LBB70:
 276:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 245              		.loc 3 276 13
 246 0060 3D8B     		andi	a4,a4,15
 247              	.LVL16:
 248              	.LBE70:
 249              	.LBE71:
 250              	.LBB72:
 652:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****         uint8_t maxpri = ((1 << (intctlbits - nlbits)) - 1);
 251              		.loc 3 652 9 is_stmt 1
 653:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****         if (pri > maxpri) {
 252              		.loc 3 653 9
 654:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****             pri = maxpri;
 655:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****         }
 656:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****         pri = pri << (ECLIC_MAX_NLBITS - intctlbits);
 253              		.loc 3 656 9
 652:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****         if (pri > maxpri) {
 254              		.loc 3 652 45 is_stmt 0
 255 0062 9147     		li	a5,4
 256 0064 998F     		sub	a5,a5,a4
 257              	.LVL17:
 652:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****         if (pri > maxpri) {
 258              		.loc 3 652 30
 259 0066 B317F028 		bset	a5,x0,a5
 260              	.LVL18:
 652:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****         if (pri > maxpri) {
 261              		.loc 3 652 17
 262 006a FD17     		addi	a5,a5,-1
 263              		.loc 3 656 19
 264 006c 93F7F70F 		andi	a5,a5,0xff
 265 0070 B3D7C70A 		minu	a5,a5,a2
 266 0074 AA96     		add	a3,a3,a0
 267 0076 13964700 		slli	a2,a5,4
 268              	.LVL19:
 657:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****         uint8_t mask = ((uint8_t)(-1)) >> intctlbits;
 269              		.loc 3 657 9 is_stmt 1
 658:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****         pri = pri | mask;
 270              		.loc 3 658 9
 659:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****         uint8_t cur_ctrl = __ECLIC_GetCtrlIRQ(IRQn);
 271              		.loc 3 659 9
 272              	.LBB73:
 273              	.LBB74:
 564:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 274              		.loc 3 564 5
 564:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 275              		.loc 3 564 30 is_stmt 0
 276 007a 8567     		li	a5,4096
 277 007c BE96     		add	a3,a3,a5
 278 007e 83C73600 		lbu	a5,3(a3)
 279              	.LBE74:
 280              	.LBE73:
 660:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****         cur_ctrl = cur_ctrl >> (ECLIC_MAX_NLBITS - nlbits);
 281              		.loc 3 660 50
 282 0082 A145     		li	a1,8
 283 0084 3387E540 		sub	a4,a1,a4
 284              	.LVL20:
 285              	.LBB76:
 286              	.LBB75:
 564:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 287              		.loc 3 564 30
 288 0088 93F7F70F 		andi	a5,a5,0xff
 289              	.LVL21:
 290              	.LBE75:
 291              	.LBE76:
 292              		.loc 3 660 9 is_stmt 1
 661:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****         cur_ctrl = cur_ctrl << (ECLIC_MAX_NLBITS - nlbits);
 293              		.loc 3 661 9
 662:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****         __ECLIC_SetCtrlIRQ(IRQn, (cur_ctrl | pri));
 294              		.loc 3 662 9
 660:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****         cur_ctrl = cur_ctrl >> (ECLIC_MAX_NLBITS - nlbits);
 295              		.loc 3 660 29 is_stmt 0
 296 008c B3D7E740 		sra	a5,a5,a4
 297              	.LVL22:
 661:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h ****         cur_ctrl = cur_ctrl << (ECLIC_MAX_NLBITS - nlbits);
 298              		.loc 3 661 29
 299 0090 B397E700 		sll	a5,a5,a4
 300              		.loc 3 662 9
 301 0094 D18F     		or	a5,a5,a2
 302 0096 93E7F700 		ori	a5,a5,15
 303 009a 93F7F70F 		andi	a5,a5,0xff
 304              	.LVL23:
 305              	.LBB77:
 306              	.LBB78:
 548:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 307              		.loc 3 548 5 is_stmt 1
 548:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 308              		.loc 3 548 31 is_stmt 0
 309 009e A381F600 		sb	a5,3(a3)
 310              	.LVL24:
 311              	.L7:
 312              	.LBE78:
 313              	.LBE77:
 314              	.LBE72:
 315              	.LBE67:
 316              	.LBE66:
 100:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     ECLIC_EnableIRQ(source);
 317              		.loc 1 100 5 is_stmt 1
 318              	.LBB79:
 319              	.LBB80:
 367:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 320              		.loc 3 367 5
 367:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 321              		.loc 3 367 29 is_stmt 0
 322 00a2 B71700D2 		li	a5,-771747840
 323 00a6 3E95     		add	a0,a0,a5
 324 00a8 83471500 		lbu	a5,1(a0)
 325 00ac 93F7F70F 		andi	a5,a5,0xff
 326 00b0 93E71700 		ori	a5,a5,1
 327 00b4 A300F500 		sb	a5,1(a0)
 328              	.LVL25:
 329              	.LBE80:
 330              	.LBE79:
 101:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** }
 331              		.loc 1 101 1
 332 00b8 8280     		ret
 333              		.cfi_endproc
 334              	.LFE369:
 336              		.section	.text.eclic_irq_disable,"ax",@progbits
 337              		.align	1
 338              		.globl	eclic_irq_disable
 340              	eclic_irq_disable:
 341              	.LFB370:
 102:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** 
 103:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** /*!
 104:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \brief      disable the interrupt request
 105:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[in]  source: interrupt request, detailed in IRQn_Type
 106:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[out] none
 107:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \retval     none
 108:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** */
 109:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** void eclic_irq_disable(IRQn_Type source)
 110:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** {
 342              		.loc 1 110 1 is_stmt 1
 343              		.cfi_startproc
 344              	.LVL26:
 111:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     ECLIC_DisableIRQ(source);
 345              		.loc 1 111 5
 346              	.LBB81:
 347              	.LBB82:
 401:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 348              		.loc 3 401 5
 349 0000 B70700D2 		li	a5,-771751936
 350 0004 3345F520 		sh2add	a0,a0,a5
 351              	.LVL27:
 401:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_eclic.h **** }
 352              		.loc 3 401 29 is_stmt 0
 353 0008 8567     		li	a5,4096
 354 000a 3E95     		add	a0,a0,a5
 355 000c 83471500 		lbu	a5,1(a0)
 356 0010 93F7E70F 		andi	a5,a5,254
 357 0014 A300F500 		sb	a5,1(a0)
 358              	.LVL28:
 359              	.LBE82:
 360              	.LBE81:
 112:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** }
 361              		.loc 1 112 1
 362 0018 8280     		ret
 363              		.cfi_endproc
 364              	.LFE370:
 366              		.section	.text.eclic_system_reset,"ax",@progbits
 367              		.align	1
 368              		.globl	eclic_system_reset
 370              	eclic_system_reset:
 371              	.LFB371:
 113:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** 
 114:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** /*!
 115:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \brief      reset system
 116:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[in]  none
 117:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \param[out] none
 118:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     \retval     none
 119:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** */
 120:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** void eclic_system_reset(void)
 121:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c **** {
 372              		.loc 1 121 1 is_stmt 1
 373              		.cfi_startproc
 122:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/GD32VW55x_standard_peripheral/Source\gd32vw55x_eclic.c ****     SysTimer_SoftwareReset();
 374              		.loc 1 122 5
 375              	.LBB83:
 376              	.LBB84:
 377              		.file 4 "..\\..\\..\\..\\plf\\riscv\\NMSIS\\Core\\Include/core_feature_timer.h"
   1:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /*
   2:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * Copyright (c) 2019 Nuclei Limited. All rights reserved.
   3:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  *
   4:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * SPDX-License-Identifier: Apache-2.0
   5:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  *
   6:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * not use this file except in compliance with the License.
   8:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * You may obtain a copy of the License at
   9:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  *
  10:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * www.apache.org/licenses/LICENSE-2.0
  11:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  *
  12:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * Unless required by applicable law or agreed to in writing, software
  13:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * See the License for the specific language governing permissions and
  16:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * limitations under the License.
  17:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
  18:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #ifndef __CORE_FEATURE_TIMER_H__
  19:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define __CORE_FEATURE_TIMER_H__
  20:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /*!
  21:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * @file     core_feature_timer.h
  22:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * @brief    System Timer feature API header file for Nuclei N/NX Core
  23:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
  24:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /*
  25:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * System Timer Feature Configuration Macro:
  26:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * 1. __SYSTIMER_PRESENT:  Define whether Private System Timer is present or not.
  27:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  *   * 0: Not present
  28:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  *   * 1: Present
  29:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * 2. __SYSTIMER_BASEADDR:  Define the base address of the System Timer.
  30:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
  31:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #ifdef __cplusplus
  32:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  extern "C" {
  33:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #endif
  34:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
  35:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #include "core_feature_base.h"
  36:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
  37:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #if defined(__SYSTIMER_PRESENT) && (__SYSTIMER_PRESENT == 1)
  38:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /**
  39:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \defgroup NMSIS_Core_SysTimer_Registers     Register Define and Type Definitions Of System Timer
  40:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \ingroup NMSIS_Core_Registers
  41:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \brief   Type definitions and defines for system timer registers.
  42:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  *
  43:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * @{
  44:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
  45:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /**
  46:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \brief  Structure type to access the System Timer (SysTimer).
  47:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \details
  48:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * Structure definition to access the system timer(SysTimer).
  49:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \remarks
  50:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - MSFTRST register is introduced in Nuclei N Core version 1.3(\ref __NUCLEI_N_REV >= 0x0103)
  51:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - MSTOP register is renamed to MTIMECTL register in Nuclei N Core version 1.4(\ref __NUCLEI_N_RE
  52:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - CMPCLREN and CLKSRC bit in MTIMECTL register is introduced in Nuclei N Core version 1.4(\ref _
  53:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
  54:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** typedef struct {
  55:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     __IOM uint64_t MTIMER;                  /*!< Offset: 0x000 (R/W)  System Timer current value 64
  56:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     union {
  57:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****         __IOM uint64_t MTIMERCMP_64;        /*!< Offset: 0x008 (R/W)  System Timer compare Value 64
  58:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****         struct {
  59:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****             __IOM uint32_t MTIMERCMP_lo;    /*!< Offset: 0x008 (R/W)  System Timer compare Value lo
  60:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****             __IOM uint32_t MTIMERCMP_hi;    /*!< Offset: 0x00C (R/W)  System Timer compare Value hi
  61:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****         } MTIMERCMP_32;
  62:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     } MTIMERCMP;
  63:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     __IOM uint32_t RESERVED0[0x3F8];        /*!< Offset: 0x010 - 0xFEC Reserved */
  64:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     __IOM uint32_t MSFTRST;                 /*!< Offset: 0xFF0 (R/W)  System Timer Software Core Re
  65:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     __IOM uint32_t RESERVED1;               /*!< Offset: 0xFF4 Reserved */
  66:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     __IOM uint32_t MTIMECTL;                /*!< Offset: 0xFF8 (R/W)  System Timer Control Register
  67:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     __IOM uint32_t MSIP;                    /*!< Offset: 0xFFC (R/W)  System Timer SW interrupt Reg
  68:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** } SysTimer_Type;
  69:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
  70:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /* Timer Control / Status Register Definitions */
  71:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer_MTIMECTL_TIMESTOP_Pos      0U                                          /*!< SysTic
  72:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer_MTIMECTL_TIMESTOP_Msk      (1UL << SysTimer_MTIMECTL_TIMESTOP_Pos)     /*!< SysTic
  73:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer_MTIMECTL_CMPCLREN_Pos      1U                                          /*!< SysTic
  74:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer_MTIMECTL_CMPCLREN_Msk      (1UL << SysTimer_MTIMECTL_CMPCLREN_Pos)     /*!< SysTic
  75:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer_MTIMECTL_CLKSRC_Pos        2U                                          /*!< SysTic
  76:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer_MTIMECTL_CLKSRC_Msk        (1UL << SysTimer_MTIMECTL_CLKSRC_Pos)       /*!< SysTic
  77:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
  78:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer_MSIP_MSIP_Pos              0U                                          /*!< SysTic
  79:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer_MSIP_MSIP_Msk              (1UL << SysTimer_MSIP_MSIP_Pos)             /*!< SysTic
  80:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
  81:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer_MTIMER_Msk                 (0xFFFFFFFFFFFFFFFFULL)                     /*!< SysTic
  82:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer_MTIMERCMP_Msk              (0xFFFFFFFFFFFFFFFFULL)                     /*!< SysTic
  83:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer_MTIMECTL_Msk               (0xFFFFFFFFUL)                              /*!< SysTic
  84:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer_MSIP_Msk                   (0xFFFFFFFFUL)                              /*!< SysTic
  85:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer_MSFTRST_Msk                (0xFFFFFFFFUL)                              /*!< SysTic
  86:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
  87:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer_MSFRST_KEY                 (0x80000A5FUL)                              /*!< SysTic
  88:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
  89:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #ifndef __SYSTIMER_BASEADDR
  90:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /* Base address of SYSTIMER(__SYSTIMER_BASEADDR) should be defined in <Device.h> */
  91:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #error "__SYSTIMER_BASEADDR is not defined, please check!"
  92:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #endif
  93:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /* System Timer Memory mapping of Device  */
  94:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer_BASE                       __SYSTIMER_BASEADDR                         /*!< SysTic
  95:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** #define SysTimer                            ((SysTimer_Type *) SysTimer_BASE)           /*!< SysTic
  96:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /** @} */ /* end of group NMSIS_Core_SysTimer_Registers */
  97:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
  98:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /* ##################################    SysTimer function  #######################################
  99:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /**
 100:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \defgroup NMSIS_Core_SysTimer SysTimer Functions
 101:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \brief    Functions that configure the Core System Timer.
 102:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * @{
 103:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
 104:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /**
 105:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \brief  Set system timer load value
 106:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \details
 107:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * This function set the system timer load value in MTIMER register.
 108:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \param [in]  value   value to set system timer MTIMER register.
 109:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \remarks
 110:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - Load value is 64bits wide.
 111:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - \ref SysTimer_GetLoadValue
 112:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
 113:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** __STATIC_FORCEINLINE void SysTimer_SetLoadValue(uint64_t value)
 114:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** {
 115:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     SysTimer->MTIMER = value;
 116:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** }
 117:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
 118:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /**
 119:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \brief  Get system timer load value
 120:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \details
 121:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * This function get the system timer current value in MTIMER register.
 122:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \return  current value(64bit) of system timer MTIMER register.
 123:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \remarks
 124:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - Load value is 64bits wide.
 125:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - \ref SysTimer_SetLoadValue
 126:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
 127:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** __STATIC_FORCEINLINE uint64_t SysTimer_GetLoadValue(void)
 128:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** {
 129:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     return SysTimer->MTIMER;
 130:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** }
 131:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
 132:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /**
 133:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \brief  Set system timer compare value
 134:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \details
 135:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * This function set the system Timer compare value in MTIMERCMP register.
 136:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \param [in]  value   compare value to set system timer MTIMERCMP register.
 137:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \remarks
 138:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - Compare value is 64bits wide.
 139:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - If compare value is larger than current value timer interrupt generate.
 140:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - Modify the load value or compare value less to clear the interrupt.
 141:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - \ref SysTimer_GetCompareValue
 142:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
 143:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** __STATIC_FORCEINLINE void SysTimer_SetCompareValue(uint64_t value)
 144:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** {
 145:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     uint64_t cur_ticks = SysTimer->MTIMER;
 146:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
 147:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     /* If the low 32bits of reload_ticks are smaller than cur_ticks, the high 32bits are written fi
 148:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****      * otherwise the low 32bits are written first to avoid unexpected interrupt. */
 149:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     if (__USUALLY((uint32_t)value > (uint32_t)cur_ticks)) {
 150:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****         SysTimer->MTIMERCMP.MTIMERCMP_64 = value;
 151:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     } else {
 152:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****         SysTimer->MTIMERCMP.MTIMERCMP_32.MTIMERCMP_hi = (uint32_t)(value >> 32);
 153:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****         SysTimer->MTIMERCMP.MTIMERCMP_32.MTIMERCMP_lo = (uint32_t)(value & 0xFFFFFFFF);
 154:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     }
 155:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** }
 156:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
 157:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /**
 158:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \brief  Get system timer compare value
 159:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \details
 160:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * This function get the system timer compare value in MTIMERCMP register.
 161:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \return  compare value of system timer MTIMERCMP register.
 162:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \remarks
 163:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - Compare value is 64bits wide.
 164:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - \ref SysTimer_SetCompareValue
 165:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
 166:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** __STATIC_FORCEINLINE uint64_t SysTimer_GetCompareValue(void)
 167:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** {
 168:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     return SysTimer->MTIMERCMP.MTIMERCMP_64;
 169:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** }
 170:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
 171:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /**
 172:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \brief  Enable system timer counter running
 173:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \details
 174:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * Enable system timer counter running by clear
 175:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * TIMESTOP bit in MTIMECTL register.
 176:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
 177:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** __STATIC_FORCEINLINE void SysTimer_Start(void)
 178:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** {
 179:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     SysTimer->MTIMECTL &= ~(SysTimer_MTIMECTL_TIMESTOP_Msk);
 180:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** }
 181:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
 182:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /**
 183:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \brief  Stop system timer counter running
 184:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \details
 185:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * Stop system timer counter running by set
 186:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * TIMESTOP bit in MTIMECTL register.
 187:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
 188:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** __STATIC_FORCEINLINE void SysTimer_Stop(void)
 189:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** {
 190:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     SysTimer->MTIMECTL |= SysTimer_MTIMECTL_TIMESTOP_Msk;
 191:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** }
 192:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
 193:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /**
 194:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \brief  Set system timer control value
 195:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \details
 196:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * This function set the system timer MTIMECTL register value.
 197:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \param [in]  mctl    value to set MTIMECTL register
 198:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \remarks
 199:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - Bit TIMESTOP is used to start and stop timer.
 200:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  *   Clear TIMESTOP bit to 0 to start timer, otherwise to stop timer.
 201:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - Bit CMPCLREN is used to enable auto MTIMER clear to zero when MTIMER >= MTIMERCMP.
 202:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  *   Clear CMPCLREN bit to 0 to stop auto clear MTIMER feature, otherwise to enable it.
 203:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - Bit CLKSRC is used to select timer clock source.
 204:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  *   Clear CLKSRC bit to 0 to use *mtime_toggle_a*, otherwise use *core_clk_aon*
 205:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - \ref SysTimer_GetControlValue
 206:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
 207:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** __STATIC_FORCEINLINE void SysTimer_SetControlValue(uint32_t mctl)
 208:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** {
 209:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     SysTimer->MTIMECTL = (mctl & SysTimer_MTIMECTL_Msk);
 210:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** }
 211:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
 212:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /**
 213:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \brief  Get system timer control value
 214:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \details
 215:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * This function get the system timer MTIMECTL register value.
 216:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \return  MTIMECTL register value
 217:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \remarks
 218:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - \ref SysTimer_SetControlValue
 219:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
 220:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** __STATIC_FORCEINLINE uint32_t SysTimer_GetControlValue(void)
 221:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** {
 222:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     return (SysTimer->MTIMECTL & SysTimer_MTIMECTL_Msk);
 223:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** }
 224:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
 225:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /**
 226:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \brief  Trigger or set software interrupt via system timer
 227:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \details
 228:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * This function set the system timer MSIP bit in MSIP register.
 229:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \remarks
 230:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - Set system timer MSIP bit and generate a SW interrupt.
 231:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - \ref SysTimer_ClearSWIRQ
 232:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - \ref SysTimer_GetMsipValue
 233:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
 234:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** __STATIC_FORCEINLINE void SysTimer_SetSWIRQ(void)
 235:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** {
 236:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     SysTimer->MSIP |= SysTimer_MSIP_MSIP_Msk;
 237:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** }
 238:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
 239:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /**
 240:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \brief  Clear system timer software interrupt pending request
 241:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \details
 242:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * This function clear the system timer MSIP bit in MSIP register.
 243:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \remarks
 244:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - Clear system timer MSIP bit in MSIP register to clear the software interrupt pending.
 245:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - \ref SysTimer_SetSWIRQ
 246:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - \ref SysTimer_GetMsipValue
 247:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
 248:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** __STATIC_FORCEINLINE void SysTimer_ClearSWIRQ(void)
 249:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** {
 250:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     SysTimer->MSIP &= ~SysTimer_MSIP_MSIP_Msk;
 251:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** }
 252:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
 253:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /**
 254:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \brief  Get system timer MSIP register value
 255:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \details
 256:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * This function get the system timer MSIP register value.
 257:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \return    Value of Timer MSIP register.
 258:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \remarks
 259:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - Bit0 is SW interrupt flag.
 260:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  *   Bit0 is 1 then SW interrupt set. Bit0 is 0 then SW interrupt clear.
 261:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - \ref SysTimer_SetSWIRQ
 262:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - \ref SysTimer_ClearSWIRQ
 263:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
 264:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** __STATIC_FORCEINLINE uint32_t SysTimer_GetMsipValue(void)
 265:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** {
 266:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     return (uint32_t)(SysTimer->MSIP & SysTimer_MSIP_Msk);
 267:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** }
 268:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
 269:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /**
 270:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \brief  Set system timer MSIP register value
 271:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \details
 272:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * This function set the system timer MSIP register value.
 273:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \param [in]  msip   value to set MSIP register
 274:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
 275:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** __STATIC_FORCEINLINE void SysTimer_SetMsipValue(uint32_t msip)
 276:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** {
 277:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     SysTimer->MSIP = (msip & SysTimer_MSIP_Msk);
 278:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** }
 279:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** 
 280:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** /**
 281:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \brief  Do software reset request
 282:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \details
 283:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * This function will do software reset request through MTIMER
 284:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - Software need to write \ref SysTimer_MSFRST_KEY to generate software reset request
 285:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - The software request flag can be cleared by reset operation to clear
 286:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * \remarks
 287:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - The software reset is sent to SoC, SoC need to generate reset signal and send back to Core
 288:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  * - This function will not return, it will do while(1) to wait the Core reset happened
 289:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****  */
 290:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** __STATIC_FORCEINLINE void SysTimer_SoftwareReset(void)
 291:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h **** {
 292:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     SysTimer->MSFTRST = SysTimer_MSFRST_KEY;
 378              		.loc 4 292 5
 379              		.loc 4 292 23 is_stmt 0
 380 0000 B7170080 		li	a5,-2147479552
 381 0004 371700D1 		li	a4,-788525056
 382 0008 9387F7A5 		addi	a5,a5,-1441
 383 000c 2328F7FE 		sw	a5,-16(a4)
 384              	.L13:
 293:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_timer.h ****     while(1);
 385              		.loc 4 293 5 is_stmt 1
 386              		.loc 4 293 13
 387              		.loc 4 293 10
 388 0010 01A0     		j	.L13
 389              	.LBE84:
 390              	.LBE83:
 391              		.cfi_endproc
 392              	.LFE371:
 394              		.text
 395              	.Letext0:
 396              		.file 5 "c:\\users\\stapi\\onedrive\\desktop\\gd32vw553\\embeddedbuilder_v1.4.7.26843\\tools\\nucl
 397              		.file 6 "c:\\users\\stapi\\onedrive\\desktop\\gd32vw553\\embeddedbuilder_v1.4.7.26843\\tools\\nucl
 398              		.file 7 "..\\..\\..\\..\\plf\\riscv\\gd32vw55x/gd32vw55x.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 gd32vw55x_eclic.c
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:13     .text.eclic_global_interrupt_enable:0000000000000000 eclic_global_interrupt_enable
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:17     .text.eclic_global_interrupt_enable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:18     .text.eclic_global_interrupt_enable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:20     .text.eclic_global_interrupt_enable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:23     .text.eclic_global_interrupt_enable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:25     .text.eclic_global_interrupt_enable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:26     .text.eclic_global_interrupt_enable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:35     .text.eclic_global_interrupt_enable:0000000000000006 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:36     .text.eclic_global_interrupt_enable:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:43     .text.eclic_global_interrupt_disable:0000000000000000 eclic_global_interrupt_disable
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:46     .text.eclic_global_interrupt_disable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:47     .text.eclic_global_interrupt_disable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:48     .text.eclic_global_interrupt_disable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:51     .text.eclic_global_interrupt_disable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:53     .text.eclic_global_interrupt_disable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:54     .text.eclic_global_interrupt_disable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:63     .text.eclic_global_interrupt_disable:0000000000000006 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:64     .text.eclic_global_interrupt_disable:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:71     .text.eclic_level_threshold_set:0000000000000000 eclic_level_threshold_set
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:74     .text.eclic_level_threshold_set:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:76     .text.eclic_level_threshold_set:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:80     .text.eclic_level_threshold_set:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:81     .text.eclic_level_threshold_set:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:82     .text.eclic_level_threshold_set:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:88     .text.eclic_level_threshold_set:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:89     .text.eclic_level_threshold_set:000000000000000a .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:96     .text.eclic_priority_group_set:0000000000000000 eclic_priority_group_set
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:99     .text.eclic_priority_group_set:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:101    .text.eclic_priority_group_set:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:104    .text.eclic_priority_group_set:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:105    .text.eclic_priority_group_set:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:106    .text.eclic_priority_group_set:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:109    .text.eclic_priority_group_set:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:112    .text.eclic_priority_group_set:000000000000000a .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:114    .text.eclic_priority_group_set:000000000000000c .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:117    .text.eclic_priority_group_set:0000000000000014 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:118    .text.eclic_priority_group_set:0000000000000014 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:125    .text.eclic_priority_group_set:0000000000000022 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:126    .text.eclic_priority_group_set:0000000000000024 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:133    .text.eclic_irq_enable:0000000000000000 eclic_irq_enable
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:136    .text.eclic_irq_enable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:138    .text.eclic_irq_enable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:141    .text.eclic_irq_enable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:144    .text.eclic_irq_enable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:145    .text.eclic_irq_enable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:146    .text.eclic_irq_enable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:151    .text.eclic_irq_enable:000000000000000a .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:157    .text.eclic_irq_enable:000000000000000e .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:158    .text.eclic_irq_enable:000000000000000e .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:159    .text.eclic_irq_enable:000000000000000e .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:163    .text.eclic_irq_enable:0000000000000010 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:164    .text.eclic_irq_enable:0000000000000010 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:174    .text.eclic_irq_enable:0000000000000020 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:175    .text.eclic_irq_enable:0000000000000020 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:176    .text.eclic_irq_enable:0000000000000020 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:179    .text.eclic_irq_enable:0000000000000020 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:182    .text.eclic_irq_enable:0000000000000020 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:183    .text.eclic_irq_enable:0000000000000020 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:184    .text.eclic_irq_enable:0000000000000020 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:185    .text.eclic_irq_enable:0000000000000020 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:186    .text.eclic_irq_enable:0000000000000020 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:188    .text.eclic_irq_enable:0000000000000024 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:190    .text.eclic_irq_enable:0000000000000026 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:192    .text.eclic_irq_enable:000000000000002a .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:195    .text.eclic_irq_enable:000000000000002e .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:197    .text.eclic_irq_enable:0000000000000032 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:201    .text.eclic_irq_enable:0000000000000036 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:203    .text.eclic_irq_enable:000000000000003a .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:205    .text.eclic_irq_enable:000000000000003e .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:208    .text.eclic_irq_enable:0000000000000042 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:214    .text.eclic_irq_enable:0000000000000048 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:215    .text.eclic_irq_enable:0000000000000048 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:225    .text.eclic_irq_enable:000000000000004c .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:228    .text.eclic_irq_enable:000000000000004c .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:229    .text.eclic_irq_enable:000000000000004c .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:230    .text.eclic_irq_enable:000000000000004c .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:234    .text.eclic_irq_enable:0000000000000058 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:239    .text.eclic_irq_enable:000000000000005a .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:240    .text.eclic_irq_enable:000000000000005a .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:241    .text.eclic_irq_enable:000000000000005a .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:246    .text.eclic_irq_enable:0000000000000060 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:252    .text.eclic_irq_enable:0000000000000062 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:253    .text.eclic_irq_enable:0000000000000062 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:254    .text.eclic_irq_enable:0000000000000062 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:255    .text.eclic_irq_enable:0000000000000062 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:259    .text.eclic_irq_enable:0000000000000066 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:262    .text.eclic_irq_enable:000000000000006a .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:264    .text.eclic_irq_enable:000000000000006c .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:270    .text.eclic_irq_enable:000000000000007a .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:271    .text.eclic_irq_enable:000000000000007a .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:274    .text.eclic_irq_enable:000000000000007a .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:275    .text.eclic_irq_enable:000000000000007a .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:276    .text.eclic_irq_enable:000000000000007a .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:282    .text.eclic_irq_enable:0000000000000082 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:288    .text.eclic_irq_enable:0000000000000088 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:293    .text.eclic_irq_enable:000000000000008c .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:294    .text.eclic_irq_enable:000000000000008c .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:295    .text.eclic_irq_enable:000000000000008c .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:296    .text.eclic_irq_enable:000000000000008c .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:299    .text.eclic_irq_enable:0000000000000090 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:301    .text.eclic_irq_enable:0000000000000094 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:308    .text.eclic_irq_enable:000000000000009e .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:309    .text.eclic_irq_enable:000000000000009e .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:320    .text.eclic_irq_enable:00000000000000a2 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:321    .text.eclic_irq_enable:00000000000000a2 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:322    .text.eclic_irq_enable:00000000000000a2 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:332    .text.eclic_irq_enable:00000000000000b8 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:333    .text.eclic_irq_enable:00000000000000ba .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:340    .text.eclic_irq_disable:0000000000000000 eclic_irq_disable
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:343    .text.eclic_irq_disable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:345    .text.eclic_irq_disable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:348    .text.eclic_irq_disable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:349    .text.eclic_irq_disable:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:353    .text.eclic_irq_disable:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:362    .text.eclic_irq_disable:0000000000000018 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:363    .text.eclic_irq_disable:000000000000001a .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:370    .text.eclic_system_reset:0000000000000000 eclic_system_reset
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:373    .text.eclic_system_reset:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:374    .text.eclic_system_reset:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:378    .text.eclic_system_reset:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:379    .text.eclic_system_reset:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:380    .text.eclic_system_reset:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:386    .text.eclic_system_reset:0000000000000010 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:387    .text.eclic_system_reset:0000000000000010 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:388    .text.eclic_system_reset:0000000000000010 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:391    .text.eclic_system_reset:0000000000000012 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:39     .text.eclic_global_interrupt_enable:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:67     .text.eclic_global_interrupt_disable:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:92     .text.eclic_level_threshold_set:000000000000000a .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:129    .text.eclic_priority_group_set:0000000000000024 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:336    .text.eclic_irq_enable:00000000000000ba .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:366    .text.eclic_irq_disable:000000000000001a .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:394    .text.eclic_system_reset:0000000000000012 .L0 
                     .debug_frame:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:217    .text.eclic_irq_enable:000000000000004c .L6
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:311    .text.eclic_irq_enable:00000000000000a2 .L7
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:384    .text.eclic_system_reset:0000000000000010 .L13
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:1570   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2870   .debug_str:0000000000000336 .LASF148
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2968   .debug_str:00000000000006ea .LASF149
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2812   .debug_str:000000000000012f .LASF150
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2732   .debug_ranges:0000000000000000 .Ldebug_ranges0
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2768   .debug_line:0000000000000000 .Ldebug_line0
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2974   .debug_str:00000000000007ad .LASF0
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2816   .debug_str:00000000000001c6 .LASF1
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2782   .debug_str:000000000000005d .LASF6
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3028   .debug_str:0000000000000918 .LASF2
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2978   .debug_str:00000000000007cd .LASF3
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2886   .debug_str:00000000000004a6 .LASF4
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2834   .debug_str:0000000000000242 .LASF5
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2852   .debug_str:00000000000002d6 .LASF7
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2874   .debug_str:0000000000000442 .LASF8
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2814   .debug_str:00000000000001b8 .LASF9
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2914   .debug_str:0000000000000583 .LASF10
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2794   .debug_str:00000000000000b0 .LASF11
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3006   .debug_str:0000000000000886 .LASF12
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3044   .debug_str:000000000000098f .LASF13
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3000   .debug_str:0000000000000869 .LASF14
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2778   .debug_str:0000000000000047 .LASF15
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2918   .debug_str:00000000000005a5 .LASF131
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3074   .debug_str:0000000000000a52 .LASF16
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3034   .debug_str:0000000000000940 .LASF17
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2892   .debug_str:00000000000004d5 .LASF18
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2912   .debug_str:000000000000057a .LASF19
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3068   .debug_str:0000000000000a25 .LASF20
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2804   .debug_str:00000000000000f2 .LASF21
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2986   .debug_str:00000000000007f6 .LASF22
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3052   .debug_str:00000000000009bf .LASF23
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2820   .debug_str:00000000000001e1 .LASF24
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3076   .debug_str:0000000000000a5f .LASF25
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2992   .debug_str:0000000000000821 .LASF26
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2934   .debug_str:0000000000000616 .LASF27
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2980   .debug_str:00000000000007d7 .LASF28
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2868   .debug_str:0000000000000324 .LASF29
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2904   .debug_str:0000000000000530 .LASF30
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2938   .debug_str:000000000000062e .LASF31
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3072   .debug_str:0000000000000a40 .LASF32
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3032   .debug_str:000000000000092e .LASF33
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2842   .debug_str:000000000000027d .LASF34
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2972   .debug_str:000000000000079b .LASF35
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3010   .debug_str:0000000000000897 .LASF36
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3066   .debug_str:0000000000000a1c .LASF37
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2836   .debug_str:000000000000024b .LASF38
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2864   .debug_str:000000000000030c .LASF39
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2826   .debug_str:0000000000000206 .LASF40
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3060   .debug_str:00000000000009ec .LASF41
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2808   .debug_str:0000000000000113 .LASF42
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2928   .debug_str:00000000000005e2 .LASF43
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2970   .debug_str:000000000000078f .LASF44
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3046   .debug_str:0000000000000997 .LASF45
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3022   .debug_str:00000000000008ed .LASF46
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2780   .debug_str:0000000000000050 .LASF47
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3064   .debug_str:0000000000000a0f .LASF48
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2950   .debug_str:0000000000000684 .LASF49
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2832   .debug_str:0000000000000236 .LASF50
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2946   .debug_str:000000000000066f .LASF51
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2772   .debug_str:0000000000000017 .LASF52
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3042   .debug_str:0000000000000980 .LASF53
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2800   .debug_str:00000000000000de .LASF54
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2824   .debug_str:00000000000001fb .LASF55
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2858   .debug_str:00000000000002ec .LASF56
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2894   .debug_str:00000000000004e0 .LASF57
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2818   .debug_str:00000000000001d2 .LASF58
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2920   .debug_str:00000000000005aa .LASF59
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3008   .debug_str:000000000000088b .LASF60
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2798   .debug_str:00000000000000cf .LASF61
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3078   .debug_str:0000000000000a6a .LASF62
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2936   .debug_str:0000000000000621 .LASF63
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2924   .debug_str:00000000000005c2 .LASF64
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2810   .debug_str:0000000000000127 .LASF65
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2940   .debug_str:0000000000000640 .LASF66
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2838   .debug_str:0000000000000258 .LASF67
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2976   .debug_str:00000000000007ba .LASF68
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2878   .debug_str:0000000000000468 .LASF69
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3018   .debug_str:00000000000008d3 .LASF70
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3048   .debug_str:00000000000009a4 .LASF71
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3040   .debug_str:000000000000096d .LASF72
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2910   .debug_str:0000000000000567 .LASF73
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2944   .debug_str:000000000000065c .LASF74
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2926   .debug_str:00000000000005cf .LASF75
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2806   .debug_str:0000000000000100 .LASF76
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2906   .debug_str:0000000000000542 .LASF77
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3026   .debug_str:000000000000090f .LASF78
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2890   .debug_str:00000000000004c7 .LASF79
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2888   .debug_str:00000000000004b9 .LASF80
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2930   .debug_str:00000000000005ee .LASF81
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2998   .debug_str:000000000000084e .LASF82
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2840   .debug_str:0000000000000266 .LASF83
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2916   .debug_str:000000000000058e .LASF84
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2952   .debug_str:000000000000068d .LASF85
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3038   .debug_str:0000000000000952 .LASF86
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2786   .debug_str:0000000000000079 .LASF87
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2872   .debug_str:000000000000042f .LASF88
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2996   .debug_str:0000000000000837 .LASF89
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3002   .debug_str:0000000000000872 .LASF90
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2846   .debug_str:0000000000000299 .LASF91
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2994   .debug_str:000000000000082c .LASF92
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2788   .debug_str:000000000000008d .LASF93
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3054   .debug_str:00000000000009c8 .LASF94
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2790   .debug_str:0000000000000097 .LASF95
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3016   .debug_str:00000000000008c9 .LASF96
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2988   .debug_str:00000000000007ff .LASF97
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2862   .debug_str:0000000000000306 .LASF98
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2856   .debug_str:00000000000002e6 .LASF99
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2866   .debug_str:000000000000031c .LASF100
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3030   .debug_str:0000000000000926 .LASF101
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2908   .debug_str:0000000000000558 .LASF102
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2956   .debug_str:00000000000006b2 .LASF103
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2802   .debug_str:00000000000000ed .LASF104
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2958   .debug_str:00000000000006bc .LASF105
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2960   .debug_str:00000000000006c6 .LASF106
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3036   .debug_str:000000000000094d .LASF107
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2948   .debug_str:000000000000067a .LASF108
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2860   .debug_str:00000000000002f9 .LASF109
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3012   .debug_str:00000000000008a9 .LASF110
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2792   .debug_str:00000000000000a3 .LASF111
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2984   .debug_str:00000000000007e9 .LASF112
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3020   .debug_str:00000000000008e6 .LASF113
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2844   .debug_str:000000000000028f .LASF114
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3058   .debug_str:00000000000009e4 .LASF115
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3070   .debug_str:0000000000000a37 .LASF116
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3004   .debug_str:0000000000000881 .LASF117
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2830   .debug_str:0000000000000228 .LASF118
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2828   .debug_str:0000000000000215 .LASF119
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:371    .text.eclic_system_reset:0000000000000000 .LFB371
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:392    .text.eclic_system_reset:0000000000000012 .LFE371
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:375    .text.eclic_system_reset:0000000000000000 .LBB83
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:390    .text.eclic_system_reset:0000000000000012 .LBE83
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2784   .debug_str:0000000000000067 .LASF120
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:341    .text.eclic_irq_disable:0000000000000000 .LFB370
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:364    .text.eclic_irq_disable:000000000000001a .LFE370
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2922   .debug_str:00000000000005bb .LASF122
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2199   .debug_loc:0000000000000000 .LLST24
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:346    .text.eclic_irq_disable:0000000000000000 .LBB81
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:360    .text.eclic_irq_disable:0000000000000018 .LBE81
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2213   .debug_loc:0000000000000021 .LLST25
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3056   .debug_str:00000000000009d3 .LASF121
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:134    .text.eclic_irq_enable:0000000000000000 .LFB369
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:334    .text.eclic_irq_enable:00000000000000ba .LFE369
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2227   .debug_loc:0000000000000042 .LLST3
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2882   .debug_str:0000000000000482 .LASF123
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2241   .debug_loc:0000000000000063 .LLST4
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2848   .debug_str:00000000000002ae .LASF124
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2255   .debug_loc:0000000000000084 .LLST5
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:139    .text.eclic_irq_enable:0000000000000000 .LBB56
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:221    .text.eclic_irq_enable:000000000000004c .LBE56
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2269   .debug_loc:00000000000000a5 .LLST6
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2329   .debug_loc:00000000000000fd .LLST7
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2343   .debug_loc:000000000000011e .LLST8
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2350   .debug_loc:0000000000000131 .LLST9
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2363   .debug_loc:000000000000014a .LLST10
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2441   .debug_loc:00000000000001ad .LLST11
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:142    .text.eclic_irq_enable:0000000000000000 .LBB58
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:155    .text.eclic_irq_enable:000000000000000e .LBE58
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:161    .text.eclic_irq_enable:0000000000000010 .LBB60
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:211    .text.eclic_irq_enable:0000000000000048 .LBB64
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:219    .text.eclic_irq_enable:000000000000004c .LBE64
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2462   .debug_loc:00000000000001ce .LLST12
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2469   .debug_loc:00000000000001e1 .LLST13
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:223    .text.eclic_irq_enable:000000000000004c .LBB66
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:316    .text.eclic_irq_enable:00000000000000a2 .LBE66
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2479   .debug_loc:00000000000001f7 .LLST14
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2576   .debug_loc:0000000000000283 .LLST15
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2586   .debug_loc:0000000000000299 .LLST16
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:226    .text.eclic_irq_enable:000000000000004c .LBB68
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:250    .text.eclic_irq_enable:0000000000000062 .LBB72
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:314    .text.eclic_irq_enable:00000000000000a2 .LBE72
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2601   .debug_loc:00000000000002bb .LLST17
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2616   .debug_loc:00000000000002d6 .LLST18
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2624   .debug_loc:00000000000002ea .LLST19
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:272    .text.eclic_irq_enable:000000000000007a .LBB73
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2642   .debug_loc:0000000000000308 .LLST20
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:305    .text.eclic_irq_enable:000000000000009e .LBB77
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:313    .text.eclic_irq_enable:00000000000000a2 .LBE77
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2652   .debug_loc:000000000000031e .LLST21
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2659   .debug_loc:0000000000000331 .LLST22
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:318    .text.eclic_irq_enable:00000000000000a2 .LBB79
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:330    .text.eclic_irq_enable:00000000000000b8 .LBE79
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2669   .debug_loc:0000000000000347 .LLST23
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2990   .debug_str:0000000000000808 .LASF125
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:97     .text.eclic_priority_group_set:0000000000000000 .LFB368
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:127    .text.eclic_priority_group_set:0000000000000024 .LFE368
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2900   .debug_str:000000000000051c .LASF126
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2679   .debug_loc:000000000000035d .LLST1
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:102    .text.eclic_priority_group_set:0000000000000000 .LBB54
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:123    .text.eclic_priority_group_set:0000000000000022 .LBE54
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2693   .debug_loc:000000000000037e .LLST2
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2896   .debug_str:00000000000004ed .LASF127
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:72     .text.eclic_level_threshold_set:0000000000000000 .LFB367
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:90     .text.eclic_level_threshold_set:000000000000000a .LFE367
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2966   .debug_str:00000000000006e0 .LASF128
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:77     .text.eclic_level_threshold_set:0000000000000000 .LBB52
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:86     .text.eclic_level_threshold_set:0000000000000008 .LBE52
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2700   .debug_loc:0000000000000391 .LLST0
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2850   .debug_str:00000000000002b7 .LASF129
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:44     .text.eclic_global_interrupt_disable:0000000000000000 .LFB366
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:65     .text.eclic_global_interrupt_disable:0000000000000008 .LFE366
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:49     .text.eclic_global_interrupt_disable:0000000000000000 .LBB50
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:61     .text.eclic_global_interrupt_disable:0000000000000006 .LBE50
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:50     .text.eclic_global_interrupt_disable:0000000000000000 .LBB51
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:60     .text.eclic_global_interrupt_disable:0000000000000006 .LBE51
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2884   .debug_str:0000000000000488 .LASF130
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:14     .text.eclic_global_interrupt_enable:0000000000000000 .LFB365
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:37     .text.eclic_global_interrupt_enable:0000000000000008 .LFE365
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:21     .text.eclic_global_interrupt_enable:0000000000000000 .LBB48
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:33     .text.eclic_global_interrupt_enable:0000000000000006 .LBE48
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:22     .text.eclic_global_interrupt_enable:0000000000000000 .LBB49
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:32     .text.eclic_global_interrupt_enable:0000000000000006 .LBE49
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2932   .debug_str:00000000000005ff .LASF151
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2770   .debug_str:0000000000000000 .LASF137
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2982   .debug_str:00000000000007e2 .LASF132
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2902   .debug_str:0000000000000525 .LASF133
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2880   .debug_str:000000000000047b .LASF134
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2854   .debug_str:00000000000002e1 .LASF135
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2962   .debug_str:00000000000006d0 .LASF136
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2876   .debug_str:0000000000000454 .LASF138
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2796   .debug_str:00000000000000c7 .LASF139
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2964   .debug_str:00000000000006d9 .LASF140
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2776   .debug_str:0000000000000034 .LASF152
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3014   .debug_str:00000000000008b6 .LASF141
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3050   .debug_str:00000000000009b7 .LASF142
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3062   .debug_str:00000000000009fc .LASF143
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2774   .debug_str:0000000000000022 .LASF144
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2822   .debug_str:00000000000001ec .LASF145
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2898   .debug_str:0000000000000507 .LASF153
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:3024   .debug_str:00000000000008fa .LASF146
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2954   .debug_str:00000000000006a4 .LASF147
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:2942   .debug_str:000000000000064f .LASF154
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:344    .text.eclic_irq_disable:0000000000000000 .LVL26
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:351    .text.eclic_irq_disable:0000000000000008 .LVL27
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:358    .text.eclic_irq_disable:0000000000000018 .LVL28
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:137    .text.eclic_irq_enable:0000000000000000 .LVL6
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:149    .text.eclic_irq_enable:000000000000000a .LVL7
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:198    .text.eclic_irq_enable:0000000000000034 .LVL11
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:268    .text.eclic_irq_enable:000000000000007a .LVL19
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:170    .text.eclic_irq_enable:0000000000000020 .LVL9
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:206    .text.eclic_irq_enable:0000000000000042 .LVL12
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:216    .text.eclic_irq_enable:000000000000004c .LVL14
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:153    .text.eclic_irq_enable:000000000000000e .LVL8
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:193    .text.eclic_irq_enable:000000000000002e .LVL10
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:210    .text.eclic_irq_enable:0000000000000048 .LVL13
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:247    .text.eclic_irq_enable:0000000000000062 .LVL16
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:257    .text.eclic_irq_enable:0000000000000066 .LVL17
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:260    .text.eclic_irq_enable:000000000000006a .LVL18
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:310    .text.eclic_irq_enable:00000000000000a2 .LVL24
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:235    .text.eclic_irq_enable:000000000000005a .LVL15
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:284    .text.eclic_irq_enable:0000000000000088 .LVL20
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:289    .text.eclic_irq_enable:000000000000008c .LVL21
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:297    .text.eclic_irq_enable:0000000000000090 .LVL22
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:304    .text.eclic_irq_enable:000000000000009e .LVL23
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:328    .text.eclic_irq_enable:00000000000000b8 .LVL25
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:100    .text.eclic_priority_group_set:0000000000000000 .LVL4
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:110    .text.eclic_priority_group_set:000000000000000a .LVL5
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:75     .text.eclic_level_threshold_set:0000000000000000 .LVL2
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:84     .text.eclic_level_threshold_set:0000000000000008 .LVL3
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:400    .debug_info:0000000000000000 .Ldebug_info0
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:172    .text.eclic_irq_enable:0000000000000020 .LBE60
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:177    .text.eclic_irq_enable:0000000000000020 .LBB63
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:181    .text.eclic_irq_enable:0000000000000020 .LBE63
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:237    .text.eclic_irq_enable:000000000000005a .LBE68
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:243    .text.eclic_irq_enable:0000000000000060 .LBB71
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:249    .text.eclic_irq_enable:0000000000000062 .LBE71
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:280    .text.eclic_irq_enable:0000000000000082 .LBE73
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:285    .text.eclic_irq_enable:0000000000000088 .LBB76
C:\Users\stapi\AppData\Local\Temp\ccPhrKU7.s:291    .text.eclic_irq_enable:000000000000008c .LBE76

NO UNDEFINED SYMBOLS
