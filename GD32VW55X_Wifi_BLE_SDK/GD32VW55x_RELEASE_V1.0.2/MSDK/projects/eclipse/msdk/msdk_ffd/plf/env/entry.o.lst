   1              	# 1 "C:/Users/stapi/OneDrive/Desktop/GD32VW553/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK
   1              	/*!
   0              	
   0              	
   0              	
   2              	    \file    entry.S
   3              	    \brief   Entry for interrupts for GD32VW55x SDK.
   4              	
   5              	    \version 2023-07-20, V1.0.0, firmware for GD32VW55x
   6              	*/
   7              	
   8              	/*
   9              	    Copyright (c) 2023, GigaDevice Semiconductor Inc.
  10              	
  11              	    Redistribution and use in source and binary forms, with or without modification,
  12              	are permitted provided that the following conditions are met:
  13              	
  14              	    1. Redistributions of source code must retain the above copyright notice, this
  15              	       list of conditions and the following disclaimer.
  16              	    2. Redistributions in binary form must reproduce the above copyright notice,
  17              	       this list of conditions and the following disclaimer in the documentation
  18              	       and/or other materials provided with the distribution.
  19              	    3. Neither the name of the copyright holder nor the names of its contributors
  20              	       may be used to endorse or promote products derived from this software without
  21              	       specific prior written permission.
  22              	
  23              	    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  24              	AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25              	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  26              	IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  27              	INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  28              	NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  29              	PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  30              	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  31              	ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
  32              	OF SUCH DAMAGE.
  33              	*/
  34              	
  35              	#include "riscv_encoding.h"
   1              	/*
   2              	 * Copyright (c) 2019 Nuclei Limited. All rights reserved.
   3              	 *
   4              	 * SPDX-License-Identifier: Apache-2.0
   5              	 *
   6              	 * Licensed under the Apache License, Version 2.0 (the License); you may
   7              	 * not use this file except in compliance with the License.
   8              	 * You may obtain a copy of the License at
   9              	 *
  10              	 * www.apache.org/licenses/LICENSE-2.0
  11              	 *
  12              	 * Unless required by applicable law or agreed to in writing, software
  13              	 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14              	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15              	 * See the License for the specific language governing permissions and
  16              	 * limitations under the License.
  17              	 */
  18              	#ifndef __RISCV_ENCODING_H__
  19              	#define __RISCV_ENCODING_H__
  20              	
  21              	#include "riscv_bits.h"
   1              	/*
  22              	#ifdef __cplusplus
  36              	
  37              	/**
  38              	 * \brief  Global interrupt disabled
  39              	 * \details
  40              	 *  This function disable global interrupt.
  41              	 * \remarks
  42              	 *  - All the interrupt requests will be ignored by CPU.
  43              	 */
  44              	.macro DISABLE_MIE
  45              	    csrc CSR_MSTATUS, MSTATUS_MIE
  46              	.endm
  47              	
  48              	/**
  49              	 * \brief  Macro for context save
  50              	 * \details
  51              	 * This macro save ABI defined caller saved registers in the stack.
  52              	 * \remarks
  53              	 * - This Macro could use to save context when you enter to interrupt
  54              	 * or exception
  55              	*/
  56              	/* Save caller registers */
  57              	.macro SAVE_CONTEXT
  58              	    /* only used in single-privileged mode, interrupt nested sp and mscratch do not exchange */
  59              	    csrrw sp, CSR_MSCRATCHCSWL, sp
  60              	    /* Allocate stack space for context saving */
  61              	#ifndef __riscv_32e
  62              	    addi sp, sp, -20*REGBYTES
  63              	#else
  64              	    addi sp, sp, -14*REGBYTES
  65              	#endif /* __riscv_32e */
  66              	
  67              	    STORE x1, 0*REGBYTES(sp)
  68              	    STORE x4, 1*REGBYTES(sp)
  69              	    STORE x5, 2*REGBYTES(sp)
  70              	    STORE x6, 3*REGBYTES(sp)
  71              	    STORE x7, 4*REGBYTES(sp)
  72              	    STORE x10, 5*REGBYTES(sp)
  73              	    STORE x11, 6*REGBYTES(sp)
  74              	    STORE x12, 7*REGBYTES(sp)
  75              	    STORE x13, 8*REGBYTES(sp)
  76              	    STORE x14, 9*REGBYTES(sp)
  77              	    STORE x15, 10*REGBYTES(sp)
  78              	#ifndef __riscv_32e
  79              	    STORE x16, 14*REGBYTES(sp)
  80              	    STORE x17, 15*REGBYTES(sp)
  81              	    STORE x28, 16*REGBYTES(sp)
  82              	    STORE x29, 17*REGBYTES(sp)
  83              	    STORE x30, 18*REGBYTES(sp)
  84              	    STORE x31, 19*REGBYTES(sp)
  85              	#endif /* __riscv_32e */
  86              	
  87              	    /* Save the necessary CSR registers */
  88              	    SAVE_CSR_CONTEXT
  89              	
  90              	#ifdef __riscv_flen
  91              	    addi  sp, sp, -1*REGBYTES
  92              	    csrr  t0, CSR_FCSR
  93              	    STORE t0, 0*REGBYTES(sp)
  94              	
  95              	    addi sp, sp, -20*FPREGBYTES
  96              	    FPSTORE f0, 0*FPREGBYTES(sp)
  97              	    FPSTORE f1, 1*FPREGBYTES(sp)
  98              	    FPSTORE f2, 2*FPREGBYTES(sp)
  99              	    FPSTORE f3, 3*FPREGBYTES(sp)
 100              	    FPSTORE f4, 4*FPREGBYTES(sp)
 101              	    FPSTORE f5, 5*FPREGBYTES(sp)
 102              	    FPSTORE f6, 6*FPREGBYTES(sp)
 103              	    FPSTORE f7, 7*FPREGBYTES(sp)
 104              	    FPSTORE f10, 8*FPREGBYTES(sp)
 105              	    FPSTORE f11, 9*FPREGBYTES(sp)
 106              	    FPSTORE f12, 10*FPREGBYTES(sp)
 107              	    FPSTORE f13, 11*FPREGBYTES(sp)
 108              	    FPSTORE f14, 12*FPREGBYTES(sp)
 109              	    FPSTORE f15, 13*FPREGBYTES(sp)
 110              	    FPSTORE f16, 14*FPREGBYTES(sp)
 111              	    FPSTORE f17, 15*FPREGBYTES(sp)
 112              	    FPSTORE f28, 16*FPREGBYTES(sp)
 113              	    FPSTORE f29, 17*FPREGBYTES(sp)
 114              	    FPSTORE f30, 18*FPREGBYTES(sp)
 115              	    FPSTORE f31, 19*FPREGBYTES(sp)
 116              	#endif
 117              	.endm
 118              	
 119              	/**
 120              	 * \brief  Macro for restore caller registers
 121              	 * \details
 122              	 * This macro restore ABI defined caller saved registers from stack.
 123              	 * \remarks
 124              	 * - You could use this macro to restore context before you want return
 125              	 * from interrupt or exeception
 126              	 */
 127              	/* Restore caller registers */
 128              	.macro RESTORE_CONTEXT
 129              	#ifdef __riscv_flen
 130              	    /* Restore fp caller registers */
 131              	    FPLOAD f0, 0*FPREGBYTES(sp)
 132              	    FPLOAD f1, 1*FPREGBYTES(sp)
 133              	    FPLOAD f2, 2*FPREGBYTES(sp)
 134              	    FPLOAD f3, 3*FPREGBYTES(sp)
 135              	    FPLOAD f4, 4*FPREGBYTES(sp)
 136              	    FPLOAD f5, 5*FPREGBYTES(sp)
 137              	    FPLOAD f6, 6*FPREGBYTES(sp)
 138              	    FPLOAD f7, 7*FPREGBYTES(sp)
 139              	    FPLOAD f10, 8*FPREGBYTES(sp)
 140              	    FPLOAD f11, 9*FPREGBYTES(sp)
 141              	    FPLOAD f12, 10*FPREGBYTES(sp)
 142              	    FPLOAD f13, 11*FPREGBYTES(sp)
 143              	    FPLOAD f14, 12*FPREGBYTES(sp)
 144              	    FPLOAD f15, 13*FPREGBYTES(sp)
 145              	    FPLOAD f16, 14*FPREGBYTES(sp)
 146              	    FPLOAD f17, 15*FPREGBYTES(sp)
 147              	    FPLOAD f28, 16*FPREGBYTES(sp)
 148              	    FPLOAD f29, 17*FPREGBYTES(sp)
 149              	    FPLOAD f30, 18*FPREGBYTES(sp)
 150              	    FPLOAD f31, 19*FPREGBYTES(sp)
 151              	    addi sp, sp, 20*FPREGBYTES
 152              	
 153              	    LOAD t0, 0*REGBYTES(sp)
 154              	    csrw CSR_FCSR, t0
 155              	    addi sp, sp, 1*REGBYTES
 156              	#endif
 157              	
 158              	    /* Restore the necessary CSR registers */
 159              	    RESTORE_CSR_CONTEXT
 160              	
 161              	    LOAD x1, 0*REGBYTES(sp)
 162              	    LOAD x4, 1*REGBYTES(sp)
 163              	    LOAD x5, 2*REGBYTES(sp)
 164              	    LOAD x6, 3*REGBYTES(sp)
 165              	    LOAD x7, 4*REGBYTES(sp)
 166              	    LOAD x10, 5*REGBYTES(sp)
 167              	    LOAD x11, 6*REGBYTES(sp)
 168              	    LOAD x12, 7*REGBYTES(sp)
 169              	    LOAD x13, 8*REGBYTES(sp)
 170              	    LOAD x14, 9*REGBYTES(sp)
 171              	    LOAD x15, 10*REGBYTES(sp)
 172              	#ifndef __riscv_32e
 173              	    LOAD x16, 14*REGBYTES(sp)
 174              	    LOAD x17, 15*REGBYTES(sp)
 175              	    LOAD x28, 16*REGBYTES(sp)
 176              	    LOAD x29, 17*REGBYTES(sp)
 177              	    LOAD x30, 18*REGBYTES(sp)
 178              	    LOAD x31, 19*REGBYTES(sp)
 179              	
 180              	    /* De-allocate the stack space */
 181              	    addi sp, sp, 20*REGBYTES
 182              	#else
 183              	    /* De-allocate the stack space */
 184              	    addi sp, sp, 14*REGBYTES
 185              	#endif /* __riscv_32e */
 186              	
 187              	    /* only used in single-privileged mode, interrupt nested sp and mscratch do not exchange */
 188              	    csrrw sp, CSR_MSCRATCHCSWL, sp
 189              	.endm
 190              	
 191              	/**
 192              	 * \brief  Macro for save necessary CSRs to stack
 193              	 * \details
 194              	 * This macro store MCAUSE, MEPC, MSUBM to stack.
 195              	 */
 196              	.macro SAVE_CSR_CONTEXT
 197              	    /* Store CSR mcause to stack using pushmcause */
 198              	    csrrwi  x0, CSR_PUSHMCAUSE, 11
 199              	    /* Store CSR mepc to stack using pushmepc */
 200              	    csrrwi  x0, CSR_PUSHMEPC, 12
 201              	    /* Store CSR msub to stack using pushmsub */
 202              	    csrrwi  x0, CSR_PUSHMSUBM, 13
 203              	.endm
 204              	
 205              	/**
 206              	 * \brief  Macro for restore necessary CSRs from stack
 207              	 * \details
 208              	 * This macro restore MSUBM, MEPC, MCAUSE from stack.
 209              	 */
 210              	.macro RESTORE_CSR_CONTEXT
 211              	    LOAD x5,  13*REGBYTES(sp)
 212              	    csrw CSR_MSUBM, x5
 213              	    LOAD x5,  12*REGBYTES(sp)
 214              	    csrw CSR_MEPC, x5
 215              	    LOAD x5,  11*REGBYTES(sp)
 216              	    csrw CSR_MCAUSE, x5
 217              	.endm
 218              	
 219              	/**
 220              	 * \brief  Exception/NMI Entry
 221              	 * \details
 222              	 * This function provide common entry functions for exception/nmi.
 223              	 * \remarks
 224              	 * This function provide a default exception/nmi entry.
 225              	 * ABI defined caller save register and some CSR registers
 226              	 * to be saved before enter interrupt handler and be restored before return.
 227              	 */
 228              	.section .text.trap
 229              	/* In CLIC mode, the exeception entry must be 64bytes aligned */
 230 0000 01001300 	.align 6
 230      00001300 
 230      00001300 
 230      00001300 
 230      00001300 
 231              	.global exc_entry
 232              	.weak exc_entry
 233              	exc_entry:
 234              	    /* Save the caller saving registers (context) */
 235 003e 73119134 	    SAVE_CONTEXT
 235      5D7106C0 
 235      12C216C4 
 235      1AC61EC8 
 235      2ACA2ECC 
 236              	
 237              	    /*
 238              	     * Set the exception handler function arguments
 239              	     * argument 1: mcause value
 240              	     * argument 2: current stack point(SP) value
 241              	     */
 242 00a4 73252034 	    csrr a0, mcause
 243 00a8 8A85     	    mv a1, sp
 244              	    /*
 245              	     * TODO: Call the exception handler function
 246              	     * By default, the function template is provided in
 247              	     * system_gd32vw55x.c, you can adjust it as you want
 248              	     */
 249 00aa 97000000 	    call core_exception_handler
 249      E7800000 
 250              	
 251              	    /* Restore the caller saving registers (context) */
 252 00b2 02609260 	    RESTORE_CONTEXT
 252      2261B261 
 252      4262D262 
 252      6263F263 
 252      02759275 
 253              	
 254              	    /* Return to regular code */
 255 011e 73002030 	    mret
 256              	
 257              	/**
 258              	 * \brief  Non-Vector Interrupt Entry
 259              	 * \details
 260              	 * This function provide common entry functions for handling
 261              	 * non-vector interrupts
 262              	 * \remarks
 263              	 * This function provide a default non-vector interrupt entry.
 264              	 * ABI defined caller save register and some CSR registers need
 265              	 * to be saved before enter interrupt handler and be restored before return.
 266              	 */
 267 0122 00000000 	.section      .text.irq
 267      00000000 
 267      00000000 
 267      00000000 
 267      00000000 
 268              	/* In CLIC mode, the interrupt entry must be 4bytes aligned */
 269 0000 0100     	.align 2
 270              	.global irq_entry
 271              	.weak irq_entry
 272              	/* This label will be set to MTVT2 register */
 273              	irq_entry:
 274              	    /* Save the caller saving registers (context) */
 275 0002 73119134 	    SAVE_CONTEXT
 275      5D7106C0 
 275      12C216C4 
 275      1AC61EC8 
 275      2ACA2ECC 
 276              	
 277              	    /* This special CSR read/write operation, which is actually
 278              	     * claim the CLIC to find its pending highest ID, if the ID
 279              	     * is not 0, then automatically enable the mstatus.MIE, and
 280              	     * jump to its vector-entry-label, and update the link register
 281              	     */
 282 0068 F390D07E 	    csrrw ra, CSR_JALMNXTI, ra
 283              	
 284              	    /* Critical section with interrupts disabled */
 285 006c 73700430 	    DISABLE_MIE
 286              	
 287              	    /* Restore the caller saving registers (context) */
 288 0070 02609260 	    RESTORE_CONTEXT
 288      2261B261 
 288      4262D262 
 288      6263F263 
 288      02759275 
 289              	
 290              	    /* Return to regular code */
 291 00dc 73002030 	    mret
 292              	
 293              	/* Default Handler for Exceptions / Interrupts */
 294              	.global default_intexc_handler
 295              	.weak default_intexc_handler
 296              	Undef_Handler:
 297              	default_intexc_handler:
 298              	1:
 299 00e0 01A00000 	    j 1b
DEFINED SYMBOLS
C:/Users/stapi/OneDrive/Desktop/GD32VW553/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env/entry.S:233    .text.trap:000000000000003e exc_entry
C:/Users/stapi/OneDrive/Desktop/GD32VW553/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env/entry.S:235    .text.trap:000000000000003e .L0 
C:/Users/stapi/OneDrive/Desktop/GD32VW553/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env/entry.S:242    .text.trap:00000000000000a4 .L0 
C:/Users/stapi/OneDrive/Desktop/GD32VW553/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env/entry.S:243    .text.trap:00000000000000a8 .L0 
C:/Users/stapi/OneDrive/Desktop/GD32VW553/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env/entry.S:249    .text.trap:00000000000000aa .L0 
C:/Users/stapi/OneDrive/Desktop/GD32VW553/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env/entry.S:252    .text.trap:00000000000000b2 .L0 
C:/Users/stapi/OneDrive/Desktop/GD32VW553/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env/entry.S:255    .text.trap:000000000000011e .L0 
C:/Users/stapi/OneDrive/Desktop/GD32VW553/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env/entry.S:273    .text.irq:0000000000000002 irq_entry
C:/Users/stapi/OneDrive/Desktop/GD32VW553/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env/entry.S:275    .text.irq:0000000000000002 .L0 
C:/Users/stapi/OneDrive/Desktop/GD32VW553/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env/entry.S:282    .text.irq:0000000000000068 .L0 
C:/Users/stapi/OneDrive/Desktop/GD32VW553/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env/entry.S:285    .text.irq:000000000000006c .L0 
C:/Users/stapi/OneDrive/Desktop/GD32VW553/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env/entry.S:288    .text.irq:0000000000000070 .L0 
C:/Users/stapi/OneDrive/Desktop/GD32VW553/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env/entry.S:291    .text.irq:00000000000000dc .L0 
C:/Users/stapi/OneDrive/Desktop/GD32VW553/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env/entry.S:297    .text.irq:00000000000000e0 default_intexc_handler
C:/Users/stapi/OneDrive/Desktop/GD32VW553/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env/entry.S:296    .text.irq:00000000000000e0 Undef_Handler
C:/Users/stapi/OneDrive/Desktop/GD32VW553/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env/entry.S:299    .text.irq:00000000000000e0 .L0 
C:/Users/stapi/OneDrive/Desktop/GD32VW553/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env/entry.S:267    .text.trap:0000000000000122 .L0 
C:/Users/stapi/OneDrive/Desktop/GD32VW553/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env/entry.S:299    .text.irq:00000000000000e2 .L0 
                    .debug_ranges:0000000000000000 .L0 
                       .text.trap:0000000000000000 .L0 
C:/Users/stapi/OneDrive/Desktop/GD32VW553/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env/entry.S:267    .text.trap:0000000000000122 .L0 
                        .text.irq:0000000000000000 .L0 
C:/Users/stapi/OneDrive/Desktop/GD32VW553/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env/entry.S:299    .text.irq:00000000000000e2 .L0 
                       .text.trap:0000000000000000 .L0 
C:/Users/stapi/OneDrive/Desktop/GD32VW553/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env/entry.S:267    .text.trap:0000000000000122 .L0 
                        .text.irq:0000000000000000 .L0 
C:/Users/stapi/OneDrive/Desktop/GD32VW553/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env/entry.S:299    .text.irq:00000000000000e2 .L0 
                       .debug_str:0000000000000000 .L0 
                       .debug_str:0000000000000075 .L0 
                       .debug_str:00000000000000f3 .L0 
C:/Users/stapi/OneDrive/Desktop/GD32VW553/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env/entry.S:298    .text.irq:00000000000000e0 .L11

UNDEFINED SYMBOLS
core_exception_handler
