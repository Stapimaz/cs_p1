   1              		.file	"env_init.c"
   2              		.option nopic
   3              		.attribute arch, "rv32i2p0_m2p0_a2p0_f2p0_c2p0_b_p0p94"
   4              		.attribute unaligned_access, 0
   5              		.attribute stack_align, 16
   6              		.text
   7              	.Ltext0:
   8              		.cfi_sections	.debug_frame
   9              		.section	.text._premain_init,"ax",@progbits
  10              		.align	1
  11              		.globl	_premain_init
  13              	_premain_init:
  14              	.LFB365:
  15              		.file 1 "C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_REL
   1:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** /*!
   2:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****     \file    init.c
   3:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****     \brief   Early init function for GD32VW55x SDK.
   4:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** 
   5:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****     \version 2023-07-20, V1.0.0, firmware for GD32VW55x
   6:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** */
   7:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** 
   8:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** /*
   9:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****     Copyright (c) 2023, GigaDevice Semiconductor Inc.
  10:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** 
  11:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****     Redistribution and use in source and binary forms, with or without modification,
  12:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** are permitted provided that the following conditions are met:
  13:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** 
  14:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****     1. Redistributions of source code must retain the above copyright notice, this
  15:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****        list of conditions and the following disclaimer.
  16:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****     2. Redistributions in binary form must reproduce the above copyright notice,
  17:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****        this list of conditions and the following disclaimer in the documentation
  18:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****        and/or other materials provided with the distribution.
  19:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****     3. Neither the name of the copyright holder nor the names of its contributors
  20:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****        may be used to endorse or promote products derived from this software without
  21:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****        specific prior written permission.
  22:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** 
  23:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  24:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  26:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  27:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  28:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  29:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  30:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  31:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
  32:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** OF SUCH DAMAGE.
  33:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** */
  34:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** 
  35:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** #include "gd32vw55x.h"
  36:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** 
  37:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** extern void nmi_handler(unsigned long mcause, unsigned long sp);
  38:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** extern void Exception_Init(void);
  39:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** extern void Exception_Register_EXC(uint32_t EXCn, unsigned long exc_handler);
  40:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** 
  41:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** /**
  42:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****  * \brief early init function before main
  43:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****  * \details
  44:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****  * This function is executed right before main function.
  45:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****  * For RISC-V gnu toolchain, _init function might not be called
  46:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****  * by __libc_init_array function, so we defined a new function
  47:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****  * to do initialization
  48:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****  */
  49:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** void _premain_init(void)
  50:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** {
  16              		.loc 1 50 1
  17              		.cfi_startproc
  18 0000 17030000 		call	t0,__riscv_save_0
  18      E7020300 
  19              		.cfi_offset 1, -4
  20              		.cfi_def_cfa_offset 16
  51:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****     /* TODO: Add your own initialization code here, called before main */
  52:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****     /* __ICACHE_PRESENT and __DCACHE_PRESENT are defined in demosoc.h */
  53:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****     EnableICache();
  21              		.loc 1 53 5
  22              		.file 2 "..\\..\\..\\..\\plf\\riscv\\NMSIS\\Core\\Include/core_feature_cache.h"
   1:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** /*
   2:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * Copyright (c) 2019 Nuclei Limited. All rights reserved.
   3:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  *
   4:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * SPDX-License-Identifier: Apache-2.0
   5:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  *
   6:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * not use this file except in compliance with the License.
   8:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * You may obtain a copy of the License at
   9:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  *
  10:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * www.apache.org/licenses/LICENSE-2.0
  11:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  *
  12:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * Unless required by applicable law or agreed to in writing, software
  13:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * See the License for the specific language governing permissions and
  16:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * limitations under the License.
  17:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  */
  18:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** #ifndef __CORE_FEATURE_CACHE_H__
  19:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** #define __CORE_FEATURE_CACHE_H__
  20:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** /*!
  21:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * @file     core_feature_cache.h
  22:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * @brief    Cache feature API header file for Nuclei N/NX Core
  23:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  */
  24:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** /*
  25:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * Cache Feature Configuration Macro:
  26:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * 1. __ICACHE_PRESENT:  Define whether I-Cache Unit is present or not.
  27:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  *   * 0: Not present
  28:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  *   * 1: Present
  29:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * 1. __DCACHE_PRESENT:  Define whether D-Cache Unit is present or not.
  30:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  *   * 0: Not present
  31:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  *   * 1: Present
  32:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  */
  33:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** #ifdef __cplusplus
  34:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  extern "C" {
  35:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** #endif
  36:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** 
  37:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** #if (defined(__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1)) \
  38:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****     || (defined(__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1))
  39:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** 
  40:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** /* ##########################  Cache functions  #################################### */
  41:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** /**
  42:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * \defgroup NMSIS_Core_Cache       Cache Functions
  43:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * \brief    Functions that configure Instruction and Data Cache.
  44:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * @{
  45:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  *
  46:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * Nuclei provide Cache Control and Maintainence(CCM) for software to control and maintain
  47:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * the internal L1 I/D Cache of the RISC-V Core, software can manage the cache flexibly to
  48:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * meet the actual application scenarios.
  49:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  *
  50:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * The CCM operations have 3 types: by single address, by all and flush pipeline.
  51:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * The CCM operations are done via CSR registers, M/S/U mode has its own CSR registers to
  52:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * do CCM operations. By default, CCM operations are not allowed in S/U mode, you can execute
  53:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * \ref EnableSUCCM in M-Mode to enable it.
  54:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  *
  55:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * * API names started with M<operations>, such as \ref MInvalICacheLine must be called in M-Mode o
  56:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * * API names started with S<operations>, such as \ref SInvalICacheLine should be called in S-Mode
  57:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * * API names started with U<operations>, such as \ref UInvalICacheLine should be called in U-Mode
  58:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  *
  59:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  */
  60:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** 
  61:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** 
  62:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** /**
  63:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * \brief Cache CCM Operation Fail Info
  64:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  */
  65:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** typedef enum CCM_OP_FINFO {
  66:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****     CCM_OP_SUCCESS = 0x0,               /*!< Lock Succeed */
  67:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****     CCM_OP_EXCEED_ERR = 0x1,            /*!< Exceed the the number of lockable ways(N-Way I/D-Cache
  68:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****     CCM_OP_PERM_CHECK_ERR = 0x2,        /*!< PMP/sPMP/Page-Table X(I-Cache)/R(D-Cache) permission c
  69:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****     CCM_OP_REFILL_BUS_ERR = 0x3,        /*!< Refill has Bus Error */
  70:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****     CCM_OP_ECC_ERR = 0x4                /*!< ECC Error */
  71:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** } CCM_OP_FINFO_Type;
  72:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** 
  73:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** /**
  74:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * \brief Cache CCM Command Types
  75:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  */
  76:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** typedef enum CCM_CMD {
  77:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****     CCM_DC_INVAL = 0x0,                 /*!< Unlock and invalidate D-Cache line specified by CSR CC
  78:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****     CCM_DC_WB = 0x1,                    /*!< Flush the specific D-Cache line specified by CSR CCM_X
  79:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****     CCM_DC_WBINVAL = 0x2,               /*!< Unlock, flush and invalidate the specific D-Cache line
  80:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****     CCM_DC_LOCK = 0x3,                  /*!< Lock the specific D-Cache line specified by CSR CCM_XB
  81:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****     CCM_DC_UNLOCK = 0x4,                /*!< Unlock the specific D-Cache line specified by CSR CCM_
  82:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****     CCM_DC_WBINVAL_ALL = 0x6,           /*!< Unlock and flush and invalidate all the valid and dirt
  83:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****     CCM_DC_WB_ALL = 0x7,                /*!< Flush all the valid and dirty D-Cache lines */
  84:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****     CCM_DC_INVAL_ALL = 0x17,            /*!< Unlock and invalidate all the D-Cache lines */
  85:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****     CCM_IC_INVAL = 0x8,                 /*!< Unlock and invalidate I-Cache line specified by CSR CC
  86:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****     CCM_IC_LOCK = 0xb,                  /*!< Lock the specific I-Cache line specified by CSR CCM_XB
  87:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****     CCM_IC_UNLOCK = 0xc,                /*!< Unlock the specific I-Cache line specified by CSR CCM_
  88:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****     CCM_IC_INVAL_ALL = 0xd              /*!< Unlock and invalidate all the I-Cache lines */
  89:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** } CCM_CMD_Type;
  90:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** 
  91:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** /**
  92:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * \brief Cache Information Type
  93:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  */
  94:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** typedef struct CacheInfo {
  95:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****     uint32_t linesize;                  /*!< Cache Line size in bytes */
  96:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****     uint32_t ways;                      /*!< Cache ways */
  97:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****     uint32_t setperway;                 /*!< Cache set per way */
  98:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****     uint32_t size;                      /*!< Cache total size in bytes */
  99:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** } CacheInfo_Type;
 100:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** 
 101:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** #define CCM_SUEN_SUEN_Pos               0U                              /*!< CSR CCM_SUEN: SUEN bit
 102:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** #define CCM_SUEN_SUEN_Msk               (1UL << CCM_SUEN_SUEN_Pos)      /*!< CSR CCM_SUEN: SUEN Mas
 103:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** 
 104:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** /**
 105:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * \brief  Enable CCM operation in Supervisor/User Mode
 106:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * \details
 107:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * This function enable CCM operation in Supervisor/User Mode.
 108:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * If enabled, CCM operations in supervisor/user mode will
 109:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * be allowed.
 110:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * \remarks
 111:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * - This function can be called in M-Mode only.
 112:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * \sa
 113:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * - \ref DisableSUCCM
 114:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** */
 115:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** __STATIC_FORCEINLINE void EnableSUCCM(void)
 116:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** {
 117:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****     __RV_CSR_SET(CSR_CCM_SUEN, CCM_SUEN_SUEN_Msk);
 118:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** }
 119:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** 
 120:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** /**
 121:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * \brief  Disable CCM operation in Supervisor/User Mode
 122:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * \details
 123:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * This function disable CCM operation in Supervisor/User Mode.
 124:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * If not enabled, CCM operations in supervisor/user mode will
 125:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * trigger a *illegal intruction* exception.
 126:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * \remarks
 127:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * - This function can be called in M-Mode only.
 128:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * \sa
 129:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * - \ref EnableSUCCM
 130:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** */
 131:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** __STATIC_FORCEINLINE void DisableSUCCM(void)
 132:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** {
 133:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****     __RV_CSR_CLEAR(CSR_CCM_SUEN, CCM_SUEN_SUEN_Msk);
 134:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** }
 135:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** 
 136:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** /**
 137:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * \brief  Flush pipeline after CCM operation
 138:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * \details
 139:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * This function is used to flush pipeline after CCM operations
 140:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * on Cache, it will ensure latest instructions or data can be
 141:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * seen by pipeline.
 142:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * \remarks
 143:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * - This function can be called in M/S/U-Mode only.
 144:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** */
 145:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** __STATIC_FORCEINLINE void FlushPipeCCM(void)
 146:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** {
 147:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****     __RV_CSR_WRITE(CSR_CCM_FPIPE, 0x1);
 148:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** }
 149:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** /** @} */ /* End of Doxygen Group NMSIS_Core_Cache */
 150:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** #endif
 151:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** 
 152:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** #if defined(__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1)
 153:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** 
 154:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** /**
 155:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * \defgroup NMSIS_Core_ICache      I-Cache Functions
 156:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * \ingroup  NMSIS_Core_Cache
 157:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * \brief    Functions that configure Instruction Cache.
 158:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * @{
 159:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  */
 160:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** 
 161:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** /**
 162:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * \brief  Enable ICache
 163:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * \details
 164:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * This function enable I-Cache
 165:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * \remarks
 166:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * - This function can be called in M-Mode only.
 167:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * - This \ref CSR_MCACHE_CTL register control I Cache enable.
 168:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * \sa
 169:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****  * - \ref DisableICache
 170:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** */
 171:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** __STATIC_FORCEINLINE void EnableICache(void)
 172:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h **** {
 173:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h ****     __RV_CSR_SET(CSR_MCACHE_CTL, CSR_MCACHE_CTL_IE);
  23              		.loc 2 173 5
  24              	.LBB8:
  25              	.LBB9:
  26              		.loc 2 173 5
  27              	.LVL0:
  28              		.loc 2 173 5
  29 0008 8547     		li	a5,1
  30              	 #APP
  31              	# 173 "..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_cache.h" 1
   0              	
  32              		csrs 0x7CA, a5
  33              	# 0 "" 2
  34              	 #NO_APP
  35              	.LBE9:
  36              	.LBE8:
  54:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** 
  55:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****     /* Initialize exception default handlers */
  56:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****     Exception_Init();
  37              		.loc 1 56 5
  38 000e 97000000 		call	Exception_Init
  38      E7800000 
  39              	.LVL1:
  57:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****     /* Initialize NMI handlers */
  58:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****     Exception_Register_EXC(NMI_EXCn, (unsigned long)nmi_handler);
  40              		.loc 1 58 5
  41 0016 B7050000 		lui	a1,%hi(nmi_handler)
  42 001a 0565     		li	a0,4096
  43 001c 93850500 		addi	a1,a1,%lo(nmi_handler)
  44 0020 7D15     		addi	a0,a0,-1
  45 0022 97000000 		call	Exception_Register_EXC
  45      E7800000 
  46              	.LVL2:
  59:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****     /* ECLIC initialization, mainly MTH and NLBIT */
  60:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****     eclic_level_threshold_set(0);
  47              		.loc 1 60 5
  48 002a 0145     		li	a0,0
  49 002c 97000000 		call	eclic_level_threshold_set
  49      E7800000 
  50              	.LVL3:
  61:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****     eclic_priority_group_set(ECLIC_PRIGROUP_LEVEL2_PRIO2);
  51              		.loc 1 61 5
  52 0034 0945     		li	a0,2
  53 0036 97000000 		call	eclic_priority_group_set
  53      E7800000 
  54              	.LVL4:
  62:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****     eclic_global_interrupt_enable();
  55              		.loc 1 62 5
  56 003e 97000000 		call	eclic_global_interrupt_enable
  56      E7800000 
  57              	.LVL5:
  63:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** 
  64:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****     /* Before enter into main, disable mcycle and minstret counter by default to save power */
  65:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****     __disable_all_counter();
  58              		.loc 1 65 5
  59              		.file 3 "..\\..\\..\\..\\plf\\riscv\\NMSIS\\Core\\Include/core_feature_base.h"
   1:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /*
   2:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Copyright (c) 2019 Nuclei Limited. All rights reserved.
   3:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *
   4:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * SPDX-License-Identifier: Apache-2.0
   5:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *
   6:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * not use this file except in compliance with the License.
   8:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * You may obtain a copy of the License at
   9:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *
  10:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * www.apache.org/licenses/LICENSE-2.0
  11:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *
  12:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Unless required by applicable law or agreed to in writing, software
  13:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * See the License for the specific language governing permissions and
  16:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * limitations under the License.
  17:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
  18:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
  19:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #ifndef __CORE_FEATURE_BASE__
  20:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #define __CORE_FEATURE_BASE__
  21:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /*!
  22:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * @file     core_feature_base.h
  23:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * @brief    Base core feature API for Nuclei N/NX Core
  24:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
  25:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #include <stdint.h>
  26:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #include "riscv_encoding.h"
  27:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
  28:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #ifdef __cplusplus
  29:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  extern "C" {
  30:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
  31:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
  32:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
  33:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \defgroup NMSIS_Core_Registers     Register Define and Type Definitions
  34:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Type definitions and defines for core registers.
  35:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *
  36:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * @{
  37:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
  38:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #ifndef __RISCV_XLEN
  39:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****   /** \brief Refer to the width of an integer register in bits(either 32 or 64) */
  40:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****   #ifndef __riscv_xlen
  41:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     #define __RISCV_XLEN    32
  42:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****   #else
  43:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     #define __RISCV_XLEN    __riscv_xlen
  44:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****   #endif
  45:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif /* __RISCV_XLEN */
  46:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
  47:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /** \brief Type of Control and Status Register(CSR), depends on the XLEN defined in RISC-V */
  48:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if __RISCV_XLEN == 32
  49:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****   typedef uint32_t rv_csr_t;
  50:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #elif __RISCV_XLEN == 64
  51:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****   typedef uint64_t rv_csr_t;
  52:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else
  53:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****   typedef uint32_t rv_csr_t;
  54:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
  55:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /** @} */ /* End of Doxygen Group NMSIS_Core_Registers */
  56:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
  57:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \defgroup NMSIS_Core_Base_Registers     Base Register Define and Type Definitions
  58:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \ingroup NMSIS_Core_Registers
  59:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Type definitions and defines for base core registers.
  60:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *
  61:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * @{
  62:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
  63:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
  64:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MISA CSR register.
  65:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
  66:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
  67:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
  68:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t a:1;                           /*!< bit:     0  Atomic extension */
  69:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t b:1;                           /*!< bit:     1  Tentatively reserved for Bit-Manip
  70:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t c:1;                           /*!< bit:     2  Compressed extension */
  71:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t d:1;                           /*!< bit:     3  Double-precision floating-point ex
  72:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t e:1;                           /*!< bit:     4  RV32E base ISA */
  73:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t f:1;                           /*!< bit:     5  Single-precision floating-point ex
  74:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t g:1;                           /*!< bit:     6  Additional standard extensions pre
  75:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t h:1;                           /*!< bit:     7  Hypervisor extension */
  76:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t i:1;                           /*!< bit:     8  RV32I/64I/128I base ISA */
  77:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t j:1;                           /*!< bit:     9  Tentatively reserved for Dynamical
  78:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:1;                  /*!< bit:     10 Reserved  */
  79:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t l:1;                           /*!< bit:     11 Tentatively reserved for Decimal F
  80:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t m:1;                           /*!< bit:     12 Integer Multiply/Divide extension 
  81:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t n:1;                           /*!< bit:     13 User-level interrupts supported  *
  82:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved2:1;                  /*!< bit:     14 Reserved  */
  83:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t p:1;                           /*!< bit:     15 Tentatively reserved for Packed-SI
  84:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t q:1;                           /*!< bit:     16 Quad-precision floating-point exte
  85:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _resreved3:1;                  /*!< bit:     17 Reserved  */
  86:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t s:1;                           /*!< bit:     18 Supervisor mode implemented  */
  87:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t t:1;                           /*!< bit:     19 Tentatively reserved for Transacti
  88:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t u:1;                           /*!< bit:     20 User mode implemented  */
  89:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t v:1;                           /*!< bit:     21 Tentatively reserved for Vector ex
  90:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved4:1;                  /*!< bit:     22 Reserved  */
  91:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t x:1;                           /*!< bit:     23 Non-standard extensions present  *
  92:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
  93:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved5:38;                 /*!< bit:     24..61 Reserved  */
  94:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mxl:2;                         /*!< bit:     62..63 Machine XLEN  */
  95:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else
  96:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved5:6;                  /*!< bit:     24..29 Reserved  */
  97:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mxl:2;                         /*!< bit:     30..31 Machine XLEN  */
  98:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
  99:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 100:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 101:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MISA_Type;
 102:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 103:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 104:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MSTATUS CSR register.
 105:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 106:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 107:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 108:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
 109:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:3;                  /*!< bit:     0..2  Reserved */
 110:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mie:1;                         /*!< bit:     3  Machine mode interrupt enable flag
 111:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:3;                  /*!< bit:     4..6  Reserved */
 112:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpie:1;                        /*!< bit:     7  mirror of MIE flag */
 113:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved2:3;                  /*!< bit:     8..10  Reserved */
 114:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpp:2;                         /*!< bit:     11..12 mirror of Privilege Mode */
 115:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t fs:2;                          /*!< bit:     13..14 FS status flag */
 116:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t xs:2;                          /*!< bit:     15..16 XS status flag */
 117:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mprv:1;                        /*!< bit:     Machine mode PMP */
 118:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved3:14;                 /*!< bit:     18..31 Reserved */
 119:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t uxl:2;                         /*!< bit:     32..33 user mode xlen */
 120:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved6:29;                 /*!< bit:     34..62 Reserved  */
 121:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t sd:1;                          /*!< bit:     Dirty status for XS or FS */
 122:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else
 123:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:1;                  /*!< bit:     0  Reserved */
 124:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t sie:1;                         /*!< bit:     1  supervisor interrupt enable flag *
 125:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:1;                  /*!< bit:     2  Reserved */
 126:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mie:1;                         /*!< bit:     3  Machine mode interrupt enable flag
 127:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved2:1;                  /*!< bit:     4  Reserved */
 128:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t spie:1;                        /*!< bit:     3  Supervisor Privilede mode interrup
 129:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved3:1;                  /*!< bit:     Reserved */
 130:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpie:1;                        /*!< bit:     mirror of MIE flag */
 131:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved4:3;                  /*!< bit:     Reserved */
 132:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpp:2;                         /*!< bit:     mirror of Privilege Mode */
 133:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t fs:2;                          /*!< bit:     FS status flag */
 134:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t xs:2;                          /*!< bit:     XS status flag */
 135:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mprv:1;                        /*!< bit:     Machine mode PMP */
 136:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t sum:1;                         /*!< bit:     Supervisor Mode load and store protec
 137:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved6:12;                 /*!< bit:     19..30 Reserved  */
 138:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t sd:1;                          /*!< bit:     Dirty status for XS or FS */
 139:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
 140:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 141:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 142:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MSTATUS_Type;
 143:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 144:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 145:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MTVEC CSR register.
 146:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 147:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 148:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 149:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mode:6;                        /*!< bit:     0..5   interrupt mode control */
 150:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
 151:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t addr:58;                       /*!< bit:     6..63  mtvec address */
 152:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else
 153:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t addr:26;                       /*!< bit:     6..31  mtvec address */
 154:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
 155:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 156:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 157:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MTVEC_Type;
 158:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 159:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 160:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MCAUSE CSR register.
 161:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 162:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 163:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 164:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t exccode:12;                    /*!< bit:     11..0  exception or interrupt code */
 165:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:4;                  /*!< bit:     15..12  Reserved */
 166:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpil:8;                        /*!< bit:     23..16  Previous interrupt level */
 167:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:3;                  /*!< bit:     26..24  Reserved */
 168:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpie:1;                        /*!< bit:     27  Interrupt enable flag before ente
 169:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpp:2;                         /*!< bit:     29..28  Privilede mode flag before en
 170:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t minhv:1;                       /*!< bit:     30  Machine interrupt vector table */
 171:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
 172:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved2:32;                 /*!< bit:     31..62  Reserved */
 173:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t interrupt:1;                   /*!< bit:     63  trap type. 0 means exception and 
 174:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else
 175:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t interrupt:1;                   /*!< bit:     31  trap type. 0 means exception and 
 176:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
 177:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 178:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 179:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MCAUSE_Type;
 180:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 181:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 182:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MCOUNTINHIBIT CSR register.
 183:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 184:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 185:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 186:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t cy:1;                          /*!< bit:     0     1 means disable mcycle counter 
 187:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:1;                  /*!< bit:     1     Reserved */
 188:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ir:1;                          /*!< bit:     2     1 means disable minstret counte
 189:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
 190:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:61;                 /*!< bit:     3..63 Reserved */
 191:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else
 192:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:29;                 /*!< bit:     3..31 Reserved */
 193:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
 194:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 195:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 196:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MCOUNTINHIBIT_Type;
 197:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 198:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 199:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MSUBM CSR register.
 200:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 201:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 202:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 203:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:6;                  /*!< bit:     0..5   Reserved */
 204:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t typ:2;                         /*!< bit:     6..7   current trap type */
 205:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ptyp:2;                        /*!< bit:     8..9   previous trap type */
 206:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
 207:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:54;                 /*!< bit:     10..63 Reserved */
 208:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else
 209:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:22;                 /*!< bit:     10..31 Reserved */
 210:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
 211:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 212:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 213:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MSUBM_Type;
 214:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 215:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 216:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MDCAUSE CSR register.
 217:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 218:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 219:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 220:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mdcause:2;                     /*!< bit:     0..1   More detailed exception inform
 221:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:__RISCV_XLEN-2;     /*!< bit:     2..XLEN-1 Reserved */
 222:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 223:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 224:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MDCAUSE_Type;
 225:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 226:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 227:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MMISC_CTRL CSR register.
 228:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 229:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 230:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 231:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:3;                  /*!< bit:     0..2  Reserved */
 232:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t bpu:1;                         /*!< bit:     3     dynamic prediction enable flag 
 233:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:2;                  /*!< bit:     4..5  Reserved */
 234:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t misalign:1;                    /*!< bit:     6     misaligned access support flag 
 235:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved2:2;                  /*!< bit:     7..8  Reserved */
 236:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t nmi_cause:1;                   /*!< bit:     9     mnvec control and nmi mcase exc
 237:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
 238:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved3:54;                 /*!< bit:     10..63 Reserved */
 239:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else
 240:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved3:22;                 /*!< bit:     10..31 Reserved */
 241:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
 242:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 243:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 244:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MMISCCTRL_Type;
 245:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 246:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef CSR_MMISCCTRL_Type CSR_MMISCCTL_Type;
 247:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 248:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 249:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MCACHE_CTL CSR register.
 250:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 251:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 252:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 253:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ic_en:1;                       /*!< I-Cache enable */
 254:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ic_scpd_mod:1;                 /*!< Scratchpad mode, 0: Scratchpad as ICache Data 
 255:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ic_ecc_en:1;                   /*!< I-Cache ECC enable */
 256:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ic_ecc_excp_en:1;              /*!< I-Cache 2bit ECC error exception enable */
 257:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ic_rwtecc:1;                   /*!< Control I-Cache Tag Ram ECC code injection */
 258:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ic_rwdecc:1;                   /*!< Control I-Cache Data Ram ECC code injection */
 259:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:10;
 260:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dc_en:1;                       /*!< DCache enable */
 261:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dc_ecc_en:1;                   /*!< D-Cache ECC enable */
 262:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dc_ecc_excp_en:1;              /*!< D-Cache 2bit ECC error exception enable */
 263:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dc_rwtecc:1;                   /*!< Control D-Cache Tag Ram ECC code injection */
 264:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dc_rwdecc:1;                   /*!< Control D-Cache Data Ram ECC code injection */
 265:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:__RISCV_XLEN-21;
 266:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 267:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 268:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MCACHECTL_Type;
 269:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 270:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 271:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MSAVESTATUS CSR register.
 272:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 273:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 274:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 275:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpie1:1;                       /*!< bit:     0     interrupt enable flag of fisrt 
 276:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpp1:2;                        /*!< bit:     1..2  privilede mode of fisrt level N
 277:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:3;                  /*!< bit:     3..5  Reserved */
 278:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ptyp1:2;                       /*!< bit:     6..7  NMI/exception type of before fi
 279:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpie2:1;                       /*!< bit:     8     interrupt enable flag of second
 280:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t mpp2:2;                        /*!< bit:     9..10 privilede mode of second level 
 281:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:3;                  /*!< bit:     11..13     Reserved */
 282:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ptyp2:2;                       /*!< bit:     14..15     NMI/exception type of befo
 283:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if defined(__RISCV_XLEN) && __RISCV_XLEN == 64
 284:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved2:48;                 /*!< bit:     16..63 Reserved*/
 285:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else
 286:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved2:16;                 /*!< bit:     16..31 Reserved*/
 287:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
 288:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 289:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t w;                                 /*!< Type      used for csr data access */
 290:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MSAVESTATUS_Type;
 291:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 292:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 293:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MILM_CTL CSR register.
 294:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 295:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 296:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 297:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ilm_en:1;                      /*!< ILM enable */
 298:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ilm_ecc_en:1;                  /*!< ILM ECC eanble */
 299:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ilm_ecc_excp_en:1;             /*!< ILM ECC exception enable */
 300:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ilm_rwecc:1;                   /*!< Control mecc_code write to ilm, simulate error
 301:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:6;                  /*!< Reserved */
 302:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ilm_bpa:__RISCV_XLEN-10;       /*!< ILM base address */
 303:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 304:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 305:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MILMCTL_Type;
 306:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 307:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 308:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MDLM_CTL CSR register.
 309:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 310:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 311:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 312:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dlm_en:1;                      /*!< DLM enable */
 313:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dlm_ecc_en:1;                  /*!< DLM ECC eanble */
 314:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dlm_ecc_excp_en:1;             /*!< DLM ECC exception enable */
 315:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dlm_rwecc:1;                   /*!< Control mecc_code write to dlm, simulate error
 316:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:6;                  /*!< Reserved */
 317:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dlm_bpa:__RISCV_XLEN-10;       /*!< DLM base address */
 318:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 319:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 320:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MDLMCTL_Type;
 321:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 322:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 323:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MCFG_INFO CSR register.
 324:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 325:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 326:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 327:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t tee:1;                         /*!< TEE present */
 328:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ecc:1;                         /*!< ECC present */
 329:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t clic:1;                        /*!< CLIC present */
 330:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t plic:1;                        /*!< PLIC present */
 331:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t fio:1;                         /*!< FIO present */
 332:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ppi:1;                         /*!< PPI present */
 333:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t nice:1;                        /*!< NICE present */
 334:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ilm:1;                         /*!< ILM present */
 335:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dlm:1;                         /*!< DLM present */
 336:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t icache:1;                      /*!< ICache present */
 337:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t dcache:1;                      /*!< DCache present */
 338:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:__RISCV_XLEN-11;
 339:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 340:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 341:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MCFGINFO_Type;
 342:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 343:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 344:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MICFG_INFO CSR register.
 345:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 346:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 347:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 348:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t set:4;                         /*!< I-Cache sets per way */
 349:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t way:3;                         /*!< I-Cache way */
 350:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t lsize:3;                       /*!< I-Cache line size */
 351:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t cache_ecc:1;                   /*!< I-Cache ECC present */
 352:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:5;
 353:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t lm_size:5;                     /*!< ILM size, need to be 2^n size */
 354:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t lm_xonly:1;                    /*!< ILM Execute only permission */
 355:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t lm_ecc:1;                      /*!< ILM ECC present */
 356:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:__RISCV_XLEN-23;
 357:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 358:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 359:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MICFGINFO_Type;
 360:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 361:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 362:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MDCFG_INFO CSR register.
 363:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 364:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 365:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 366:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t set:4;                         /*!< D-Cache sets per way */
 367:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t way:3;                         /*!< D-Cache way */
 368:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t lsize:3;                       /*!< D-Cache line size */
 369:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t cache_ecc:1;                   /*!< D-Cache ECC present */
 370:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:5;
 371:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t lm_size:5;                     /*!< DLM size, need to be 2^n size */
 372:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t lm_xonly:1;                    /*!< DLM Execute only permission */
 373:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t lm_ecc:1;                      /*!< DLM ECC present */
 374:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:__RISCV_XLEN-23;
 375:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 376:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 377:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MDCFGINFO_Type;
 378:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 379:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 380:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MPPICFG_INFO CSR register.
 381:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 382:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 383:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 384:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:1;                  /*!< Reserved */
 385:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ppi_size:5;                    /*!< PPI size, need to be 2^n size */
 386:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:4;                  /*!< Reserved */
 387:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ppi_bpa:__RISCV_XLEN-10;       /*!< PPI base address */
 388:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 389:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 390:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MPPICFGINFO_Type;
 391:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 392:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 393:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MFIOCFG_INFO CSR register.
 394:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 395:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 396:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 397:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:1;                  /*!< Reserved */
 398:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t fio_size:5;                    /*!< FIO size, need to be 2^n size */
 399:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:4;                  /*!< Reserved */
 400:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t fio_bpa:__RISCV_XLEN-10;       /*!< FIO base address */
 401:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 402:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 403:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MFIOCFGINFO_Type;
 404:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 405:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 406:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MECC_LOCK CSR register.
 407:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 408:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 409:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 410:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ecc_lock:1;                    /*!< RW permission, ECC Lock configure */
 411:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:__RISCV_XLEN-1;     /*!< Reserved */
 412:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 413:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 414:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MECCLOCK_Type;
 415:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 416:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 417:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief  Union type to access MECC_CODE CSR register.
 418:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 419:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef union {
 420:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     struct {
 421:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t code:9;                        /*!< Used to inject ECC check code */
 422:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved0:7;                  /*!< Reserved */
 423:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t ramid:5;                       /*!< Indicate 2bit ECC error, software can clear th
 424:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved1:3;                  /*!< Reserved */
 425:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t sramid:5;                      /*!< Indicate 1bit ECC error, software can clear th
 426:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         rv_csr_t _reserved2:__RISCV_XLEN-29;    /*!< Reserved */
 427:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     } b;                                        /*!< Structure used for bit  access */
 428:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     rv_csr_t d;                                 /*!< Type      used for csr data access */
 429:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } CSR_MECCCODE_Type;
 430:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 431:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /** @} */ /* End of Doxygen Group NMSIS_Core_Base_Registers */
 432:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 433:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /* ###########################  Core Function Access  ########################### */
 434:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 435:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \defgroup NMSIS_Core_CSR_Register_Access    Core CSR Register Access
 436:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \ingroup  NMSIS_Core
 437:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief    Functions to access the Core CSR Registers
 438:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 439:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *
 440:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * The following functions or macros provide access to Core CSR registers.
 441:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * - \ref NMSIS_Core_CSR_Encoding
 442:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * - \ref NMSIS_Core_CSR_Registers
 443:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *   @{
 444:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 445:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 446:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 447:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #ifndef __ASSEMBLY__
 448:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 449:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 450:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief CSR operation Macro for csrrw instruction.
 451:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 452:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Read the content of csr register to __v,
 453:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * then write content of val into csr register, then return __v
 454:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param csr   CSR macro definition defined in
 455:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *              \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
 456:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param val   value to store into the CSR register
 457:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \return the CSR register value before written
 458:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 459:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #define __RV_CSR_SWAP(csr, val)                                 \
 460:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     ({                                                          \
 461:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         register rv_csr_t __v = (unsigned long)(val);           \
 462:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __ASM volatile("csrrw %0, " STRINGIFY(csr) ", %1"       \
 463:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "=r"(__v)                                \
 464:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "r"(__v)                                \
 465:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "memory");                               \
 466:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __v;                                                    \
 467:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     })
 468:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 469:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 470:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief CSR operation Macro for csrr instruction.
 471:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 472:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Read the content of csr register to __v and return it
 473:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param csr   CSR macro definition defined in
 474:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *              \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
 475:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \return the CSR register value
 476:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 477:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #define __RV_CSR_READ(csr)                                      \
 478:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     ({                                                          \
 479:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         register rv_csr_t __v;                                  \
 480:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __ASM volatile("csrr %0, " STRINGIFY(csr)               \
 481:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "=r"(__v)                                \
 482:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      :                                          \
 483:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "memory");                               \
 484:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __v;                                                    \
 485:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     })
 486:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 487:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 488:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief CSR operation Macro for csrw instruction.
 489:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 490:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Write the content of val to csr register
 491:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param csr   CSR macro definition defined in
 492:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *              \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
 493:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param val   value to store into the CSR register
 494:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 495:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #define __RV_CSR_WRITE(csr, val)                                \
 496:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     ({                                                          \
 497:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         register rv_csr_t __v = (rv_csr_t)(val);                \
 498:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __ASM volatile("csrw " STRINGIFY(csr) ", %0"            \
 499:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      :                                          \
 500:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "r"(__v)                                \
 501:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "memory");                               \
 502:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     })
 503:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 504:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 505:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief CSR operation Macro for csrrs instruction.
 506:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 507:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Read the content of csr register to __v,
 508:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * then set csr register to be __v | val, then return __v
 509:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param csr   CSR macro definition defined in
 510:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *              \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
 511:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param val   Mask value to be used wih csrrs instruction
 512:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \return the CSR register value before written
 513:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 514:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #define __RV_CSR_READ_SET(csr, val)                             \
 515:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     ({                                                          \
 516:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         register rv_csr_t __v = (rv_csr_t)(val);                \
 517:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __ASM volatile("csrrs %0, " STRINGIFY(csr) ", %1"       \
 518:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "=r"(__v)                                \
 519:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "r"(__v)                                \
 520:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "memory");                               \
 521:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __v;                                                    \
 522:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     })
 523:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 524:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 525:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief CSR operation Macro for csrs instruction.
 526:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 527:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Set csr register to be csr_content | val
 528:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param csr   CSR macro definition defined in
 529:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *              \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
 530:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param val   Mask value to be used wih csrs instruction
 531:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 532:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #define __RV_CSR_SET(csr, val)                                  \
 533:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     ({                                                          \
 534:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         register rv_csr_t __v = (rv_csr_t)(val);                \
 535:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __ASM volatile("csrs " STRINGIFY(csr) ", %0"            \
 536:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      :                                          \
 537:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "r"(__v)                                \
 538:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "memory");                               \
 539:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     })
 540:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 541:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 542:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief CSR operation Macro for csrrc instruction.
 543:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 544:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Read the content of csr register to __v,
 545:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * then set csr register to be __v & ~val, then return __v
 546:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param csr   CSR macro definition defined in
 547:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *              \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
 548:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param val   Mask value to be used wih csrrc instruction
 549:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \return the CSR register value before written
 550:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 551:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #define __RV_CSR_READ_CLEAR(csr, val)                           \
 552:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     ({                                                          \
 553:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         register rv_csr_t __v = (rv_csr_t)(val);                \
 554:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __ASM volatile("csrrc %0, " STRINGIFY(csr) ", %1"       \
 555:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "=r"(__v)                                \
 556:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "r"(__v)                                \
 557:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "memory");                               \
 558:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __v;                                                    \
 559:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     })
 560:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 561:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 562:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief CSR operation Macro for csrc instruction.
 563:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 564:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Set csr register to be csr_content & ~val
 565:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param csr   CSR macro definition defined in
 566:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *              \ref NMSIS_Core_CSR_Registers, eg. \ref CSR_MSTATUS
 567:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param val   Mask value to be used wih csrc instruction
 568:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 569:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #define __RV_CSR_CLEAR(csr, val)                                \
 570:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     ({                                                          \
 571:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         register rv_csr_t __v = (rv_csr_t)(val);                \
 572:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         __ASM volatile("csrc " STRINGIFY(csr) ", %0"            \
 573:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      :                                          \
 574:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "r"(__v)                                \
 575:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****                      : "memory");                               \
 576:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     })
 577:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif /* __ASSEMBLY__ */
 578:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 579:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 580:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Get IRQ status
 581:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details Get IRQ state in the MSUBM Register.
 582:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \remarks
 583:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *          Can only be executed in Privileged modes.
 584:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 585:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 586:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 587:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     return (uint32_t) ((__RV_CSR_READ(CSR_MSUBM) & ((0xFFFFFFFFUL << 6) & (0xFFFFFFFFUL >> (31U - (
 588:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 589:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 590:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 591:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Enable IRQ Interrupts
 592:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details Enables IRQ interrupts by setting the MIE-bit in the MSTATUS Register.
 593:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \remarks
 594:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *          Can only be executed in Privileged modes.
 595:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 596:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 597:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 598:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __RV_CSR_SET(CSR_MSTATUS, MSTATUS_MIE);
 599:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 600:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 601:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 602:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Disable IRQ Interrupts
 603:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details Disables IRQ interrupts by clearing the MIE-bit in the MSTATUS Register.
 604:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \remarks
 605:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *          Can only be executed in Privileged modes.
 606:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 607:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 608:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 609:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __RV_CSR_CLEAR(CSR_MSTATUS, MSTATUS_MIE);
 610:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 611:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 612:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 613:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Read whole 64 bits value of mcycle counter
 614:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details This function will read the whole 64 bits of MCYCLE register
 615:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \return  The whole 64 bits value of MCYCLE
 616:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \remarks It will work for both RV32 and RV64 to get full 64bits value of MCYCLE
 617:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 618:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE uint64_t __get_rv_cycle(void)
 619:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 620:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if __RISCV_XLEN == 32
 621:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     volatile uint32_t high0, low, high;
 622:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     uint64_t full;
 623:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 624:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     high0 = __RV_CSR_READ(CSR_MCYCLEH);
 625:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     low = __RV_CSR_READ(CSR_MCYCLE);
 626:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     high = __RV_CSR_READ(CSR_MCYCLEH);
 627:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     if (high0 != high) {
 628:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         low = __RV_CSR_READ(CSR_MCYCLE);
 629:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     }
 630:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     full = (((uint64_t)high) << 32) | low;
 631:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     return full;
 632:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #elif __RISCV_XLEN == 64
 633:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     return (uint64_t)__RV_CSR_READ(CSR_MCYCLE);
 634:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else // TODO Need cover for XLEN=128 case in future
 635:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     return (uint64_t)__RV_CSR_READ(CSR_MCYCLE);
 636:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
 637:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 638:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 639:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 640:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Read whole 64 bits value of machine instruction-retired counter
 641:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details This function will read the whole 64 bits of MINSTRET register
 642:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \return  The whole 64 bits value of MINSTRET
 643:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \remarks It will work for both RV32 and RV64 to get full 64bits value of MINSTRET
 644:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 645:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE uint64_t __get_rv_instret(void)
 646:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 647:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if __RISCV_XLEN == 32
 648:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     volatile uint32_t high0, low, high;
 649:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     uint64_t full;
 650:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 651:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     high0 = __RV_CSR_READ(CSR_MINSTRETH);
 652:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     low = __RV_CSR_READ(CSR_MINSTRET);
 653:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     high = __RV_CSR_READ(CSR_MINSTRETH);
 654:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     if (high0 != high) {
 655:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         low = __RV_CSR_READ(CSR_MINSTRET);
 656:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     }
 657:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     full = (((uint64_t)high) << 32) | low;
 658:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     return full;
 659:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #elif __RISCV_XLEN == 64
 660:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     return (uint64_t)__RV_CSR_READ(CSR_MINSTRET);
 661:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else // TODO Need cover for XLEN=128 case in future
 662:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     return (uint64_t)__RV_CSR_READ(CSR_MINSTRET);
 663:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
 664:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 665:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 666:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 667:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Read whole 64 bits value of real-time clock
 668:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details This function will read the whole 64 bits of TIME register
 669:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \return  The whole 64 bits value of TIME CSR
 670:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \remarks It will work for both RV32 and RV64 to get full 64bits value of TIME
 671:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \attention only available when user mode available
 672:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 673:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE uint64_t __get_rv_time(void)
 674:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 675:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #if __RISCV_XLEN == 32
 676:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     volatile uint32_t high0, low, high;
 677:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     uint64_t full;
 678:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 679:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     high0 = __RV_CSR_READ(CSR_TIMEH);
 680:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     low = __RV_CSR_READ(CSR_TIME);
 681:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     high = __RV_CSR_READ(CSR_TIMEH);
 682:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     if (high0 != high) {
 683:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****         low = __RV_CSR_READ(CSR_TIME);
 684:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     }
 685:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     full = (((uint64_t)high) << 32) | low;
 686:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     return full;
 687:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #elif __RISCV_XLEN == 64
 688:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     return (uint64_t)__RV_CSR_READ(CSR_TIME);
 689:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #else // TODO Need cover for XLEN=128 case in future
 690:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     return (uint64_t)__RV_CSR_READ(CSR_TIME);
 691:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** #endif
 692:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 693:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 694:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /** @} */ /* End of Doxygen Group NMSIS_Core_CSR_Register_Access */
 695:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 696:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /* ###########################  CPU Intrinsic Functions ########################### */
 697:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 698:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \defgroup NMSIS_Core_CPU_Intrinsic   Intrinsic Functions for CPU Intructions
 699:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \ingroup  NMSIS_Core
 700:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief    Functions that generate RISC-V CPU instructions.
 701:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 702:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *
 703:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * The following functions generate specified RISC-V instructions that cannot be directly accessed 
 704:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  *   @{
 705:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 706:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 707:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 708:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   NOP Instruction
 709:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 710:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * No Operation does nothing.
 711:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * This instruction can be used for code alignment purposes.
 712:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 713:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __NOP(void)
 714:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 715:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __ASM volatile("nop");
 716:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 717:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 718:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 719:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Wait For Interrupt
 720:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 721:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Wait For Interrupt is is executed using CSR_WFE.WFE=0 and WFI instruction.
 722:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * It will suspends execution until interrupt, NMI or Debug happened.
 723:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * When Core is waked up by interrupt, if
 724:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * 1. mstatus.MIE == 1(interrupt enabled), Core will enter ISR code
 725:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * 2. mstatus.MIE == 0(interrupt disabled), Core will resume previous execution
 726:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 727:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __WFI(void)
 728:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 729:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __RV_CSR_CLEAR(CSR_WFE, WFE_WFE);
 730:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __ASM volatile("wfi");
 731:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 732:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 733:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 734:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Wait For Event
 735:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 736:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Wait For Event is executed using CSR_WFE.WFE=1 and WFI instruction.
 737:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * It will suspends execution until event, NMI or Debug happened.
 738:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * When Core is waked up, Core will resume previous execution
 739:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 740:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __WFE(void)
 741:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 742:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __RV_CSR_SET(CSR_WFE, WFE_WFE);
 743:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __ASM volatile("wfi");
 744:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __RV_CSR_CLEAR(CSR_WFE, WFE_WFE);
 745:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 746:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 747:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 748:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Breakpoint Instruction
 749:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 750:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Causes the processor to enter Debug state.
 751:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Debug tools can use this to investigate system state
 752:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * when the instruction at a particular address is reached.
 753:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 754:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __EBREAK(void)
 755:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 756:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __ASM volatile("ebreak");
 757:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 758:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 759:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 760:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Environment Call Instruction
 761:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 762:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * The ECALL instruction is used to make a service request to
 763:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * the execution environment.
 764:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 765:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __ECALL(void)
 766:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 767:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __ASM volatile("ecall");
 768:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 769:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 770:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 771:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief WFI Sleep Mode enumeration
 772:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 773:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** typedef enum WFI_SleepMode {
 774:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     WFI_SHALLOW_SLEEP = 0,      /*!< Shallow sleep mode, the core_clk will poweroff */
 775:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     WFI_DEEP_SLEEP = 1          /*!< Deep sleep mode, the core_clk and core_ano_clk will poweroff *
 776:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** } WFI_SleepMode_Type;
 777:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 778:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 779:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Set Sleep mode of WFI
 780:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 781:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Set the SLEEPVALUE CSR register to control the
 782:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * WFI Sleep mode.
 783:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \param[in] mode      The sleep mode to be set
 784:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 785:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __set_wfi_sleepmode(WFI_SleepMode_Type mode)
 786:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 787:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __RV_CSR_WRITE(CSR_SLEEPVALUE, mode);
 788:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 789:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 790:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 791:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Send TX Event
 792:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 793:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Set the CSR TXEVT to control send a TX Event.
 794:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * The Core will output signal tx_evt as output event signal.
 795:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 796:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __TXEVT(void)
 797:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 798:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __RV_CSR_SET(CSR_TXEVT, 0x1);
 799:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 800:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 801:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 802:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Enable MCYCLE counter
 803:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 804:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Clear the CY bit of MCOUNTINHIBIT to 0 to enable MCYCLE Counter
 805:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 806:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __enable_mcycle_counter(void)
 807:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 808:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __RV_CSR_CLEAR(CSR_MCOUNTINHIBIT, MCOUNTINHIBIT_CY);
 809:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 810:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 811:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 812:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Disable MCYCLE counter
 813:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 814:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Set the CY bit of MCOUNTINHIBIT to 1 to disable MCYCLE Counter
 815:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 816:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __disable_mcycle_counter(void)
 817:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 818:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __RV_CSR_SET(CSR_MCOUNTINHIBIT, MCOUNTINHIBIT_CY);
 819:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 820:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 821:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 822:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Enable MINSTRET counter
 823:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 824:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Clear the IR bit of MCOUNTINHIBIT to 0 to enable MINSTRET Counter
 825:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 826:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __enable_minstret_counter(void)
 827:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 828:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __RV_CSR_CLEAR(CSR_MCOUNTINHIBIT, MCOUNTINHIBIT_IR);
 829:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 830:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 831:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 832:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Disable MINSTRET counter
 833:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 834:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Set the IR bit of MCOUNTINHIBIT to 1 to disable MINSTRET Counter
 835:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 836:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __disable_minstret_counter(void)
 837:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 838:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __RV_CSR_SET(CSR_MCOUNTINHIBIT, MCOUNTINHIBIT_IR);
 839:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 840:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 841:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 842:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Enable MCYCLE & MINSTRET counter
 843:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 844:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Clear the IR and CY bit of MCOUNTINHIBIT to 1 to enable MINSTRET & MCYCLE Counter
 845:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 846:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __enable_all_counter(void)
 847:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 848:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __RV_CSR_CLEAR(CSR_MCOUNTINHIBIT, MCOUNTINHIBIT_IR|MCOUNTINHIBIT_CY);
 849:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** }
 850:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** 
 851:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** /**
 852:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \brief   Disable MCYCLE & MINSTRET counter
 853:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * \details
 854:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  * Set the IR and CY bit of MCOUNTINHIBIT to 1 to disable MINSTRET & MCYCLE Counter
 855:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****  */
 856:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** __STATIC_FORCEINLINE void __disable_all_counter(void)
 857:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h **** {
 858:..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h ****     __RV_CSR_SET(CSR_MCOUNTINHIBIT, MCOUNTINHIBIT_IR|MCOUNTINHIBIT_CY);
  60              		.loc 3 858 5
  61              	.LBB10:
  62              	.LBB11:
  63              		.loc 3 858 5
  64              		.loc 3 858 5
  65 0046 9547     		li	a5,5
  66              	 #APP
  67              	# 858 "..\..\..\..\plf\riscv\NMSIS\Core\Include/core_feature_base.h" 1
   0              	
  68              		csrs 0x320, a5
  69              	# 0 "" 2
  70              	 #NO_APP
  71              	.LBE11:
  72              	.LBE10:
  66:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** }
  73              		.loc 1 66 1 is_stmt 0
  74 004c 17030000 		tail	__riscv_restore_0
  74      67000300 
  75              		.cfi_restore 1
  76              		.cfi_def_cfa_offset 0
  77              		.cfi_endproc
  78              	.LFE365:
  80              		.section	.text._postmain_fini,"ax",@progbits
  81              		.align	1
  82              		.globl	_postmain_fini
  84              	_postmain_fini:
  85              	.LFB366:
  67:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** 
  68:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** /**
  69:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****  * \brief finish function after main
  70:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****  * \param [in]  status     status code return from main
  71:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****  * \details
  72:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****  * This function is executed right after main function.
  73:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****  * For RISC-V gnu toolchain, _fini function might not be called
  74:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****  * by __libc_fini_array function, so we defined a new function
  75:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****  * to do initialization
  76:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****  */
  77:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** void _postmain_fini(int status)
  78:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** {
  86              		.loc 1 78 1 is_stmt 1
  87              		.cfi_startproc
  88              	.LVL6:
  79:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****     /* TODO: Add your own finishing code here, called after main */
  80:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** }
  89              		.loc 1 80 1
  90 0000 8280     		ret
  91              		.cfi_endproc
  92              	.LFE366:
  94              		.section	.text._init,"ax",@progbits
  95              		.align	1
  96              		.globl	_init
  98              	_init:
  99              	.LFB367:
  81:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** 
  82:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** /**
  83:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****  * \brief _init function called in __libc_init_array()
  84:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****  * \details
  85:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****  * This `__libc_init_array()` function is called during startup code,
  86:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****  * user need to implement this function, otherwise when link it will
  87:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****  * error init.c:(.text.__libc_init_array+0x26): undefined reference to `_init'
  88:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****  * \note
  89:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****  * Please use \ref _premain_init function now
  90:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****  */
  91:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** void _init(void)
  92:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** {
 100              		.loc 1 92 1
 101              		.cfi_startproc
  93:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c ****     /* Don't put any code here, please use _premain_init now */
  94:C:/Users/stapi/OneDrive/Desktop/GD32VW553/V1_MQTT_OK/GD32VW55X_Wifi_BLE_SDK/GD32VW55x_RELEASE_V1.0.2/MSDK/plf/riscv/env\env_init.c **** }
 102              		.loc 1 94 1
 103 0000 8280     		ret
 104              		.cfi_endproc
 105              	.LFE367:
 107              		.section	.text._fini,"ax",@progbits
 108              		.align	1
 109              		.globl	_fini
 111              	_fini:
 112              	.LFB370:
 113              		.cfi_startproc
 114 0000 8280     		ret
 115              		.cfi_endproc
 116              	.LFE370:
 118              		.text
 119              	.Letext0:
 120              		.file 4 "c:\\users\\stapi\\onedrive\\desktop\\gd32vw553\\embeddedbuilder_v1.4.7.26843\\tools\\nucl
 121              		.file 5 "c:\\users\\stapi\\onedrive\\desktop\\gd32vw553\\embeddedbuilder_v1.4.7.26843\\tools\\nucl
 122              		.file 6 "..\\..\\..\\..\\plf\\GD32VW55x_standard_peripheral\\Include/gd32vw55x_eclic.h"
 123              		.file 7 "..\\..\\..\\..\\plf\\riscv\\gd32vw55x/gd32vw55x.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 env_init.c
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:13     .text._premain_init:0000000000000000 _premain_init
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:17     .text._premain_init:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:18     .text._premain_init:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:19     .text._premain_init:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:20     .text._premain_init:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:23     .text._premain_init:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:26     .text._premain_init:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:28     .text._premain_init:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:29     .text._premain_init:0000000000000008 .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:38     .text._premain_init:000000000000000e .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:41     .text._premain_init:0000000000000016 .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:48     .text._premain_init:000000000000002a .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:52     .text._premain_init:0000000000000034 .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:56     .text._premain_init:000000000000003e .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:60     .text._premain_init:0000000000000046 .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:63     .text._premain_init:0000000000000046 .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:64     .text._premain_init:0000000000000046 .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:65     .text._premain_init:0000000000000046 .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:74     .text._premain_init:000000000000004c .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:75     .text._premain_init:0000000000000054 .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:76     .text._premain_init:0000000000000054 .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:77     .text._premain_init:0000000000000054 .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:84     .text._postmain_fini:0000000000000000 _postmain_fini
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:87     .text._postmain_fini:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:89     .text._postmain_fini:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:90     .text._postmain_fini:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:91     .text._postmain_fini:0000000000000002 .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:98     .text._init:0000000000000000 _init
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:101    .text._init:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:102    .text._init:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:103    .text._init:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:104    .text._init:0000000000000002 .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:111    .text._fini:0000000000000000 _fini
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:113    .text._fini:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:115    .text._fini:0000000000000002 .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:80     .text._premain_init:0000000000000054 .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:94     .text._postmain_fini:0000000000000002 .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:107    .text._init:0000000000000002 .L0 
                     .debug_frame:0000000000000000 .L0 
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:425    .debug_abbrev:0000000000000000 .Ldebug_abbrev0
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:856    .debug_str:00000000000001fa .LASF33
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:806    .debug_str:0000000000000000 .LASF34
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:858    .debug_str:00000000000002f3 .LASF35
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:794    .debug_ranges:0000000000000000 .Ldebug_ranges0
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:804    .debug_line:0000000000000000 .Ldebug_line0
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:848    .debug_str:00000000000001c4 .LASF0
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:880    .debug_str:00000000000003f9 .LASF1
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:826    .debug_str:000000000000011a .LASF2
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:868    .debug_str:00000000000003a8 .LASF3
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:832    .debug_str:000000000000014a .LASF4
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:876    .debug_str:00000000000003d7 .LASF5
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:836    .debug_str:000000000000016d .LASF10
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:830    .debug_str:0000000000000138 .LASF6
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:860    .debug_str:000000000000037c .LASF7
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:882    .debug_str:0000000000000405 .LASF8
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:854    .debug_str:00000000000001f5 .LASF9
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:874    .debug_str:00000000000003ce .LASF11
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:872    .debug_str:00000000000003c9 .LASF36
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:840    .debug_str:000000000000018b .LASF12
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:850    .debug_str:00000000000001d1 .LASF13
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:816    .debug_str:00000000000000d6 .LASF14
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:824    .debug_str:000000000000010f .LASF15
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:838    .debug_str:0000000000000178 .LASF16
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:842    .debug_str:000000000000019b .LASF17
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:844    .debug_str:00000000000001a8 .LASF18
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:852    .debug_str:00000000000001e2 .LASF19
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:834    .debug_str:000000000000015d .LASF20
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:828    .debug_str:0000000000000128 .LASF21
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:862    .debug_str:000000000000038a .LASF22
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:846    .debug_str:00000000000001bb .LASF23
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:884    .debug_str:000000000000041c .LASF37
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:866    .debug_str:00000000000003a2 .LASF38
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:864    .debug_str:0000000000000393 .LASF24
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:85     .text._postmain_fini:0000000000000000 .LFB366
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:92     .text._postmain_fini:0000000000000002 .LFE366
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:818    .debug_str:00000000000000e3 .LASF39
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:814    .debug_str:00000000000000c8 .LASF25
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:14     .text._premain_init:0000000000000000 .LFB365
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:78     .text._premain_init:0000000000000054 .LFE365
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:24     .text._premain_init:0000000000000008 .LBB8
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:36     .text._premain_init:000000000000000e .LBE8
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:25     .text._premain_init:0000000000000008 .LBB9
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:35     .text._premain_init:000000000000000e .LBE9
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:61     .text._premain_init:0000000000000046 .LBB10
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:72     .text._premain_init:000000000000004c .LBE10
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:62     .text._premain_init:0000000000000046 .LBB11
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:71     .text._premain_init:000000000000004c .LBE11
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:39     .text._premain_init:0000000000000016 .LVL1
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:46     .text._premain_init:000000000000002a .LVL2
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:50     .text._premain_init:0000000000000034 .LVL3
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:54     .text._premain_init:000000000000003e .LVL4
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:57     .text._premain_init:0000000000000046 .LVL5
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:812    .debug_str:00000000000000bb .LASF26
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:822    .debug_str:00000000000000f9 .LASF27
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:99     .text._init:0000000000000000 .LFB367
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:105    .text._init:0000000000000002 .LFE367
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:820    .debug_str:00000000000000ea .LASF28
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:870    .debug_str:00000000000003b2 .LASF29
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:810    .debug_str:00000000000000a1 .LASF30
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:878    .debug_str:00000000000003e0 .LASF31
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:808    .debug_str:0000000000000083 .LASF32
C:\Users\stapi\AppData\Local\Temp\ccaXe3Sc.s:125    .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
__riscv_save_0
Exception_Init
nmi_handler
Exception_Register_EXC
eclic_level_threshold_set
eclic_priority_group_set
eclic_global_interrupt_enable
__riscv_restore_0
